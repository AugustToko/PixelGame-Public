%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Free Game Icons.eps
%%Creator: Adobe Illustrator(R) 22.0
%%For: Olga Bikmullina
%%CreationDate: 10/26/2018
%%BoundingBox: 0 0 976 782
%%HiResBoundingBox: 0 0 975.0060 781.8187
%%CropBox: 0 0 975.0060 781.8187
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 22.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 22.0.0 x243 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c143 79.161210, 2017/08/11-10:28:36        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <xmp:CreatorTool>Adobe Illustrator CC 22.0 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2018-10-26T00:26:48+03:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>208</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA0AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9I+afMdvoOltdMvq3MhE&#xA;VlbD7UszfZUe3jmNqtSMML69B3lzdBopajJw8ojeR7gxBPNl15f1yA6lN61hdt9Xv5v2UuB/u5R2&#xA;UnlUfy08M02DXnHmImbiefv7/wAdHdHs+OpxHwxU47xHfH+b93x970ZWVlDKQVIqCNwQc6J5gim8&#xA;VdirGtR1pbzVpdKtTygsk538g3Bkb4Y4a/ex+VPHNLrdZxSOOPKI9Xv6R/T8HCzZrJiOnP8AUu8p&#xA;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&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>401.158718</stDim:w>
            <stDim:h>323.547628</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Группа образцов по умолчанию</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -781.819 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 781.819 li
975.006 781.819 li
975.006 0 li
cp
clp
286.53 198.324 mo
287.173 205.153 287.266 212.135 286.365 218.291 cv
286.361 218.306 286.361 218.322 286.359 218.338 cv
286.359 218.342 286.355 218.346 286.353 218.349 cv
286.256 219.008 286.148 219.654 286.029 220.286 cv
286.029 220.292 li
286.011 220.391 285.998 220.484 285.982 220.563 cv
285.963 220.664 285.934 220.784 285.906 220.922 cv
285.855 221.172 285.809 221.41 285.759 221.64 cv
285.754 221.658 285.751 221.68 285.746 221.699 cv
285.746 221.701 285.742 221.703 285.741 221.704 cv
285.741 221.709 285.741 221.707 285.741 221.71 cv
285.741 221.716 li
285.741 221.721 285.736 221.716 285.735 221.722 cv
285.739 221.717 285.722 221.789 285.729 221.758 cv
285.707 221.859 285.696 221.914 285.694 221.922 cv
285.694 221.929 285.676 221.981 285.653 222.081 cv
285.617 222.234 285.578 222.401 285.535 222.575 cv
285.48 222.798 285.291 223.482 285.235 223.694 cv
286.371 226.525 li
284.24 226.725 li
284.094 227.101 283.944 227.474 283.787 227.832 cv
283.787 227.834 283.787 227.836 283.787 227.838 cv
283.798 227.811 283.792 227.832 283.781 227.856 cv
283.775 227.856 li
283.488 228.507 283.185 229.132 282.857 229.728 cv
282.844 229.753 282.82 229.797 282.786 229.857 cv
282.777 229.873 282.772 229.871 282.757 229.898 cv
282.643 230.1 282.529 230.294 282.415 230.481 cv
282.294 230.681 282.172 230.884 282.038 231.087 cv
281.906 231.29 281.771 231.483 281.638 231.67 cv
281.606 231.716 281.576 231.755 281.544 231.8 cv
277.53 228.961 273.963 226.537 270.048 226.549 cv
268.848 226.553 267.64 226.808 266.457 227.338 cv
264.494 228.217 262.819 229.535 261.565 231.146 cv
264.538 235.196 li
259.694 234.596 li
259.294 235.764 257.4 239.09 261.674 245.304 cv
265.948 251.518 277.341 254.365 284.75 258.607 cv
291.064 262.221 298.742 264.79 304.881 266.492 cv
311.02 268.194 316.24 269.034 320.53 268.787 cv
324.819 268.54 327.893 267.464 330.902 265.426 cv
335.888 262.049 341.062 256.349 342.449 251.533 cv
343.836 246.717 344.689 241.423 344.986 234.832 cv
345.284 228.241 344.161 218.708 346.83 209.007 cv
345.33 208.65 342.615 208.136 342.309 208.183 cv
341.91 208.244 346.93 205.248 348.088 204.588 cv
350.025 196.525 361.876 185.557 364.112 184.023 cv
364.112 184.023 358.212 181.376 355.112 180.495 cv
350.247 179.114 344.857 177.984 340.185 177.783 cv
338.76 180.243 li
338.254 177.718 li
336.447 180.726 li
336.17 177.7 li
332.965 177.688 329.863 178.016 326.711 177.956 cv
321.621 177.859 316.35 177.384 310.093 175.46 cv
307.631 176.198 305.353 177.525 303.353 179.745 cv
303.782 177.622 304.531 175.66 305.873 173.994 cv
302.315 172.616 293.191 167.67 293.191 167.67 cv
289.019 172.379 285.172 183.908 286.53 198.324 cv
286.53 198.324 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.478431 .329412 .180392 rgb
f
295.665 171.759 mo
282.483 180.629 294.724 202.716 287.483 217.955 cv
287.483 217.959 287.479 217.963 287.477 217.967 cv
287.345 218.864 287.194 219.747 287.018 220.61 cv
286.963 220.884 286.908 221.158 286.847 221.428 cv
286.843 221.442 286.839 221.455 286.836 221.469 cv
286.811 221.581 286.785 221.694 286.76 221.805 cv
286.72 221.974 286.677 222.143 286.636 222.311 cv
286.567 222.591 286.498 222.866 286.424 223.141 cv
286.355 223.396 286.285 223.649 286.212 223.9 cv
287.707 227.367 li
284.988 227.367 li
284.929 227.507 284.871 227.648 284.811 227.785 cv
284.807 227.793 284.803 227.801 284.8 227.809 cv
284.499 228.49 284.177 229.148 283.828 229.781 cv
283.803 229.826 283.777 229.871 283.752 229.916 cv
283.742 229.932 283.732 229.947 283.722 229.963 cv
283.604 230.173 283.486 230.378 283.363 230.581 cv
283.231 230.8 283.096 231.012 282.957 231.223 cv
282.818 231.434 282.678 231.643 282.533 231.847 cv
282.39 232.048 282.246 232.248 282.097 232.442 cv
282.097 232.444 282.094 232.446 282.092 232.448 cv
282.092 232.45 282.087 232.451 282.086 232.453 cv
281.936 232.647 281.783 232.837 281.627 233.024 cv
281.469 233.214 281.309 233.401 281.144 233.583 cv
280.997 233.746 280.844 233.904 280.691 234.06 cv
280.675 234.077 280.66 234.096 280.644 234.113 cv
280.628 234.129 280.612 234.145 280.596 234.16 cv
280.439 234.319 280.278 234.473 280.114 234.625 cv
279.937 234.79 279.756 234.952 279.573 235.108 cv
279.393 235.261 279.211 235.411 279.025 235.555 cv
279.017 235.561 279.009 235.567 279.002 235.573 cv
278.997 235.575 278.997 235.577 278.996 235.579 cv
278.828 235.709 278.657 235.832 278.484 235.956 cv
278.459 235.973 278.437 235.992 278.413 236.009 cv
278.385 236.028 278.359 236.048 278.331 236.068 cv
278.158 236.188 277.98 236.301 277.801 236.415 cv
277.783 236.427 277.766 236.439 277.748 236.45 cv
277.558 236.57 277.367 236.685 277.171 236.798 cv
276.96 236.918 276.748 237.033 276.53 237.145 cv
276.524 237.148 276.517 237.148 276.512 237.151 cv
276.306 237.255 276.099 237.36 275.888 237.457 cv
275.87 237.465 275.852 237.472 275.835 237.48 cv
275.635 237.571 275.429 237.656 275.222 237.739 cv
275.191 237.752 275.16 237.762 275.128 237.775 cv
274.934 237.851 274.739 237.928 274.54 237.998 cv
274.494 238.014 274.45 238.03 274.405 238.045 cv
287.561 245.761 305.687 254.753 323.185 251.025 cv
352.451 252.216 339.751 232.077 345.183 209.637 cv
343.233 209.18 340.67 208.603 340.339 208.654 cv
339.941 208.715 344.368 205.606 347.008 203.857 cv
349.658 197.146 354.341 190.374 362.613 184.037 cv
360.566 183.151 358.618 182.409 356.756 181.788 cv
352.326 180.466 346.364 180.007 339.821 179.728 cv
338.426 181.942 li
337.931 179.649 li
336.089 182.648 li
335.788 179.57 li
326.503 179.253 316.475 179.039 308.158 177.179 cv
305.776 178.471 303.575 180.244 301.6 182.654 cv
301.966 180.273 302.599 178.01 303.672 175.943 cv
300.589 174.911 297.864 173.559 295.666 171.758 cv
295.665 171.759 li
cp
.776471 .6 .337255 rgb
f
282.763 238.703 mo
284.661 244.979 286.981 248.135 287.892 254.901 cv
297.249 260.652 309.054 265.109 318.567 266.213 cv
331.538 266.633 339.5 257.417 341.751 249.6 cv
342.944 245.458 343.246 240.782 343.497 235.755 cv
341.294 240.916 335.008 247.593 329.574 249.766 cv
313.859 256.048 292.737 247.066 282.763 238.703 cv
cp
.611765 .423529 .231373 rgb
f
280.124 230.916 mo
285.452 233.856 290.754 238.238 297.55 240.568 cv
301.078 241.777 304.521 243.131 308.215 244.074 cv
311.123 244.817 315.053 245.742 317.793 246.631 cv
319.321 247.128 332.158 251.046 328.325 253.213 cv
326.28 254.37 322.237 252.558 317.161 252.101 cv
306.991 251.187 293.531 249.835 289.69 247.548 cv
284.943 244.722 279.812 236.506 280.124 230.916 cv
280.124 230.916 li
cp
.478431 .329412 .180392 rgb
f
295.006 171.947 mo
289.04 176.13 288.671 184.34 289.073 191.066 cv
289.452 200.007 289.466 209.161 287.713 217.967 cv
287.317 219.952 286.839 221.966 286.223 223.924 cv
287.707 227.367 li
284.958 227.367 li
284.404 228.661 283.771 229.91 283.039 231.082 cv
288.854 236.079 313.585 241.111 326.103 233.425 cv
340.518 224.575 333.139 211.288 341.126 196.689 cv
344.794 189.985 353.561 183.825 358.509 182.413 cv
352.622 179.783 346.313 179.494 339.961 179.499 cv
338.424 181.942 li
337.956 179.508 li
336.087 182.648 li
335.781 179.523 li
333.396 179.535 331.017 179.527 328.664 179.387 cv
321.826 179.042 314.681 178.848 307.921 177.315 cv
305.631 178.595 303.507 180.325 301.599 182.654 cv
301.954 180.339 302.563 178.135 303.582 176.114 cv
300.591 175.118 297.711 173.775 295.006 171.947 cv
295.006 171.947 li
cp
.94902 .796078 .541176 rgb
f
330.591 259.704 mo
330.595 265.686 325.864 267.375 321.447 267.743 cv
315.912 268.204 315.648 264.354 315.835 259.704 cv
316.022 255.054 320.205 251.301 324.28 251.301 cv
328.355 251.301 330.588 255.05 330.591 259.704 cv
cp
.776471 .6 .337255 rgb
f
269.894 227.267 mo
268.872 227.27 267.857 227.483 266.827 227.945 cv
265.194 228.677 263.789 229.741 262.701 231.029 cv
266.263 235.879 li
260.541 235.173 li
260.328 235.992 260.211 236.842 260.211 237.71 cv
260.211 248.497 273.346 250.868 284.97 257.524 cv
297.733 264.831 314.44 268.234 319.352 267.937 cv
317.67 266.204 316.638 263.838 316.638 261.232 cv
316.638 259.493 317.097 257.866 317.904 256.458 cv
314.296 253.639 li
320.624 253.439 li
322.207 252.293 324.153 251.614 326.257 251.614 cv
326.959 251.614 327.64 251.689 328.3 251.831 cv
318.69 246.617 303.826 245.393 292.704 239.923 cv
282.556 234.932 276.142 227.249 269.894 227.267 cv
269.894 227.267 li
cp
.94902 .796078 .541176 rgb
f
318.579 253.907 mo
317.304 255.392 315.734 257.308 315.505 259.328 cv
317.04 259.632 318.747 260.155 321.05 261.058 cv
321.591 257.776 322.417 256.137 324.882 255.808 cv
321.026 255.039 319.851 254.595 318.579 253.907 cv
cp
f
284.968 257.527 mo
296.719 265.002 314.438 268.405 319.35 268.108 cv
317.668 266.376 316.637 263.841 316.637 261.235 cv
316.637 259.666 317.013 258.187 317.679 256.879 cv
305.604 264.472 295.552 260.759 284.968 257.527 cv
cp
.776471 .6 .337255 rgb
f
293.311 168.833 mo
289.006 175.269 286.322 183.42 287.659 197.629 cv
288.466 206.193 288.433 215.028 286.636 222.329 cv
299.864 222.925 310.931 219.37 316.819 214.708 cv
329.345 204.788 329.634 188.164 355.136 181.271 cv
349.646 179.602 344.886 178.979 340.42 178.763 cv
338.424 181.942 li
338.136 178.69 li
336.087 182.648 li
335.699 178.663 li
327.64 178.65 320.046 179.244 310.052 176.267 cv
306.94 177.588 304.087 179.618 301.599 182.654 cv
302.06 179.653 302.946 176.837 304.601 174.366 cv
301.156 172.994 297.424 171.193 293.31 168.833 cv
293.311 168.833 li
cp
.984314 .929412 .74902 rgb
f
260.541 235.173 mo
260.374 235.814 260.266 236.471 260.229 237.145 cv
261.435 236.454 262.674 235.947 263.943 235.591 cv
260.541 235.173 li
cp
269.894 227.267 mo
268.872 227.27 267.857 227.483 266.827 227.945 cv
265.192 228.677 263.789 229.745 262.701 231.035 cv
265.756 235.191 li
279.409 232.915 296.069 246.461 310.593 245.851 cv
304.436 244.248 298.126 242.59 292.704 239.923 cv
282.556 234.932 276.142 227.249 269.894 227.267 cv
269.894 227.267 li
cp
f
315.561 260.762 mo
315.561 263.623 316.81 266.192 318.793 267.954 cv
318.992 267.952 319.181 267.947 319.352 267.937 cv
317.67 266.204 316.829 263.648 316.829 261.042 cv
316.829 255.729 320.873 252.962 323.905 252.395 cv
326.937 251.828 328.567 253.518 329.385 255.268 cv
330.202 257.018 330.025 261.284 328.017 263.722 cv
326.359 265.735 324.32 266.089 323.001 263.667 cv
321.953 261.742 322.081 258.681 323.543 257.08 cv
324.639 255.879 325.764 256.264 326.379 257.122 cv
326.994 257.98 326.94 260.177 326.015 260.914 cv
325.499 261.326 324.65 261.213 324.509 260.261 cv
324.456 259.909 324.679 259.698 325.086 259.66 cv
324.171 258.597 323.667 260.297 323.73 260.721 cv
323.901 261.869 325.49 262.618 326.541 262.026 cv
327.784 261.326 327.896 258.356 327.272 256.981 cv
326.356 254.964 324.059 254.968 322.737 256.417 cv
320.974 258.348 320.82 262.042 322.083 264.364 cv
323.674 267.285 326.765 267.315 328.764 264.887 cv
331.186 261.948 332.073 257.195 330.275 254.004 cv
329.061 251.847 327.408 250.101 323.456 251.064 cv
319.504 252.026 315.561 255.448 315.561 260.761 cv
315.561 260.762 li
cp
.478431 .329412 .180392 rgb
f
326 261.904 mo
323.574 262.237 321.433 261.285 321.433 261.285 cv
321.623 259.24 li
322.123 258.812 323.669 258.717 324.763 259.383 cv
324.763 259.383 324.018 260.391 324.287 260.952 cv
324.557 261.513 326 261.904 326 261.904 cv
cp
f
318.815 253.815 mo
318.445 254.203 318.109 254.646 317.803 255.116 cv
317.962 254.909 318.127 254.711 318.303 254.527 cv
319.488 255.397 321.158 255.887 323.872 256.105 cv
323.872 256.105 322.902 256.345 322.518 256.64 cv
321.825 257.176 321.254 257.678 320.964 258.76 cv
320.674 259.841 320.788 261.656 321.417 262.833 cv
322.046 264.01 323.23 265.194 323.23 265.194 cv
320.573 264.12 317.951 263.59 316.543 263.845 cv
316.543 263.845 316.254 263.528 316.037 262.733 cv
316.279 264.162 316.773 264.711 316.773 264.711 cv
318.408 264.412 322.008 265.029 325.096 266.283 cv
325.096 266.283 323.159 264.897 322.43 263.522 cv
321.7 262.147 321.575 260.03 321.911 258.765 cv
322.249 257.501 322.885 256.883 323.719 256.293 cv
324.26 255.911 325.62 255.722 325.62 255.722 cv
322.467 255.468 320.192 254.831 318.815 253.815 cv
318.815 253.815 li
cp
f
125.478 229.604 mo
135.477 238.428 li
112.93 263.975 li
102.932 255.152 li
125.478 229.604 li
cp
.313726 .176471 .0862745 rgb
f
184.066 172.307 mo
191.776 204.25 li
132.32 247.241 li
120.34 235.121 li
152.11 174.429 li
184.066 172.307 li
cp
.262745 .435294 .65098 rgb
f
163.621 195.529 mo
125.646 241.351 li
117.621 232.722 li
153.061 169.589 li
163.621 195.529 li
cp
.772549 .878431 .996078 rgb
f
190.69 165.659 mo
191.776 204.25 li
164.853 194.955 li
153.225 169.734 li
190.69 165.659 li
cp
.380392 .533333 .713726 rgb
f
153.29 169.721 mo
153.229 169.737 li
153.129 169.93 li
162.316 196.853 li
125.227 236.737 li
128.439 239.571 li
163.468 197.87 li
163.475 197.861 187.718 203.417 191.56 204.41 cv
191.775 204.247 li
191.77 204.198 li
165.294 194.639 li
153.29 169.721 li
cp
1 1 1 rgb
f
117.814 228.472 mo
137.553 245.892 li
137.699 250.854 li
131.348 245.54 li
122.888 242.616 li
118.935 234.585 li
112.872 228.944 li
117.814 228.472 li
cp
.564706 .301961 0 rgb
f
110.642 234.586 mo
115.438 237.784 li
120.511 245.156 li
128.34 249.171 li
132.378 253.768 li
137.934 252.292 li
111.416 228.89 li
110.642 234.586 li
cp
f
116.531 228.571 mo
137.615 247.177 li
137.934 252.292 li
131.16 246.604 li
122.277 243.307 li
117.902 234.903 li
111.416 228.889 li
116.531 228.571 li
cp
.909804 .603922 0 rgb
f
116.445 241.378 mo
105.432 253.856 li
110.335 257.269 116.021 257.66 118.782 254.532 cv
121.543 251.403 120.441 245.818 116.445 241.378 cv
cp
.623529 .309804 .117647 rgb
f
116.531 228.571 mo
137.615 247.177 li
127.967 241.899 li
122.277 243.307 li
122.968 237.487 li
116.531 228.571 li
cp
1 .933333 .384314 rgb
f
118.27 257.928 mo
108.182 249.192 li
108.134 249.245 li
110.362 252.873 114.251 255.898 117.986 258.25 cv
118.27 257.928 li
cp
122.97 252.602 mo
112.87 243.88 li
112.822 243.933 li
115.051 247.56 118.948 250.575 122.685 252.925 cv
122.97 252.602 li
cp
.313726 .176471 .0862745 rgb
f
118.542 257.62 mo
108.453 248.884 li
108.406 248.938 li
110.634 252.565 114.522 255.591 118.257 257.943 cv
118.542 257.62 li
cp
123.242 252.295 mo
113.141 243.572 li
113.094 243.626 li
115.322 247.253 119.22 250.268 122.956 252.617 cv
123.242 252.295 li
cp
.819608 .45098 .223529 rgb
f
113.636 268.317 mo
110.554 271.81 104.675 271.658 100.505 267.978 cv
96.3353 264.299 95.4539 258.484 98.536 254.992 cv
101.618 251.499 107.497 251.651 111.667 255.33 cv
115.837 259.011 116.718 264.824 113.636 268.317 cv
cp
.678431 .34902 .0156863 rgb
f
112.658 266.539 mo
110.16 269.369 105.396 269.246 102.017 266.264 cv
98.639 263.283 97.9246 258.571 100.422 255.741 cv
102.92 252.911 107.683 253.034 111.062 256.016 cv
114.441 258.998 115.155 263.709 112.658 266.539 cv
cp
.909804 .603922 0 rgb
f
108.42 260.32 mo
107.026 261.9 104.68 262.108 103.181 260.784 cv
101.682 259.462 101.597 257.109 102.991 255.529 cv
104.385 253.949 106.73 253.741 108.23 255.064 cv
109.729 256.387 109.814 258.74 108.42 260.32 cv
cp
1 .933333 .384314 rgb
f
309.397 27.5101 mo
330.46 27.5101 li
330.46 27.5101 352.822 96.4187 351.524 98.5491 cv
350.225 100.679 335.085 105.163 319.929 105.181 cv
305.076 105.199 290.208 100.795 288.333 98.5491 cv
286.459 96.3035 309.397 27.5101 309.397 27.5101 cv
309.397 27.5101 li
cp
.835294 .972549 1 rgb
f
294.786 72.1531 mo
290.556 85.8318 287.233 97.6663 287.997 98.5721 cv
289.892 100.818 304.908 105.195 319.922 105.177 cv
335.244 105.159 350.535 100.702 351.847 98.5721 cv
352.378 97.7117 348.988 85.866 344.778 72.1531 cv
294.786 72.1531 li
cp
.298039 .705882 1 rgb
f
310.945 34.5203 mo
328.904 34.5203 li
328.904 34.5203 347.971 94.0125 346.864 95.8309 cv
345.757 97.6492 332.848 101.478 319.925 101.493 cv
307.261 101.511 294.584 97.7483 292.986 95.8309 cv
291.387 93.9139 310.945 34.5203 310.945 34.5203 cv
310.945 34.5203 li
cp
.537255 .807843 1 rgb
f
314.516 34.5203 mo
325.325 34.5203 li
325.325 34.5203 342.898 94.0125 341.991 95.8309 cv
341.084 97.6492 330.508 101.478 319.921 101.493 cv
309.546 101.511 299.159 97.7483 297.85 95.8309 cv
296.54 93.9139 314.516 34.5203 314.516 34.5203 cv
cp
.298039 .705882 1 rgb
f
330.567 62.4226 mo
334.568 62.4226 337.811 64.8011 337.811 67.7352 cv
337.811 70.6692 334.568 73.0477 330.567 73.0477 cv
326.566 73.0477 323.323 70.6692 323.323 67.7352 cv
323.323 64.8011 326.566 62.4226 330.567 62.4226 cv
cp
.937255 .988235 1 rgb
f
335.074 79.1746 mo
337.2 79.1746 338.924 80.4319 338.924 81.9827 cv
338.924 83.5335 337.2 84.7908 335.074 84.7908 cv
332.948 84.7908 331.225 83.5335 331.225 81.9827 cv
331.225 80.4319 332.948 79.1746 335.074 79.1746 cv
cp
f
297.993 13.1487 mo
341.809 13.1487 li
344.876 13.1487 347.361 17.1004 347.361 21.9744 cv
347.361 25.7908 li
347.361 30.6653 344.876 34.6165 341.809 34.6165 cv
297.993 34.6165 li
294.927 34.6165 292.441 30.6653 292.441 25.7908 cv
292.441 21.9744 li
292.441 17.1004 294.927 13.1487 297.993 13.1487 cv
cp
.835294 .972549 1 rgb
f
300.821 14.534 mo
338.982 14.534 li
341.653 14.534 343.818 17.9754 343.818 22.2205 cv
343.818 25.5447 li
343.818 29.7898 341.653 33.2312 338.982 33.2312 cv
300.821 33.2312 li
298.15 33.2312 295.985 29.7898 295.985 25.5447 cv
295.985 22.2205 li
295.985 17.9754 298.15 14.534 300.821 14.534 cv
cp
.537255 .807843 1 rgb
f
302.822 19.0271 mo
336.98 19.0271 li
339.371 19.0271 341.309 21.6458 341.309 24.8758 cv
341.309 27.4051 li
341.309 30.6355 339.371 33.2542 336.98 33.2542 cv
302.822 33.2542 li
300.432 33.2542 298.494 30.6355 298.494 27.4051 cv
298.494 24.8758 li
298.494 21.6458 300.432 19.0271 302.822 19.0271 cv
cp
.298039 .705882 1 rgb
f
338.033 3.72001 mo
337.568 3.88945 337.087 4.06035 336.482 4.21464 cv
335.717 4.40898 334.845 4.59404 333.883 4.75956 cv
332.92 4.92509 331.87 5.07255 330.739 5.2039 cv
329.607 5.33525 328.397 5.44658 327.125 5.53935 cv
325.852 5.63163 324.519 5.69999 323.134 5.74882 cv
321.749 5.79765 320.31 5.82451 318.841 5.82451 cv
317.372 5.82451 315.941 5.79814 314.556 5.74882 cv
313.172 5.69999 311.83 5.63163 310.557 5.53935 cv
309.284 5.44658 308.076 5.33525 306.943 5.2039 cv
305.811 5.07255 304.762 4.92509 303.799 4.75956 cv
302.837 4.59404 301.965 4.40898 301.2 4.21464 cv
300.654 4.07548 300.232 3.92167 299.8 3.77031 cv
299.382 7.17509 300.195 12.4256 301.422 16.5354 cv
304.172 25.743 311.829 38.512 319.477 38.512 cv
327.626 38.512 334.021 25.6185 336.528 16.5354 cv
337.673 12.3894 338.345 7.01933 338.033 3.72001 cv
cp
.34902 .180392 .0352941 rgb
f
301.992 15.2288 mo
302.069 15.222 302.147 15.2288 302.224 15.2288 cv
337.569 15.2288 li
340.05 15.2288 342.044 18.4021 342.044 22.346 cv
342.044 25.4192 li
342.044 29.3631 340.05 32.5364 337.569 32.5364 cv
328.733 32.5364 li
319.897 32.5364 li
311.061 32.5364 li
302.224 32.5364 li
299.743 32.5364 297.75 29.3631 297.75 25.4192 cv
297.75 22.346 li
297.75 18.5257 299.619 15.4187 301.992 15.2288 cv
cp
297.99 13.1521 mo
294.914 13.1521 292.443 17.0828 292.443 21.9725 cv
292.443 25.7933 li
292.443 30.6824 294.914 34.6131 297.99 34.6131 cv
308.943 34.6131 li
319.897 34.6131 li
330.85 34.6131 li
341.804 34.6131 li
344.879 34.6131 347.36 30.6824 347.36 25.7933 cv
347.36 21.9725 li
347.36 17.0828 344.879 13.1521 341.804 13.1521 cv
297.99 13.1521 li
cp
.835294 .972549 1 rgb
f
318.843 .000286869 mo
329.522 .000286869 338.18 1.63798 338.18 3.65898 cv
338.18 5.67949 329.522 7.31767 318.843 7.31767 cv
308.162 7.31767 299.504 5.67949 299.504 3.65898 cv
299.504 1.63798 308.162 .000286869 318.843 .000286869 cv
cp
.596078 .301961 .0431373 rgb
f
307.173 20.6424 mo
310.805 20.6424 313.748 22.5887 313.748 24.9895 cv
313.748 27.3899 310.805 29.3362 307.173 29.3362 cv
303.542 29.3362 300.598 27.3899 300.598 24.9895 cv
300.598 22.5887 303.542 20.6424 307.173 20.6424 cv
cp
.937255 .988235 1 rgb
f
320.643 88.2488 mo
312.598 88.2488 305.023 89.5037 298.387 91.6897 cv
297.889 93.9915 297.644 95.577 297.832 95.8523 cv
299.141 97.7698 309.547 101.532 319.922 101.514 cv
330.509 101.498 341.105 97.6712 342.012 95.8523 cv
342.15 95.576 341.714 93.6644 341.124 91.1351 cv
334.917 89.2903 327.992 88.2488 320.643 88.2488 cv
cp
0 .427451 1 rgb
f
449.496 27.5101 mo
470.559 27.5101 li
470.559 27.5101 492.921 96.4187 491.622 98.5491 cv
490.325 100.679 475.184 105.163 460.028 105.181 cv
445.176 105.199 430.307 100.795 428.432 98.5491 cv
426.558 96.303 449.496 27.5101 449.496 27.5101 cv
cp
.835294 .972549 1 rgb
f
434.885 72.1526 mo
430.655 85.8318 427.331 97.6663 428.096 98.5721 cv
429.991 100.818 445.007 105.195 460.021 105.177 cv
475.343 105.159 490.634 100.702 491.947 98.5721 cv
492.477 97.7117 489.087 85.8655 484.877 72.1526 cv
434.885 72.1526 li
cp
.298039 .705882 1 rgb
f
451.044 34.5203 mo
469.003 34.5203 li
469.003 34.5203 488.07 94.0125 486.962 95.8309 cv
485.856 97.6492 472.947 101.478 460.024 101.493 cv
447.36 101.511 434.683 97.7478 433.084 95.8309 cv
431.486 93.9139 451.044 34.5203 451.044 34.5203 cv
cp
.537255 .807843 1 rgb
f
454.615 34.5203 mo
465.423 34.5203 li
465.423 34.5203 482.996 94.0125 482.089 95.8309 cv
481.183 97.6492 470.607 101.478 460.019 101.493 cv
449.644 101.511 439.259 97.7478 437.949 95.8309 cv
436.639 93.9139 454.615 34.5203 454.615 34.5203 cv
cp
.298039 .705882 1 rgb
f
459.182 51.8943 mo
454.426 51.7923 450.528 52.8343 448.747 54.4476 cv
448.74 54.47 448.699 54.4803 448.692 54.5027 cv
448.412 55.4568 448.146 56.2942 447.859 57.2781 cv
447.122 59.8069 446.558 61.8177 445.806 64.4378 cv
444.863 67.7239 443.91 70.993 443.031 74.1507 cv
442.393 76.4397 441.87 78.4485 441.31 80.5335 cv
441.083 81.3758 440.799 82.2908 440.589 83.0867 cv
440.226 84.4622 439.891 85.8782 439.59 87.0828 cv
439.546 87.2566 439.465 87.4681 439.423 87.638 cv
439.274 88.2386 439.109 88.9231 438.979 89.4695 cv
438.403 91.8899 438.044 93.7728 437.925 94.8533 cv
437.904 95.0579 437.869 95.2645 437.869 95.4085 cv
437.87 95.6023 437.88 95.7869 437.925 95.8523 cv
438.083 96.0848 438.404 96.3528 438.813 96.6297 cv
438.825 96.6385 438.855 96.6204 438.868 96.6297 cv
440.157 97.4886 442.541 98.5208 445.584 99.4046 cv
449.641 100.583 454.827 101.523 460.014 101.513 cv
461.338 101.512 462.651 101.457 463.955 101.347 cv
466.564 101.128 469.087 100.696 471.393 100.182 cv
472.545 99.9246 473.647 99.6458 474.667 99.3494 cv
478.238 98.3113 480.918 97.0809 481.827 96.1853 cv
481.957 96.0579 482.048 95.9661 482.105 95.8523 cv
482.161 95.7391 482.128 95.389 482.049 94.8533 cv
482.044 94.8133 482.056 94.7293 482.049 94.6873 cv
481.971 94.1995 481.821 93.4305 481.66 92.6888 cv
481.624 92.5228 481.534 92.2005 481.494 92.0228 cv
481.118 90.367 480.519 87.9153 479.885 85.4734 cv
479.722 84.8489 479.505 84.0281 479.329 83.3645 cv
478.716 81.0535 477.951 78.2986 477.221 75.6497 cv
476.28 72.2371 475.299 68.5975 474.279 64.993 cv
474.231 64.823 474.16 64.6634 474.113 64.4935 cv
473.549 62.5057 473.116 61.0013 472.559 59.0545 cv
472.201 57.803 471.908 56.7693 471.559 55.5574 cv
469.35 53.5159 464.515 52.0091 459.182 51.8943 cv
459.182 51.8943 li
cp
.752941 .364706 .960784 rgb
f
470.665 62.4226 mo
474.666 62.4226 477.909 64.8011 477.909 67.7352 cv
477.909 70.6692 474.666 73.0477 470.665 73.0477 cv
466.664 73.0477 463.421 70.6692 463.421 67.7352 cv
463.421 64.8011 466.664 62.4226 470.665 62.4226 cv
cp
.937255 .988235 1 rgb
f
475.173 79.1746 mo
477.299 79.1746 479.023 80.4319 479.023 81.9827 cv
479.023 83.5335 477.299 84.7908 475.173 84.7908 cv
473.047 84.7908 471.324 83.5335 471.324 81.9827 cv
471.324 80.4319 473.047 79.1746 475.173 79.1746 cv
cp
f
438.092 13.1487 mo
481.909 13.1487 li
484.975 13.1487 487.46 17.0999 487.46 21.9744 cv
487.46 25.7908 li
487.46 30.6653 484.975 34.6165 481.909 34.6165 cv
438.092 34.6165 li
435.026 34.6165 432.54 30.6653 432.54 25.7908 cv
432.54 21.9744 li
432.54 17.0999 435.026 13.1487 438.092 13.1487 cv
cp
.835294 .972549 1 rgb
f
440.92 14.534 mo
479.081 14.534 li
481.751 14.534 483.916 17.9754 483.916 22.2205 cv
483.916 25.5447 li
483.916 29.7898 481.751 33.2312 479.081 33.2312 cv
440.92 33.2312 li
438.249 33.2312 436.084 29.7898 436.084 25.5447 cv
436.084 22.2205 li
436.084 17.9754 438.249 14.534 440.92 14.534 cv
cp
.537255 .807843 1 rgb
f
442.921 19.0271 mo
477.079 19.0271 li
479.47 19.0271 481.408 21.6458 481.408 24.8758 cv
481.408 27.4051 li
481.408 30.6355 479.47 33.2542 477.079 33.2542 cv
442.921 33.2542 li
440.531 33.2542 438.593 30.6355 438.593 27.4051 cv
438.593 24.8758 li
438.593 21.6458 440.531 19.0271 442.921 19.0271 cv
cp
.298039 .705882 1 rgb
f
478.132 3.71953 mo
477.666 3.88896 477.186 4.06035 476.58 4.21464 cv
475.816 4.40898 474.944 4.59404 473.982 4.75956 cv
473.019 4.92509 471.969 5.07255 470.837 5.2039 cv
469.705 5.33525 468.496 5.44658 467.224 5.53935 cv
465.951 5.63163 464.617 5.69999 463.233 5.74882 cv
461.847 5.79765 460.409 5.82451 458.94 5.82451 cv
457.471 5.82451 456.04 5.79765 454.655 5.74882 cv
453.27 5.69999 451.929 5.63163 450.656 5.53935 cv
449.383 5.44658 448.174 5.33525 447.042 5.2039 cv
445.91 5.07206 444.861 4.92509 443.898 4.75956 cv
442.935 4.59404 442.064 4.40898 441.299 4.21464 cv
440.753 4.07548 440.331 3.92167 439.899 3.76982 cv
439.481 7.17509 440.293 12.4256 441.521 16.5354 cv
444.271 25.743 451.928 38.512 459.576 38.512 cv
467.725 38.512 474.119 25.6185 476.627 16.5354 cv
477.772 12.3894 478.444 7.01933 478.132 3.71953 cv
cp
.34902 .180392 .0352941 rgb
f
442.091 15.2288 mo
442.168 15.222 442.246 15.2288 442.324 15.2288 cv
477.667 15.2288 li
480.149 15.2288 482.143 18.4021 482.143 22.346 cv
482.143 25.4192 li
482.143 29.3631 480.149 32.5364 477.667 32.5364 cv
468.831 32.5364 li
459.995 32.5364 li
451.159 32.5364 li
442.324 32.5364 li
439.843 32.5364 437.848 29.3631 437.848 25.4192 cv
437.848 22.346 li
437.848 18.5257 439.719 15.4187 442.091 15.2288 cv
cp
438.089 13.1521 mo
435.013 13.1521 432.541 17.0828 432.541 21.9725 cv
432.541 25.7933 li
432.541 30.6824 435.013 34.6131 438.089 34.6131 cv
449.042 34.6131 li
459.995 34.6131 li
470.949 34.6131 li
481.903 34.6131 li
484.978 34.6131 487.459 30.6824 487.459 25.7933 cv
487.459 21.9725 li
487.459 17.0828 484.978 13.1521 481.903 13.1521 cv
438.089 13.1521 li
cp
.835294 .972549 1 rgb
f
458.941 -.000201412 mo
469.621 -.000201412 478.28 1.63798 478.28 3.65898 cv
478.28 5.67949 469.621 7.31767 458.941 7.31767 cv
448.261 7.31767 439.603 5.67949 439.603 3.65898 cv
439.603 1.63798 448.261 -.000201412 458.941 -.000201412 cv
cp
.596078 .301961 .0431373 rgb
f
447.272 20.6424 mo
450.904 20.6424 453.847 22.5887 453.847 24.9895 cv
453.847 27.3899 450.904 29.3362 447.272 29.3362 cv
443.641 29.3362 440.697 27.3899 440.697 24.9895 cv
440.697 22.5887 443.641 20.6424 447.272 20.6424 cv
cp
.937255 .988235 1 rgb
f
460.742 88.2488 mo
452.697 88.2488 445.122 89.5037 438.486 91.6897 cv
437.988 93.9915 437.742 95.577 437.931 95.8523 cv
439.24 97.7698 449.646 101.532 460.021 101.514 cv
470.608 101.498 481.204 97.6707 482.111 95.8523 cv
482.248 95.576 481.813 93.6644 481.223 91.1346 cv
475.016 89.2898 468.09 88.2488 460.742 88.2488 cv
cp
.411765 .0431373 .772549 rgb
f
140.099 52.5906 mo
179.796 -.000201412 li
219.493 52.5906 li
179.796 97.0613 li
140.099 52.5906 li
cp
.364706 .8 .054902 rgb
f
140.099 52.5906 mo
219.493 52.5906 li
179.796 105.181 li
140.099 52.5906 li
cp
0 .615686 .223529 rgb
f
163.442 52.5906 mo
196.15 52.5906 li
179.796 105.181 li
163.442 52.5906 li
cp
.364706 .8 .054902 rgb
f
163.442 52.5906 mo
196.15 52.5906 li
179.796 -.000201412 li
163.442 52.5906 li
cp
.784314 .996078 .643137 rgb
f
159.856 52.4314 mo
179.796 -.000201412 li
165.951 50.4095 li
195.918 52.5906 li
165.055 54.4539 li
179.796 105.181 li
159.856 52.4314 li
cp
1 1 1 rgb
f
-.000178509 52.5906 mo
39.6971 -.000201412 li
79.3939 52.5906 li
39.6971 99.7586 li
-.000178509 52.5906 li
cp
1 .352941 0 rgb
f
-.000178509 52.5906 mo
79.3939 52.5906 li
39.6971 105.181 li
-.000178509 52.5906 li
cp
.486275 .00784314 .00392157 rgb
f
23.3431 52.5906 mo
56.0511 52.5906 li
39.6971 105.181 li
23.3431 52.5906 li
cp
1 .352941 0 rgb
f
23.3431 52.5906 mo
56.0511 52.5906 li
39.6971 -.000201412 li
23.3431 52.5906 li
cp
1 .752941 .458824 rgb
f
19.7571 52.4314 mo
39.6971 -.000201412 li
25.8524 50.4095 li
55.8192 52.5906 li
24.9569 54.4539 li
39.6971 105.181 li
19.7571 52.4314 li
cp
1 1 1 rgb
f
28.2742 349.193 mo
58.7044 349.193 li
55.4036 369.242 57.4315 374.713 58.7044 386.186 cv
28.2742 386.186 li
30.4017 373.855 30.9085 361.524 28.2742 349.193 cv
cp
.298039 .705882 1 rgb
f
74.5164 395.137 mo
74.5164 410.625 60.6253 423.179 43.4896 423.179 cv
26.3538 423.179 12.4627 410.625 12.4627 395.137 cv
12.4627 379.648 26.3538 367.093 43.4896 367.093 cv
60.6253 367.093 74.5164 379.648 74.5164 395.137 cv
cp
.835294 .972549 1 rgb
f
12.2796 397.637 mo
13.7694 412.052 27.1278 423.316 43.4647 423.316 cv
59.8011 423.316 73.2176 412.052 74.7073 397.637 cv
12.2796 397.637 li
cp
.298039 .705882 1 rgb
f
32.451 349.193 mo
54.5277 349.193 li
52.1326 369.242 53.6043 374.713 54.5277 386.186 cv
32.451 386.186 li
33.9944 373.855 34.3621 361.524 32.451 349.193 cv
32.451 349.193 li
cp
.537255 .807843 1 rgb
f
70.5555 395.137 mo
70.5555 408.647 58.4373 419.6 43.4891 419.6 cv
28.5413 419.6 16.4232 408.647 16.4232 395.137 cv
16.4232 381.626 28.5413 370.673 43.4891 370.673 cv
58.4373 370.673 70.5555 381.626 70.5555 395.137 cv
cp
f
66.9202 399.672 mo
66.9202 411.925 56.43 421.858 43.4891 421.858 cv
30.5486 421.858 20.0579 411.925 20.0579 399.672 cv
20.0579 387.419 30.5486 377.486 43.4891 377.486 cv
56.43 377.486 66.9202 387.419 66.9202 399.672 cv
cp
.298039 .705882 1 rgb
f
36.4822 349.193 mo
50.4959 349.193 li
48.9759 369.242 49.91 374.713 50.4959 386.186 cv
36.4822 386.186 li
37.4622 373.855 37.6956 361.524 36.4822 349.193 cv
cp
f
20.8704 331.71 mo
66.1077 331.71 li
69.2835 331.71 71.8402 335.774 71.8402 340.822 cv
71.8402 344.762 li
71.8402 349.81 69.2835 353.874 66.1077 353.874 cv
20.8704 353.874 li
17.6951 353.874 15.1385 349.81 15.1385 344.762 cv
15.1385 340.822 li
15.1385 335.774 17.6951 331.71 20.8704 331.71 cv
20.8704 331.71 li
cp
.835294 .972549 1 rgb
f
23.7899 333.14 mo
63.1888 333.14 li
65.9544 333.14 68.181 336.679 68.181 341.076 cv
68.181 344.508 li
68.181 348.904 65.9544 352.444 63.1888 352.444 cv
23.7894 352.444 li
21.0237 352.444 18.7972 348.904 18.7972 344.508 cv
18.7972 341.076 li
18.7972 336.679 21.0237 333.14 23.7894 333.14 cv
23.7899 333.14 li
cp
.537255 .807843 1 rgb
f
25.8563 337.779 mo
61.1224 337.779 li
63.598 337.779 65.5911 340.472 65.5911 343.817 cv
65.5911 346.428 li
65.5911 349.774 63.598 352.467 61.1224 352.467 cv
25.8563 352.467 li
23.3807 352.467 21.3875 349.774 21.3875 346.428 cv
21.3875 343.817 li
21.3875 340.472 23.3807 337.779 25.8563 337.779 cv
25.8563 337.779 li
cp
.298039 .705882 1 rgb
f
62.2088 321.975 mo
61.7288 322.15 61.2322 322.326 60.6072 322.486 cv
59.8182 322.686 58.9178 322.877 57.9241 323.048 cv
56.93 323.219 55.8465 323.371 54.678 323.507 cv
53.5091 323.643 52.2611 323.758 50.9471 323.853 cv
49.6331 323.949 48.2567 324.019 46.8265 324.07 cv
45.3968 324.12 43.911 324.148 42.3944 324.148 cv
40.8782 324.148 39.4012 324.12 37.971 324.07 cv
36.5413 324.019 35.1561 323.949 33.8421 323.853 cv
32.5281 323.758 31.2796 323.643 30.1111 323.507 cv
28.9427 323.371 27.8587 323.219 26.8651 323.048 cv
25.8709 322.877 24.971 322.687 24.1815 322.486 cv
23.618 322.342 23.1824 322.183 22.7357 322.027 cv
22.3045 325.542 23.1434 330.963 24.4105 335.206 cv
27.2498 344.713 35.1556 357.896 43.0511 357.896 cv
51.4647 357.896 58.0667 344.584 60.6556 335.206 cv
61.8372 330.926 62.5316 325.381 62.2093 321.975 cv
62.2088 321.975 li
cp
.34902 .180392 .0352941 rgb
f
24.9993 333.857 mo
25.0784 333.85 25.159 333.857 25.2391 333.857 cv
61.7298 333.857 li
64.2913 333.857 66.3499 337.134 66.3499 341.205 cv
66.3499 344.378 li
66.3499 348.45 64.2913 351.726 61.7298 351.726 cv
52.6072 351.726 li
43.4842 351.726 li
34.3616 351.726 li
25.2391 351.726 li
22.6776 351.726 20.619 348.45 20.619 344.378 cv
20.619 341.205 li
20.619 337.261 22.5491 334.053 24.9988 333.857 cv
24.9993 333.857 li
cp
20.8675 331.713 mo
17.6917 331.713 15.14 335.772 15.14 340.82 cv
15.14 344.764 li
15.14 349.812 17.6917 353.87 20.8675 353.87 cv
32.1761 353.87 li
43.4842 353.87 li
54.7933 353.87 li
66.1019 353.87 li
69.2772 353.87 71.8387 349.812 71.8387 344.764 cv
71.8387 340.82 li
71.8387 335.772 69.2772 331.713 66.1019 331.713 cv
20.8675 331.713 li
cp
.835294 .972549 1 rgb
f
62.3611 321.912 mo
62.3611 323.998 53.4227 325.69 42.3958 325.69 cv
31.3694 325.69 22.4305 323.998 22.4305 321.912 cv
22.4305 319.826 31.3694 318.135 42.3958 318.135 cv
53.4227 318.135 62.3611 319.826 62.3611 321.912 cv
cp
.596078 .301961 .0431373 rgb
f
37.137 343.934 mo
37.137 346.413 34.0975 348.422 30.3485 348.422 cv
26.5994 348.422 23.5599 346.413 23.5599 343.934 cv
23.5599 341.456 26.5994 339.447 30.3485 339.447 cv
34.0975 339.447 37.137 341.456 37.137 343.934 cv
cp
.937255 .988235 1 rgb
f
62.3465 382.601 mo
62.3465 385.913 59.056 388.597 54.9969 388.597 cv
50.9378 388.597 47.6473 385.913 47.6473 382.601 cv
47.6473 379.29 50.9378 376.606 54.9969 376.606 cv
59.056 376.606 62.3465 379.29 62.3465 382.601 cv
cp
f
66.6829 395.601 mo
66.6829 397.536 64.9344 399.105 62.7777 399.105 cv
60.6209 399.105 58.8724 397.536 58.8724 395.601 cv
58.8724 393.666 60.6209 392.096 62.7777 392.096 cv
64.9344 392.096 66.6829 393.666 66.6829 395.601 cv
cp
f
43.4647 411.994 mo
36.9598 411.994 31.1409 413.286 26.9041 415.375 cv
30.6146 418.887 35.6019 421.205 41.1155 421.735 cv
41.8968 421.774 42.6624 421.849 43.4647 421.849 cv
44.2869 421.849 45.0716 421.775 45.8714 421.735 cv
51.3856 421.205 56.3724 418.887 60.0828 415.375 cv
55.8421 413.272 49.9925 411.994 43.4647 411.994 cv
cp
0 .427451 1 rgb
f
200.553 349.193 mo
230.983 349.193 li
227.682 369.242 229.71 374.713 230.983 386.186 cv
200.553 386.186 li
202.68 373.855 203.187 361.524 200.553 349.193 cv
cp
.298039 .705882 1 rgb
f
246.795 395.137 mo
246.795 410.625 232.904 423.179 215.768 423.179 cv
198.633 423.179 184.741 410.625 184.741 395.137 cv
184.741 379.648 198.633 367.093 215.768 367.093 cv
232.904 367.093 246.795 379.648 246.795 395.137 cv
cp
.835294 .972549 1 rgb
f
184.558 397.637 mo
186.048 412.052 199.407 423.316 215.743 423.316 cv
232.08 423.316 245.496 412.052 246.986 397.637 cv
184.558 397.637 li
cp
.298039 .705882 1 rgb
f
204.729 349.193 mo
226.806 349.193 li
224.411 369.242 225.883 374.713 226.806 386.186 cv
204.729 386.186 li
206.273 373.855 206.641 361.524 204.729 349.193 cv
cp
.537255 .807843 1 rgb
f
242.834 395.137 mo
242.834 408.647 230.716 419.6 215.768 419.6 cv
200.82 419.6 188.702 408.647 188.702 395.137 cv
188.702 381.626 200.82 370.673 215.768 370.673 cv
230.716 370.673 242.834 381.626 242.834 395.137 cv
cp
f
208.761 349.193 mo
222.775 349.193 li
221.255 369.242 222.189 374.713 222.775 386.186 cv
208.761 386.186 li
209.741 373.855 209.974 361.524 208.761 349.193 cv
cp
.298039 .705882 1 rgb
f
239.199 399.672 mo
239.199 411.925 228.708 421.858 215.768 421.858 cv
202.827 421.858 192.337 411.925 192.337 399.672 cv
192.337 387.419 202.827 377.486 215.768 377.486 cv
228.708 377.486 239.199 387.419 239.199 399.672 cv
cp
.752941 .364706 .960784 rgb
f
193.149 331.71 mo
238.387 331.71 li
241.562 331.71 244.118 335.774 244.118 340.822 cv
244.118 344.762 li
244.118 349.81 241.562 353.874 238.387 353.874 cv
193.149 353.874 li
189.974 353.874 187.417 349.81 187.417 344.762 cv
187.417 340.822 li
187.417 335.774 189.974 331.71 193.149 331.71 cv
cp
.835294 .972549 1 rgb
f
196.068 333.14 mo
235.468 333.14 li
238.233 333.14 240.46 336.679 240.46 341.076 cv
240.46 344.508 li
240.46 348.904 238.233 352.444 235.468 352.444 cv
196.068 352.444 li
193.303 352.444 191.076 348.904 191.076 344.508 cv
191.076 341.076 li
191.076 336.679 193.303 333.14 196.068 333.14 cv
cp
.537255 .807843 1 rgb
f
198.135 337.779 mo
233.401 337.779 li
235.877 337.779 237.87 340.472 237.87 343.817 cv
237.87 346.428 li
237.87 349.774 235.877 352.467 233.401 352.467 cv
198.135 352.467 li
195.659 352.467 193.666 349.774 193.666 346.428 cv
193.666 343.817 li
193.666 340.472 195.659 337.779 198.135 337.779 cv
cp
.298039 .705882 1 rgb
f
234.488 321.975 mo
234.007 322.15 233.511 322.326 232.886 322.486 cv
232.096 322.686 231.197 322.877 230.202 323.048 cv
229.209 323.219 228.125 323.371 226.956 323.507 cv
225.788 323.643 224.539 323.758 223.225 323.853 cv
221.911 323.949 220.535 324.019 219.105 324.07 cv
217.675 324.12 216.189 324.148 214.673 324.148 cv
213.157 324.148 211.68 324.12 210.25 324.07 cv
208.82 324.019 207.434 323.949 206.12 323.853 cv
204.806 323.758 203.558 323.643 202.389 323.507 cv
201.221 323.371 200.137 323.219 199.143 323.048 cv
198.15 322.877 197.249 322.686 196.46 322.486 cv
195.896 322.342 195.461 322.183 195.014 322.027 cv
194.583 325.542 195.422 330.963 196.689 335.206 cv
199.528 344.713 207.434 357.896 215.329 357.896 cv
223.743 357.896 230.345 344.584 232.934 335.206 cv
234.116 330.926 234.81 325.381 234.488 321.975 cv
234.488 321.975 li
cp
.34902 .180392 .0352941 rgb
f
197.278 333.857 mo
197.357 333.85 197.438 333.857 197.518 333.857 cv
234.009 333.857 li
236.57 333.857 238.629 337.134 238.629 341.205 cv
238.629 344.378 li
238.629 348.45 236.57 351.726 234.009 351.726 cv
224.886 351.726 li
215.763 351.726 li
206.64 351.726 li
197.518 351.726 li
194.956 351.726 192.898 348.45 192.898 344.378 cv
192.898 341.205 li
192.898 337.261 194.828 334.053 197.278 333.857 cv
197.278 333.857 li
cp
193.146 331.713 mo
189.971 331.713 187.419 335.771 187.419 340.82 cv
187.419 344.764 li
187.419 349.812 189.971 353.87 193.146 353.87 cv
204.454 353.87 li
215.763 353.87 li
227.072 353.87 li
238.38 353.87 li
241.556 353.87 244.117 349.812 244.117 344.764 cv
244.117 340.82 li
244.117 335.771 241.556 331.713 238.38 331.713 cv
193.146 331.713 li
cp
.835294 .972549 1 rgb
f
234.64 321.912 mo
234.64 323.998 225.701 325.69 214.675 325.69 cv
203.648 325.69 194.709 323.998 194.709 321.912 cv
194.709 319.826 203.648 318.135 214.675 318.135 cv
225.701 318.135 234.64 319.826 234.64 321.912 cv
cp
.596078 .301961 .0431373 rgb
f
209.416 343.934 mo
209.416 346.413 206.376 348.422 202.627 348.422 cv
198.878 348.422 195.839 346.413 195.839 343.934 cv
195.839 341.456 198.878 339.447 202.627 339.447 cv
206.376 339.447 209.416 341.456 209.416 343.934 cv
cp
.937255 .988235 1 rgb
f
234.625 382.601 mo
234.625 385.913 231.335 388.597 227.276 388.597 cv
223.217 388.597 219.926 385.913 219.926 382.601 cv
219.926 379.29 223.217 376.606 227.276 376.606 cv
231.335 376.606 234.625 379.29 234.625 382.601 cv
cp
f
238.962 395.601 mo
238.962 397.536 237.213 399.105 235.056 399.105 cv
232.9 399.105 231.151 397.536 231.151 395.601 cv
231.151 393.666 232.9 392.096 235.056 392.096 cv
237.213 392.096 238.962 393.666 238.962 395.601 cv
cp
f
215.743 411.994 mo
209.239 411.994 203.42 413.286 199.183 415.375 cv
202.893 418.887 207.88 421.205 213.394 421.735 cv
214.176 421.774 214.941 421.849 215.743 421.849 cv
216.565 421.849 217.35 421.775 218.15 421.735 cv
223.664 421.205 228.651 418.887 232.361 415.375 cv
228.121 413.272 222.271 411.994 215.743 411.994 cv
cp
.411765 .0431373 .772549 rgb
f
335.46 372.738 mo
365.367 344.136 li
410.735 344.136 li
440.642 372.738 li
388.051 415.815 li
335.46 372.738 li
cp
.364706 .8 .054902 rgb
f
365.359 344.138 mo
358.408 372.734 li
417.665 372.734 li
410.714 344.138 li
365.359 344.138 li
cp
0 .615686 .223529 rgb
f
335.46 372.738 mo
440.641 372.738 li
388.051 423.316 li
335.46 372.738 li
cp
f
358.136 372.738 mo
388.051 344.136 li
417.967 372.738 li
388.051 412.065 li
358.136 372.738 li
cp
.784314 .996078 .643137 rgb
f
360.011 372.738 mo
419.842 372.738 li
388.051 423.012 li
360.011 372.738 li
cp
.364706 .8 .054902 rgb
f
336.605 372.707 mo
355.568 369.972 li
387.572 345.147 li
361.524 369.972 li
416.716 372.833 li
362.78 374.904 li
386.844 420.495 li
357.438 374.904 li
336.605 372.707 li
cp
1 1 1 rgb
f
507.74 372.738 mo
537.646 344.136 li
583.013 344.136 li
612.92 372.738 li
560.992 415.692 li
507.74 372.738 li
cp
1 .352941 0 rgb
f
537.637 344.138 mo
530.686 372.734 li
589.944 372.734 li
582.992 344.138 li
537.637 344.138 li
cp
.486275 .00784314 .00392157 rgb
f
507.74 372.738 mo
612.92 372.738 li
560.329 423.316 li
507.74 372.738 li
cp
f
530.414 372.738 mo
560.329 344.136 li
590.245 372.738 li
562.319 401.438 li
530.414 372.738 li
cp
1 .752941 .458824 rgb
f
530.414 372.738 mo
590.245 372.738 li
560.329 423.316 li
530.414 372.738 li
cp
1 .352941 0 rgb
f
508.884 372.707 mo
527.847 369.972 li
559.851 345.147 li
533.803 369.972 li
588.995 372.833 li
535.059 374.904 li
559.357 421.421 li
529.717 374.904 li
508.884 372.707 li
cp
1 1 1 rgb
f
685.053 369.019 mo
685.053 397.315 707.47 420.254 735.124 420.254 cv
762.778 420.254 785.196 397.315 785.196 369.019 cv
785.196 340.723 762.778 317.785 735.124 317.785 cv
707.47 317.785 685.053 340.723 685.053 369.019 cv
685.053 369.019 li
cp
.466667 .196078 .133333 rgb
f
734.475 394.871 mo
734.475 405.607 li
765.579 409.682 li
771.901 404.719 777.036 398.251 780.462 390.796 cv
734.475 394.871 li
cp
734.475 366.198 mo
734.475 376.933 li
783.813 381.01 li
784.714 377.162 785.2 373.156 785.2 369.025 cv
785.2 366.685 785.044 364.379 784.747 362.122 cv
734.475 366.198 li
cp
734.475 332.616 mo
734.475 343.351 li
780.539 347.427 li
777.157 339.99 772.076 333.519 765.814 328.54 cv
734.475 332.616 li
cp
.819608 .329412 .141176 rgb
f
680.018 368.669 mo
680.018 396.965 700.353 419.903 725.438 419.903 cv
750.522 419.903 770.857 396.965 770.857 368.669 cv
770.857 340.373 750.522 317.435 725.438 317.435 cv
700.353 317.435 680.018 340.373 680.018 368.669 cv
cp
.952941 .560784 .329412 rgb
f
723.806 319.05 mo
722.72 319.09 721.626 319.198 720.529 319.331 cv
701.266 321.667 686.381 337.888 682.843 358.234 cv
708.591 369.703 li
728.605 358.986 li
727.364 319.096 li
726.184 319.03 725.004 319.006 723.806 319.05 cv
723.806 319.05 li
cp
.992157 .803922 .658824 rgb
f
689.501 370.22 mo
689.501 391.833 705.395 409.354 725 409.354 cv
744.606 409.354 760.499 391.833 760.499 370.22 cv
760.499 348.606 744.606 331.085 725 331.085 cv
705.395 331.085 689.501 348.606 689.501 370.22 cv
689.501 370.22 li
cp
.466667 .196078 .133333 rgb
f
694.765 370.22 mo
694.765 389.911 708.898 405.874 726.331 405.874 cv
743.766 405.874 757.899 389.911 757.899 370.22 cv
757.899 350.529 743.766 334.566 726.331 334.566 cv
708.898 334.566 694.765 350.529 694.765 370.22 cv
cp
.819608 .329412 .141176 rgb
f
739.273 361.433 mo
742.602 360.351 745.991 361.826 746.255 366.712 cv
746.52 371.598 741.68 375.257 737.136 375.795 cv
733.468 376.228 729.421 373.975 729.572 370.532 cv
729.721 367.089 735.136 362.779 739.273 361.433 cv
739.273 361.433 li
cp
712.799 358.203 mo
716.487 358.003 723.657 364.786 723.89 369.091 cv
724.155 373.976 720.062 375.553 716.374 375.754 cv
712.687 375.954 706.592 372.595 706.327 367.71 cv
706.125 363.987 709.112 358.403 712.799 358.203 cv
712.799 358.203 li
cp
724.478 341.684 mo
710.918 342.419 700.588 355.127 701.398 370.074 cv
701.594 373.687 701.826 377.166 703.469 380.075 cv
705.931 384.435 709.684 387.518 714.316 389.803 cv
713.741 391.762 713.013 393.615 712.222 395.301 cv
713.419 396.809 715.864 399.4 719.268 400.459 cv
721.907 388.032 li
723.382 401.141 li
727.117 401.476 730.695 401.181 733.809 400.249 cv
733.848 387.385 li
737.41 398.773 li
739.499 397.65 741.238 396.145 742.49 394.285 cv
741.972 392.284 741.2 390.196 740.462 387.965 cv
744.542 385.123 747.373 381.678 749.216 377.346 cv
750.502 374.324 750.679 370.911 750.49 367.414 cv
749.68 352.467 738.036 340.949 724.478 341.684 cv
724.478 341.684 li
cp
.466667 .196078 .133333 rgb
f
736.577 360.121 mo
739.907 359.039 743.295 360.514 743.56 365.4 cv
743.825 370.286 738.985 373.945 734.441 374.483 cv
730.773 374.917 726.726 372.663 726.876 369.22 cv
727.027 365.777 732.441 361.467 736.577 360.121 cv
736.577 360.121 li
cp
710.104 356.891 mo
713.792 356.692 720.961 363.474 721.195 367.779 cv
721.459 372.665 717.367 374.242 713.679 374.442 cv
709.992 374.641 703.897 371.284 703.632 366.398 cv
703.43 362.675 706.416 357.091 710.104 356.891 cv
710.104 356.891 li
cp
721.783 340.373 mo
708.224 341.108 697.893 353.815 698.702 368.762 cv
698.899 372.376 699.13 375.854 700.774 378.763 cv
703.236 383.124 706.989 386.207 711.62 388.491 cv
711.046 390.451 710.318 392.303 709.527 393.989 cv
710.724 395.497 713.168 398.089 716.573 399.147 cv
719.212 386.72 li
720.687 399.829 li
724.423 400.165 727.999 399.869 731.115 398.936 cv
731.154 386.073 li
734.715 397.462 li
736.804 396.339 738.543 394.834 739.794 392.972 cv
739.278 390.972 738.504 388.884 737.768 386.653 cv
741.848 383.81 744.678 380.366 746.521 376.034 cv
747.807 373.012 747.985 369.599 747.795 366.102 cv
746.985 351.155 735.341 339.638 721.783 340.373 cv
721.783 340.373 li
cp
.952941 .560784 .329412 rgb
f
721.83 340.111 mo
708.124 340.854 697.275 352.677 698.299 368.404 cv
698.537 372.053 698.909 375.999 700.571 378.94 cv
703.059 383.348 705.865 386.255 710.959 388.152 cv
695.729 378.862 698.627 359.495 708.969 349.089 cv
719.311 338.683 736.982 345.012 736.982 345.012 cv
733.033 341.479 727.316 339.814 721.83 340.111 cv
721.83 340.111 li
cp
.992157 .803922 .658824 rgb
f
627.146 22.3372 mo
630.764 24.8929 632.074 30.3484 632.074 37.5677 cv
630.895 40.2273 626.283 42.9759 623.562 40.2557 cv
621.085 37.7781 616.019 37.6394 613.707 35.3279 cv
605.053 26.6736 620.404 18.9661 627.146 22.3372 cv
627.146 22.3372 li
cp
.054902 .117647 0 rgb
f
616.843 105.211 mo
625.149 108.2 635.473 99.7234 637.001 94.4598 cv
638.53 89.1961 639.928 61.7234 635.658 51.4549 cv
631.387 41.1863 633.045 36.7903 632.074 33.5359 cv
630.659 35.16 628.747 36.3377 626.701 36.6795 cv
623.696 37.1819 621.064 35.5452 617.739 34.8802 cv
599.144 47.6995 624.068 99.2635 616.843 105.211 cv
cp
.0784314 .137255 .0156863 rgb
f
635.215 90.2259 mo
636.427 85.3562 637.821 61.5296 633.889 53.323 cv
629.956 45.116 631.662 42.2718 630.425 39.2801 cv
629.232 40.6277 628.209 40.908 624.215 41.3704 cv
621.491 41.6853 616.069 38.8025 614.458 38.1692 cv
598.593 52.6819 617.811 96.0843 617.811 96.0843 cv
628.993 98.823 634.003 95.096 635.215 90.2259 cv
635.215 90.2259 li
cp
.180392 .239216 .0235294 rgb
f
559.951 88.1883 mo
557.37 88.1883 563.244 92.4334 561.228 91.0398 cv
558.013 82.6751 553.199 70.9407 552.671 62.8558 cv
555.856 65.2605 559.779 63.3777 562.191 65.7898 cv
562.724 73.5437 561.312 81.3836 559.951 88.1883 cv
cp
.054902 .117647 0 rgb
f
561.295 55.9344 mo
558.542 56.8748 552.12 61.3992 551.909 63.1468 cv
551.699 64.8948 558.018 67.5818 561.295 67.5818 cv
563.192 63.7874 561.516 59.927 561.295 55.9344 cv
cp
.180392 .239216 .0235294 rgb
f
561.742 50.1111 mo
560.311 57.0975 560.447 65.9451 556.367 71.1653 cv
552.287 76.3855 552.649 86.0359 556.374 94.0081 cv
559.73 101.186 564.71 109.116 580.557 106.555 cv
596.405 103.994 606.191 109.657 614.603 107.899 cv
623.014 106.14 626.56 94.6639 626.679 87.2796 cv
626.739 83.5901 629.672 67.8455 620.426 63.1018 cv
611.18 58.3587 618.616 49.0081 618.187 44.2874 cv
617.757 39.5667 610.883 37.5408 606.539 36.6722 cv
595.015 34.367 585.42 33.9402 576.526 34.8802 cv
569.49 35.6233 564.376 37.2586 561.742 50.1111 cv
561.742 50.1111 li
cp
.0784314 .137255 .0156863 rgb
f
559.205 71.9378 mo
555.495 76.4847 554.558 83.9217 557.947 90.8655 cv
560.998 97.117 566.793 103.056 581.205 100.825 cv
595.617 98.595 599.063 103.661 610.138 101.579 cv
621.213 99.4964 622.636 93.5853 623.707 86.012 cv
624.78 78.4393 621.103 70.1482 615.432 66.0169 cv
609.762 61.8855 612.26 49.0105 611.869 44.8992 cv
611.48 40.7874 608.784 40.7146 604.834 39.9583 cv
594.354 37.9505 585.628 37.5789 577.538 38.3973 cv
571.14 39.0447 568.071 42.4056 566.223 51.0452 cv
564.374 59.6849 562.915 67.3914 559.205 71.9378 cv
cp
.180392 .239216 .0235294 rgb
f
609.135 63.3875 mo
616.276 68.3475 620.107 79.7542 613.888 87.5857 cv
607.652 95.4397 590.457 95.1761 585.424 95.4891 cv
579.663 95.8479 570.485 95.7957 562.807 88.8533 cv
555.129 81.9109 563.197 69.6409 566.916 64.326 cv
575.845 68.514 600.56 68.6761 609.135 63.3875 cv
cp
.321569 .403922 .133333 rgb
f
600.49 3.2913 mo
593.931 3.2913 588.479 10.0291 587.297 18.9378 cv
589.057 18.91 li
590.44 13.9173 593.833 10.387 597.801 10.387 cv
601.72 10.387 605.089 13.8226 606.504 18.7161 cv
613.656 18.6468 li
612.394 9.88261 606.978 3.29179 600.49 3.29179 cv
600.49 3.2913 li
cp
.0784314 .137255 .0156863 rgb
f
597.722 3.0623 mo
591.224 3.0623 586.481 10.076 586.189 17.4544 cv
587.932 17.429 li
588.863 13.0403 591.126 8.36552 595.058 8.36552 cv
598.941 8.36552 602.719 10.7098 603.681 17.2503 cv
610.766 17.1868 li
609.517 9.12529 604.15 3.06279 597.722 3.06279 cv
597.722 3.0623 li
cp
.180392 .239216 .0235294 rgb
f
595.184 3.0623 mo
588.686 3.0623 584.97 10.076 584.677 17.4544 cv
586.421 17.429 li
587.352 13.0403 589.156 8.53788 592.52 8.36552 cv
597.649 8.10234 600.181 10.7098 601.143 17.2503 cv
608.229 17.1868 li
606.979 9.12529 601.612 3.06279 595.184 3.06279 cv
595.184 3.0623 li
cp
.321569 .403922 .133333 rgb
f
572.942 19.8733 mo
569.229 22.1228 567.76 27.1707 565.322 30.2684 cv
561.972 34.5257 558.159 38.3362 558.159 42.7195 cv
558.571 64.1155 579.242 63.5921 586.381 64.222 cv
593.52 64.8519 602.131 62.8787 609.632 59.6434 cv
615.267 57.2127 620.748 54.5379 621.771 51.2308 cv
622.792 47.9236 620.475 46.6101 619.9 43.181 cv
619.103 38.4353 619.529 32.6438 621.12 28.5779 cv
622.718 24.4969 624.233 23.6243 626.228 23.7259 cv
628.222 23.8269 628.916 24.0135 628.916 24.0135 cv
628.916 24.0135 628.078 22.262 626.965 21.4715 cv
624.717 19.8743 620.089 18.4744 617.396 17.97 cv
611.3 16.8289 604.314 15.533 597.084 16.0125 cv
585.898 16.7547 576.656 17.6238 572.942 19.8733 cv
572.942 19.8733 li
cp
.0784314 .137255 .0156863 rgb
f
573.837 21.5101 mo
570.53 23.5286 569.222 28.0579 567.051 30.8372 cv
564.068 34.6575 560.672 38.0765 560.672 42.0096 cv
561.038 61.2073 579.448 60.7376 585.806 61.3025 cv
592.164 61.868 599.833 60.0975 606.513 57.1946 cv
611.532 55.0135 616.413 52.6136 617.324 49.6463 cv
618.233 46.679 616.17 45.5003 615.657 42.4231 cv
614.948 38.1658 615.326 32.969 616.744 29.3206 cv
618.167 25.6585 620.658 25.6844 620.071 23.535 cv
619.398 21.0711 615.826 20.2552 613.427 19.803 cv
607.998 18.7786 601.777 17.616 595.338 18.0462 cv
585.375 18.7122 577.145 19.4915 573.837 21.5101 cv
573.837 21.5101 li
cp
.180392 .239216 .0235294 rgb
f
632.97 65.3421 mo
631.702 63.9212 629.723 62.8079 627.146 61.7581 cv
627.572 68.8782 627.685 76.9959 628.938 83.2605 cv
629.112 85.7391 632.849 87.2015 634.762 88.636 cv
634.91 80.1517 636.119 71.6414 632.97 65.3421 cv
cp
.0784314 .137255 .0156863 rgb
f
633.866 88.1883 mo
637.097 91.1751 643.677 90.0359 644.617 87.74 cv
645.66 79.7981 646.395 72.4466 645.065 66.6858 cv
639.975 67.0647 635.679 66.0301 632.97 63.9978 cv
630.523 71.4358 632.535 82.5857 633.866 88.1883 cv
633.866 88.1883 li
cp
.180392 .239216 .0235294 rgb
f
627.202 61.9935 mo
627.27 58.5916 li
627.27 58.5916 636.294 59.6707 639.913 58.9471 cv
641.804 62.241 646.756 63.2151 648.281 66.3206 cv
648 66.9417 647.322 67.802 646.633 68.3543 cv
643.218 69.9261 640.443 70.7513 636.43 70.7513 cv
631.876 67.6009 627.202 61.9935 627.202 61.9935 cv
627.202 61.9935 li
cp
.054902 .117647 0 rgb
f
627.594 58.6224 mo
632.104 57.7976 637.18 57.6907 641.481 56.8304 cv
643.512 60.3675 646.812 62.7664 648.201 66.2376 cv
644.786 67.8094 641.461 68.4778 637.45 68.4778 cv
632.895 65.3274 631.535 61.5784 627.594 58.6224 cv
627.594 58.6224 li
cp
.180392 .239216 .0235294 rgb
f
575.161 22.0926 mo
572.209 23.8943 571.042 27.9373 569.105 30.4183 cv
566.441 33.8279 563.41 36.8797 563.41 40.3899 cv
563.738 57.5257 580.169 57.1067 585.845 57.6111 cv
591.52 58.1155 598.365 56.535 604.327 53.9441 cv
608.807 51.9974 613.164 49.8553 613.977 47.2068 cv
614.788 44.5579 612.947 43.5061 612.49 40.7596 cv
611.856 36.9593 612.194 32.3206 613.459 29.0643 cv
614.73 25.7957 616.952 25.8186 616.429 23.9002 cv
615.828 21.7005 612.64 20.9729 610.498 20.5686 cv
605.654 19.6546 600.1 18.617 594.353 19.0008 cv
585.46 19.595 578.114 20.2913 575.161 22.0926 cv
575.161 22.0926 li
cp
.321569 .403922 .133333 rgb
f
576.179 53.512 mo
574.801 56.1853 572.746 62.451 577.732 66.7322 cv
577.429 77.8519 576.794 89.9109 576.794 89.9109 cv
576.794 89.9109 577.212 96.282 583.36 97.2835 cv
589.507 98.285 590.107 90.0926 590.107 90.0926 cv
589.43 67.4192 li
585.757 63.618 586.147 57.5018 587.778 53.8045 cv
576.179 53.512 li
cp
.0784314 .137255 .0156863 rgb
f
572.936 84.3235 mo
572.442 69.9568 li
577.651 69.9568 li
578.253 78.3572 li
590.394 77.889 li
590.506 69.9568 li
596.997 69.9568 li
595.144 85.1258 li
572.936 84.3235 li
cp
.509804 .192157 .145098 rgb
f
572.782 81.8309 mo
572.51 69.8162 li
575.367 69.8162 li
575.969 77.1185 li
588.11 77.5911 li
589.162 69.9729 li
594.713 69.9729 li
593.303 82.6331 li
572.782 81.8309 li
cp
.94902 .67451 .0470588 rgb
f
640.743 57.5945 mo
637.22 58.2991 633.064 58.3836 629.369 59.0589 cv
630.857 60.1746 631.895 61.4329 632.947 62.7166 cv
636.925 66.3289 645.57 63.9851 642.93 60.5716 cv
642.147 59.6473 641.371 58.6878 640.743 57.5945 cv
640.743 57.5945 li
cp
.321569 .403922 .133333 rgb
f
641.358 73.6341 mo
637.997 73.6341 635.274 77.9393 635.274 83.2395 cv
635.274 84.9358 635.556 86.5257 636.045 87.908 cv
638.947 89.3367 643.219 88.3973 643.909 86.7146 cv
644.434 82.7132 644.867 78.8909 644.891 75.4241 cv
643.895 74.3016 642.675 73.6341 641.358 73.6341 cv
641.358 73.6341 li
cp
f
900.251 95.1145 mo
855.279 128.315 806.554 62.3084 840.819 34.4588 cv
841.992 49.1893 848.873 63.9324 859.317 75.1971 cv
869.998 86.719 884.408 94.6028 900.251 95.1145 cv
cp
.466667 .196078 .133333 rgb
f
888.696 104.677 mo
901.258 102.773 914.525 90.2532 916.646 84.6619 cv
918.768 79.0706 922.679 48.2967 909.221 33.0188 cv
898.174 20.4768 882.738 12.9642 867.582 15.9275 cv
858.017 18.1434 843.886 23.8821 839.285 28.1463 cv
858.068 22.3914 870.633 30.4163 879.158 39.0794 cv
887.487 48.8987 896.584 60.5823 899.803 80.1629 cv
900.669 85.4339 894.298 98.0423 888.696 104.677 cv
888.696 104.677 li
cp
.952941 .560784 .329412 rgb
f
918.716 62.0315 mo
910.685 64.5901 901.462 63.472 895.24 64.3621 cv
896.568 68.1839 899.027 75.5413 899.786 80.1644 cv
909.863 80.7649 916.536 77.4295 918.49 74.1292 cv
918.794 70.5589 918.925 66.4017 918.715 62.0315 cv
918.716 62.0315 li
cp
.992157 .819608 .658824 rgb
f
855.899 28.2063 mo
867.371 28.6795 872.895 32.7073 879.153 39.0667 cv
880.415 40.555 881.687 42.1331 882.961 43.7278 cv
887.213 43.6922 891.548 42.3182 896.035 38.9529 cv
899.943 36.0227 903.153 32.3548 906.381 29.972 cv
898.999 22.6443 890.009 17.5037 880.617 15.865 cv
871.877 15.5794 860.271 23.076 855.899 28.2063 cv
855.899 28.2063 li
cp
f
837.44 40.9197 mo
834.214 46.8807 832.383 53.6775 832.383 60.908 cv
832.383 84.3816 851.663 103.413 875.432 103.413 cv
882.84 103.413 889.806 101.566 895.893 98.3099 cv
880.29 97.6175 866.129 89.7889 855.585 78.4158 cv
845.911 67.9812 839.295 54.5486 837.44 40.9197 cv
cp
.819608 .329412 .141176 rgb
f
853.677 31.1087 mo
842.111 31.179 833.441 40.221 833.441 56.2332 cv
833.441 64.3606 835.706 72.1976 839.636 79.0843 cv
846.969 91.9329 860.466 103.837 877.721 101.537 cv
894.617 99.2854 896.927 91.9436 895.968 75.5032 cv
895.425 66.1961 885.556 46.4344 870.673 36.7361 cv
864.758 32.8816 858.934 31.0769 853.677 31.1087 cv
cp
851.63 24.6853 mo
857.847 24.6477 867.951 26.8162 874.969 31.3362 cv
892.524 42.6434 904.121 58.2303 903.581 75.8655 cv
903.177 89.0984 900.089 105.242 880.109 107.904 cv
859.703 110.622 843.703 96.6019 835.032 81.4148 cv
830.384 73.2747 827.7 63.9642 827.7 54.3577 cv
827.7 35.4314 837.953 24.7684 851.63 24.6853 cv
cp
.466667 .196078 .133333 rgb
f
901.028 12.0662 mo
903.384 12.0662 905.655 12.5613 907.791 13.4305 cv
907.328 13.3831 906.844 13.3738 906.37 13.3738 cv
893.723 13.3738 884.73 21.3728 887.101 32.8709 cv
888.8 41.1121 897.361 56.5652 910.008 57.0862 cv
921.356 57.5535 925.992 54.0735 927.346 43.8982 cv
927.346 44.3304 927.425 44.7967 927.403 45.2059 cv
927.422 57.2493 921.132 66.7098 905.518 66.0672 cv
889.89 65.4241 879.309 46.346 877.21 36.1678 cv
874.281 21.9676 885.399 12.0662 901.027 12.0662 cv
901.028 12.0662 li
cp
f
891.09 31.8416 mo
892.698 39.6394 900.798 54.2601 912.764 54.7527 cv
923.5 55.1951 927.223 50.3392 927.223 50.3392 cv
926.314 54.8865 922.833 63.8587 908.06 63.2503 cv
893.273 62.6419 883.263 45.9554 881.277 36.3255 cv
878.505 22.8894 888.87 14.1399 893.417 12.7757 cv
893.417 12.7757 888.847 20.9627 891.09 31.8416 cv
cp
.952941 .560784 .329412 rgb
f
928.438 24.6419 mo
935.413 37.137 931.91 51.8709 920.615 57.5506 cv
909.32 63.2303 894.508 57.7054 887.534 45.2102 cv
880.558 32.7151 884.061 17.9817 895.356 12.3016 cv
906.652 6.62187 921.463 12.1468 928.438 24.6419 cv
cp
.411765 .0431373 .772549 rgb
f
890.588 41.4012 mo
896.968 53.573 910.901 59.2845 921.707 54.1585 cv
932.514 49.0325 936.102 35.0101 929.721 22.8382 cv
923.341 10.6663 909.409 4.95488 898.602 10.0809 cv
887.795 15.2063 884.207 29.2293 890.588 41.4012 cv
cp
.686275 .301961 .827451 rgb
f
921.929 13.5203 mo
925.899 16.5882 929.173 20.8352 931.104 25.9134 cv
935.953 38.6697 930.507 51.7942 918.932 55.2156 cv
909.953 57.8699 899.924 53.907 893.616 46.0423 cv
900.54 51.3875 909.487 53.0061 916.944 49.469 cv
927.75 44.3431 931.335 30.3299 924.955 18.158 cv
924.079 16.4871 923.063 14.9368 921.929 13.5203 cv
cp
.972549 .6 .964706 rgb
f
892.569 39.0428 mo
898.472 44.9583 908.304 44.1575 914.528 37.2537 cv
920.752 30.3499 921.012 19.9583 915.109 14.0428 cv
909.205 8.12675 899.374 8.92802 893.15 15.8313 cv
886.926 22.7351 886.665 33.1272 892.569 39.0428 cv
cp
f
898.514 30.7952 mo
897.873 34.5154 895.721 36.8938 893.704 36.1077 cv
891.689 35.3216 890.574 31.6687 891.214 27.9485 cv
891.855 24.2283 894.008 21.8499 896.024 22.636 cv
898.039 23.4222 899.155 27.075 898.514 30.7952 cv
cp
1 1 1 rgb
f
900.326 18.1849 mo
899.82 19.7044 898.723 20.5437 897.875 20.0594 cv
897.029 19.5755 896.752 17.9515 897.259 16.4319 cv
897.766 14.9124 898.863 14.073 899.71 14.5574 cv
900.557 15.0413 900.833 16.6658 900.326 18.1849 cv
cp
f
907.529 321.346 mo
915.225 312.582 927.163 311.526 931.417 327.787 cv
945.65 322.593 950.284 327.267 948.788 334.099 cv
947.152 341.58 939.84 349.679 930.304 355.129 cv
920.769 360.578 909.635 362.284 905.84 358.309 cv
902.046 354.335 900.738 329.08 907.529 321.346 cv
907.529 321.346 li
cp
.254902 .486275 .0313726 rgb
f
903.717 367.851 mo
913.257 381.336 913.973 406.696 911.306 420.028 cv
917.639 420.771 918.738 419.873 919.844 414.337 cv
917.056 395.088 914.005 371.871 906.8 353.858 cv
903.717 367.851 li
cp
f
905.324 391.43 mo
898.264 399.023 887.629 399.664 884.255 385.117 cv
871.477 389.377 867.477 385.111 868.976 379.081 cv
870.617 372.478 877.319 365.468 885.929 360.865 cv
894.539 356.262 904.477 355.024 907.749 358.648 cv
911.022 362.272 911.553 384.731 905.324 391.43 cv
905.324 391.43 li
cp
f
905.001 389.188 mo
898.531 396.147 888.784 396.734 885.692 383.402 cv
873.98 387.306 870.314 383.395 871.688 377.87 cv
873.193 371.818 879.334 365.392 887.226 361.174 cv
895.117 356.956 902.548 355.989 905.547 359.31 cv
908.546 362.632 910.71 383.049 905.001 389.188 cv
905.001 389.188 li
cp
.407843 .65098 .0392157 rgb
f
900.384 387.032 mo
895.695 392.076 888.629 391.944 886.389 382.282 cv
877.9 385.111 874.685 381.998 875.681 377.994 cv
876.772 373.608 882.565 367.553 893.899 366.352 cv
905.233 365.152 904.523 382.583 900.384 387.032 cv
900.384 387.032 li
cp
.670588 .937255 .054902 rgb
f
888.509 323.357 mo
877.375 319.878 866.632 325.188 871.462 341.288 cv
856.605 344.26 855.081 350.662 859.912 355.719 cv
865.203 361.255 875.662 364.366 886.641 364.056 cv
897.619 363.748 908.015 359.41 909.186 354.042 cv
910.358 348.673 898.332 326.427 888.509 323.357 cv
888.509 323.357 li
cp
.254902 .486275 .0313726 rgb
f
908.42 324.722 mo
915.322 316.864 926.025 315.917 929.839 330.497 cv
942.6 325.841 946.754 330.031 945.414 336.157 cv
943.947 342.864 937.391 350.126 928.841 355.012 cv
920.291 359.898 911.483 360.925 908.08 357.361 cv
904.679 353.797 902.331 331.657 908.42 324.722 cv
908.42 324.722 li
cp
.407843 .65098 .0392157 rgb
f
910.984 383.874 mo
913.682 394.191 914.278 406.79 913.557 414.483 cv
917.282 414.875 917.875 414.143 918.288 409.731 cv
917.063 402.11 915.765 393.696 914.138 385.429 cv
913.184 385.124 912.131 384.614 910.984 383.874 cv
cp
f
921.069 388.752 mo
930.328 393.417 940.523 390.321 938.624 375.51 cv
952.087 375.061 954.354 369.671 950.85 364.538 cv
947.014 358.918 938.292 354.674 928.617 353.351 cv
918.944 352.029 909.196 354.322 907.389 358.858 cv
905.581 363.393 912.898 384.636 921.069 388.752 cv
921.069 388.752 li
cp
.254902 .486275 .0313726 rgb
f
887.509 326.253 mo
877.812 323.223 868.454 327.849 872.661 341.871 cv
859.722 344.459 858.394 350.036 862.603 354.44 cv
867.21 359.262 876.32 361.971 885.882 361.702 cv
895.444 361.433 902.822 359.164 903.841 354.489 cv
904.862 349.813 896.066 328.928 887.509 326.254 cv
887.509 326.253 li
cp
.407843 .65098 .0392157 rgb
f
921.71 386.158 mo
930.284 390.476 939.721 387.61 937.964 373.897 cv
950.428 373.482 951.184 368.492 947.941 363.741 cv
944.389 358.537 937.656 356.285 928.7 355.061 cv
919.742 353.837 911.053 355.121 909.38 359.32 cv
907.707 363.519 914.146 382.346 921.71 386.158 cv
921.71 386.158 li
cp
f
926.162 382.662 mo
932.288 385.746 938.224 383.429 936.967 373.636 cv
945.874 373.34 948.184 370.045 945.867 366.651 cv
943.327 362.935 931.866 359.674 925.221 361.957 cv
918.576 364.24 920.756 379.94 926.162 382.662 cv
cp
.670588 .937255 .054902 rgb
f
912.984 324.144 mo
918.698 318.408 927.471 319.927 929.709 331.376 cv
939.795 328.399 942.799 330.242 942.556 335.157 cv
942.307 340.197 931.634 348.57 919.992 347.836 cv
908.352 347.103 907.942 329.205 912.984 324.144 cv
912.984 324.144 li
cp
f
886.006 329.536 mo
876.248 325.892 872.468 331.827 875.637 342.385 cv
865.888 344.333 864.343 348.804 867.513 352.12 cv
870.986 355.75 877.849 356.973 889.233 352.373 cv
900.617 347.772 892.333 331.899 886.006 329.536 cv
cp
f
903.998 349.877 mo
904.53 349.804 907.299 353.459 909.339 354.203 cv
911.379 354.947 915.416 353.758 915.923 354.434 cv
916.431 355.112 911.535 358.64 910.788 360.682 cv
910.04 362.724 910.686 367.244 909.786 367.603 cv
908.888 367.963 906.927 363.22 904.771 362.632 cv
902.615 362.044 899.01 362.258 898.63 361.802 cv
898.251 361.345 902.031 358.143 902.759 356.161 cv
903.488 354.18 903.466 349.95 903.998 349.877 cv
cp
.254902 .486275 .0313726 rgb
f
428.122 198.518 mo
428.122 198.518 425.987 204.958 426.237 210.924 cv
426.487 216.889 428.926 223.113 428.926 223.113 cv
474.908 273.301 li
474.982 248.031 li
428.122 198.518 li
cp
.423529 .156863 .160784 rgb
f
474.806 252.434 mo
479.389 250.678 li
522.38 241.577 li
531.381 248.104 li
531.381 250.205 li
474.872 273.304 li
474.674 271.795 li
474.806 252.434 li
cp
.305882 .109804 .109804 rgb
f
474.806 250.332 mo
479.389 248.575 li
522.38 239.474 li
531.383 248.102 li
474.69 271.836 li
474.806 250.332 li
cp
.513726 .192157 .203922 rgb
f
474.711 247.405 mo
474.711 247.405 472.042 253.702 472.292 259.46 cv
472.541 265.219 474.982 269.882 474.982 269.882 cv
526.276 247.654 li
527.424 224.499 li
474.711 247.405 li
cp
.611765 .423529 .231373 rgb
f
475.3 244.644 mo
531.398 224.244 li
531.398 226.277 li
473.611 250.654 li
475.3 244.644 li
cp
.305882 .109804 .109804 rgb
f
474.83 246.644 mo
474.83 246.644 472.138 253.45 472.203 259.258 cv
472.269 265.065 474.509 272.296 474.751 273.089 cv
474.766 273.136 474.889 273.291 474.889 273.291 cv
475.936 271.458 li
475.936 271.458 474.255 263.178 474.642 257.241 cv
474.816 254.567 475.443 251.794 476.8 248.739 cv
474.83 246.644 li
cp
f
428.078 198.561 mo
482.415 177.307 li
531.383 224.234 li
474.332 247.611 li
428.078 198.561 li
cp
.513726 .192157 .203922 rgb
f
439.131 200.471 mo
439.131 200.471 461.643 186.628 482.659 190.368 cv
503.675 194.109 524.594 221.71 524.594 221.71 cv
477.397 241.049 li
439.131 200.471 li
cp
.729412 .45098 .25098 rgb
f
470.523 229.304 mo
460.211 232.299 li
468.654 241.202 li
476.701 237.395 li
478.884 231.772 li
478.884 228.887 li
470.523 229.304 li
cp
.305882 .109804 .109804 rgb
f
448.417 204.969 mo
437.394 208.188 li
446.433 217.03 li
454.212 213.25 li
456.536 207.678 li
456.536 204.481 li
448.417 204.969 li
cp
f
431.587 197.188 mo
428.075 198.554 li
474.619 248.174 li
477.921 246.825 li
431.587 197.188 li
cp
f
482.415 177.211 mo
474.012 180.497 li
475.792 183.687 481.118 185.999 487.407 185.999 cv
488.749 185.999 490.046 185.905 491.276 185.708 cv
482.415 177.211 li
cp
.87451 .741176 .372549 rgb
f
521.238 214.499 mo
517.617 216.456 515.288 219.509 515.288 222.944 cv
515.288 225.415 516.489 227.695 518.512 229.506 cv
531.387 224.233 li
521.237 214.499 li
521.238 214.499 li
cp
f
469.8 227.924 mo
458.931 231.384 li
467.373 240.287 li
475.977 236.015 li
478.826 228.881 li
469.8 227.924 li
cp
f
459.126 231.329 mo
458.931 231.378 li
455.313 236.152 452.506 244.7 454.688 251.293 cv
463.086 260.375 li
463.162 252.469 463.599 246.525 467.371 240.289 cv
467.501 240.241 li
459.126 231.329 li
cp
.729412 .45098 .25098 rgb
f
527.216 231.215 mo
517.754 233.648 502.475 238.774 491.715 245.399 cv
482.218 251.245 475.557 259.041 476.975 269.002 cv
526.375 247.649 li
527.216 231.215 li
cp
.94902 .796078 .541176 rgb
f
526.916 237.078 mo
518.451 239.841 508.609 243.767 501.011 248.445 cv
493.918 252.812 488.412 258.272 486.667 264.903 cv
526.379 247.73 li
526.916 237.078 li
cp
.984314 .929412 .74902 rgb
f
478.016 258.964 mo
497.67 250.381 li
516.807 244.412 li
478.016 258.964 li
cp
.478431 .329412 .180392 rgb
f
508.947 250.007 mo
499.844 253.599 li
500.13 259.005 li
509.321 255.016 li
508.947 250.007 li
cp
.94902 .796078 .541176 rgb
f
525.117 245.121 mo
490.994 258.508 li
517.939 248.969 li
525.117 245.121 li
cp
.478431 .329412 .180392 rgb
f
499.372 245.56 mo
499.874 254.007 li
508.97 249.789 li
508.381 242.009 li
499.372 245.56 li
cp
.8 .0823529 .0823529 rgb
f
526.493 233.843 mo
487.676 248.154 li
487.605 248.207 487.534 248.262 487.464 248.316 cv
514.297 239.372 li
526.493 233.843 li
cp
.478431 .329412 .180392 rgb
f
509.24 254.788 mo
500.132 259 li
502.509 260.766 li
512.331 256.652 li
509.24 254.788 li
cp
.305882 .109804 .109804 rgb
f
499.874 254.007 mo
512.297 261.674 li
513.248 256.92 li
519.429 255.018 li
508.97 249.789 li
499.874 254.007 li
cp
.376471 0 0 rgb
f
474.299 192.697 mo
461.328 197.765 li
461.829 198.897 462.098 200.1 462.098 201.342 cv
462.098 204.537 460.319 207.449 457.392 209.656 cv
469.787 222.793 li
470.409 222.751 471.039 222.725 471.678 222.725 cv
478.905 222.725 485.155 225.528 488.195 229.606 cv
504.956 222.744 li
504.318 221.481 503.972 220.129 503.972 218.72 cv
503.972 215.789 505.471 213.091 507.977 210.961 cv
491.849 195.523 li
490.249 195.828 488.566 195.991 486.821 195.991 cv
481.988 195.991 477.593 194.746 474.299 192.697 cv
474.299 192.697 li
cp
.956863 .996078 .780392 rgb
f
447.497 203.523 mo
436.103 207.114 li
444.545 216.017 li
453.675 211.614 li
456.524 204.48 li
447.497 203.523 li
cp
.87451 .741176 .372549 rgb
f
436.298 207.059 mo
436.103 207.108 li
432.485 211.882 430.203 220.298 432.386 226.892 cv
440.783 235.974 li
440.859 228.068 440.772 222.255 444.543 216.02 cv
444.673 215.971 li
436.298 207.059 li
cp
.729412 .45098 .25098 rgb
f
521.413 216.002 mo
518.795 217.416 517.113 219.623 517.113 222.106 cv
517.113 223.893 517.98 225.541 519.444 226.85 cv
528.751 223.039 li
521.413 216.002 li
cp
.956863 .996078 .780392 rgb
f
482.812 178.513 mo
476.579 180.95 li
477.9 183.316 481.85 185.031 486.514 185.031 cv
487.509 185.031 488.471 184.961 489.382 184.815 cv
482.812 178.513 li
cp
f
447.498 204.183 mo
447.498 204.183 441.509 205.499 440.623 207.156 cv
439.309 209.613 441.745 212.657 444.646 213.316 cv
447.546 213.975 452.584 210.933 452.584 210.933 cv
455 204.994 li
447.498 204.183 li
cp
f
469.387 228.586 mo
469.387 228.586 463.698 229.476 463.38 232.192 cv
463.062 234.907 465.79 237.744 469.13 237.422 cv
472.469 237.099 474.748 235.608 474.748 235.608 cv
477.221 229.417 li
469.387 228.586 li
cp
f
741.184 93.3851 mo
749.479 93.7322 761.692 75.012 758.656 65.5647 cv
756.381 68.2615 753.951 69.1624 750.242 69.8558 cv
760.801 61.4432 766.037 46.6224 762.995 36.2586 cv
759.95 38.6858 756.077 41.6897 754.285 40.8997 cv
759.056 34.845 762.552 25.4793 756.887 17.9187 cv
755.094 21.1746 753.869 22.9837 751.088 26.2142 cv
751.938 11.3797 741.26 4.04521 725.062 3.0623 cv
729.892 8.83769 729.268 14.9065 733.162 21.8836 cv
729.909 22.0159 726.076 20.6648 722.503 18.8865 cv
721.503 24.7684 721.617 34.2185 730.418 39.3494 cv
725.624 42.2454 716.918 37.6297 716.918 37.6297 cv
715.234 44.6004 718.907 62.1043 730.117 70.264 cv
728.43 72.0838 724.026 72.9183 719.972 69.4993 cv
721 80.0213 732.889 93.0374 741.184 93.3851 cv
741.184 93.3851 li
cp
.32549 .792157 .960784 rgb
f
727.951 4.75371 mo
732.35 8.05058 731.832 17.3958 736.339 25.3606 cv
732.941 25.5579 726.89 24.6487 724.227 21.3064 cv
722.547 28.056 730.304 39.387 736.508 39.7718 cv
733.925 43.1487 733.202 43.2718 729.357 43.7732 cv
725.188 44.3167 721.31 43.0833 718.409 40.0848 cv
716.318 46.3421 728.777 71.115 740.464 66.615 cv
738.869 68.9705 735.007 71.4173 731.622 72.3719 cv
728.723 73.1893 725.571 74.5906 722.588 72.1233 cv
724.1 77.0686 729.013 88.0569 741.247 87.4681 cv
753.482 86.8797 757.35 75.116 757.695 69.0896 cv
756.399 70.8704 752.026 71.4769 749.094 71.1609 cv
746.045 70.8323 743.146 68.7747 740.815 67.1517 cv
747.499 68.8133 756.266 60.5154 758.414 56.6058 cv
761.688 50.6502 763.616 43.9632 761.88 39.7644 cv
759.364 42.2981 750.805 43.4759 746.662 42.5574 cv
750.166 41.3147 761.244 29.2605 756.531 21.1868 cv
756.116 24.4353 753.068 26.7493 746.879 30.324 cv
753.743 19.159 744.804 7.01884 727.951 4.75371 cv
cp
.831373 .94902 .988235 rgb
f
734.612 10.1551 mo
738.933 15.8226 735.148 19.1414 739.654 26.9871 cv
730.644 27.4778 li
730.95 34.3089 739.674 40.1512 739.674 40.1512 cv
737.018 46.5501 729.62 48.802 724.093 47.2337 cv
724.803 57.6502 734.51 65.345 741.005 64.948 cv
747.499 64.5506 758.517 57.3631 758.171 44.7166 cv
752.87 45.7259 744.834 45.4978 744.074 43.3499 cv
744.074 43.3499 751.818 40.1541 754.433 29.8465 cv
749.127 33.5945 743.975 32.6546 743.975 32.6546 cv
749.231 20.4192 743.499 14.3074 734.612 10.1551 cv
cp
1 1 1 rgb
f
741.814 107.085 mo
740.142 114.212 740.583 86.511 740.272 77.0081 cv
739.74 60.7664 739.872 55.6819 740.661 53.6185 cv
741.45 51.5545 743.641 58.1233 743.719 72.491 cv
743.787 85.2786 743.487 99.9583 741.814 107.085 cv
cp
.32549 .792157 .960784 rgb
f
681.997 232.165 mo
698.155 251.76 692.705 249.388 675.412 250.076 cv
671.896 242.953 677.784 237.42 681.997 232.165 cv
cp
.0745098 .117647 .141176 rgb
f
613.501 219.336 mo
600.457 228.338 595.14 232.361 595.476 234.756 cv
595.851 237.433 606.203 240.322 617.442 241.698 cv
625.926 232.716 615.714 227.546 613.501 219.336 cv
613.501 219.336 li
cp
f
673.707 208.259 mo
682.922 184.35 678.498 188.401 661.905 193.475 cv
660.788 201.386 668.084 204.677 673.707 208.259 cv
cp
f
623.851 203.604 mo
621.575 190.259 621.252 183.804 623.726 183.137 cv
626.216 182.466 635.537 187.319 641.834 195.017 cv
642.145 202.051 631.59 205.594 623.851 203.604 cv
cp
f
633.728 261.291 mo
638.046 272.475 641.73 278.61 644.42 277.773 cv
647.728 276.743 653.606 265.259 657.159 256.786 cv
648.937 256.313 642.766 245.147 633.728 261.291 cv
cp
f
667.371 193.874 mo
685.332 205.918 690.435 230.712 678.767 249.253 cv
667.1 267.794 643.081 273.061 625.119 261.017 cv
607.159 248.973 602.056 224.179 613.724 205.638 cv
625.391 187.096 649.409 181.83 667.371 193.874 cv
cp
f
664.873 197.843 mo
680.711 208.463 685.21 230.325 674.922 246.675 cv
664.634 263.024 643.455 267.668 627.617 257.048 cv
611.78 246.428 607.281 224.565 617.569 208.216 cv
627.857 191.867 649.035 187.222 664.873 197.843 cv
cp
.262745 .309804 .345098 rgb
f
658.669 208.462 mo
671.323 216.947 674.916 234.412 666.698 247.473 cv
658.479 260.534 641.559 264.245 628.906 255.761 cv
616.253 247.276 612.659 229.81 620.878 216.749 cv
629.097 203.688 646.017 199.978 658.669 208.462 cv
cp
.372549 .439216 .486275 rgb
f
616.524 225.145 mo
613.21 222.397 598.224 208.573 599.911 204.506 cv
601.232 201.323 620.885 202.608 626.431 204.145 cv
631.977 205.682 631.6 213.064 628.346 218.742 cv
625.126 224.357 619.837 227.893 616.524 225.145 cv
cp
.160784 .207843 .235294 rgb
f
618.35 222.647 mo
614.179 219.419 608.891 209.606 609.467 207.895 cv
610.226 205.643 618.178 205.056 624.89 207.437 cv
631.601 209.818 622.522 225.875 618.35 222.647 cv
618.35 222.647 li
cp
.6 .643137 .666667 rgb
f
617.818 245.436 mo
616.125 248.824 613.084 269.548 615.997 271.601 cv
619.238 273.885 633.465 260.993 636.701 257.345 cv
639.938 253.696 634.471 247.858 631.921 245.709 cv
627.629 242.09 619.51 242.047 617.818 245.436 cv
cp
.160784 .207843 .235294 rgb
f
622.348 254.182 mo
618.25 262.018 617.305 267.552 618.83 268.361 cv
620.438 269.214 631.353 260.124 633.916 255.863 cv
636.479 251.601 626.446 246.347 622.348 254.182 cv
cp
.6 .643137 .666667 rgb
f
643.311 193.88 mo
645.264 187.086 651.212 172.165 654.053 172.68 cv
657.328 173.274 663.059 192.158 663.035 198.117 cv
663.013 204.075 655.974 205.56 652.101 205.291 cv
647.672 204.985 641.358 200.674 643.311 193.88 cv
cp
.160784 .207843 .235294 rgb
f
648.637 195.759 mo
650.258 189.407 653.304 179.899 655.187 179.552 cv
657.459 179.133 659.483 187.598 659.828 194.338 cv
660.173 201.077 647.015 202.111 648.637 195.759 cv
cp
.6 .643137 .666667 rgb
f
654.336 259.806 mo
658.184 263.195 674.684 270.773 676.681 268.534 cv
678.567 266.42 673.026 250.945 670.87 245.834 cv
668.716 240.723 660.017 242.248 656.335 245.879 cv
653.439 248.735 650.488 256.416 654.336 259.806 cv
654.336 259.806 li
cp
.160784 .207843 .235294 rgb
f
658.034 259.231 mo
663.948 262.612 671.904 267.053 673.685 266.318 cv
674.701 265.899 673.724 257.765 669.68 250.197 cv
665.636 242.628 652.118 255.849 658.034 259.231 cv
cp
.6 .643137 .666667 rgb
f
674.862 209.443 mo
682.031 208.596 695.951 210.292 696.693 213.171 cv
697.417 215.984 685.513 227.759 678.703 229.783 cv
671.895 231.807 669.02 226.916 667.576 222.214 cv
666.293 218.036 667.692 210.29 674.862 209.443 cv
cp
.160784 .207843 .235294 rgb
f
675.866 216.059 mo
683.514 212.13 693.522 213.688 692.778 215.802 cv
692.241 217.328 686.908 222.828 680.482 226.368 cv
674.056 229.908 668.216 219.989 675.866 216.059 cv
cp
.6 .643137 .666667 rgb
f
642.716 217.771 mo
647.786 216.727 652.716 220.124 653.727 225.357 cv
654.739 230.591 651.449 235.679 646.378 236.723 cv
641.309 237.767 636.379 234.371 635.367 229.137 cv
634.357 223.904 637.647 218.815 642.716 217.771 cv
cp
.160784 .207843 .235294 rgb
f
643.449 224.823 mo
646.45 224.205 649.367 226.216 649.965 229.313 cv
650.564 232.41 648.617 235.422 645.616 236.04 cv
642.616 236.658 639.698 234.647 639.099 231.55 cv
638.5 228.453 640.448 225.441 643.449 224.823 cv
cp
.6 .643137 .666667 rgb
f
814.475 190.622 mo
786.447 191.305 763.509 201.489 761.529 213.75 cv
762.131 213.954 767.924 222.23 768.581 222.45 cv
774.303 215.795 793.734 205.069 818.654 204.462 cv
840.135 203.938 853.535 210.231 860.546 216.784 cv
861.534 216.273 863.229 204.73 864.132 204.26 cv
858.508 196.077 839.883 190.003 814.475 190.622 cv
814.475 190.622 li
cp
.298039 .168627 .0901961 rgb
f
814.427 193.13 mo
787.309 193.813 765.117 203.996 763.201 216.258 cv
763.784 216.462 769.388 224.738 770.024 224.958 cv
775.561 218.303 794.359 207.576 818.469 206.97 cv
839.253 206.446 852.218 212.74 859.001 219.293 cv
859.956 218.781 861.9 206.925 862.774 206.454 cv
857.332 198.272 839.009 192.511 814.427 193.13 cv
cp
.180392 .0980392 .0313726 rgb
f
802.825 229.282 mo
786.214 232.172 776.827 225.167 763.209 217.481 cv
761.773 223.173 762.249 234.612 765.954 238.179 cv
777.818 245.653 790.626 252.053 804.421 251.503 cv
804.421 245.028 804.492 236.538 802.825 229.282 cv
802.825 229.282 li
cp
f
803.179 225.038 mo
785.907 227.266 776.146 219.888 761.985 211.659 cv
760.492 217.294 760.987 228.752 764.839 232.466 cv
777.175 240.413 790.494 247.323 804.839 247.323 cv
804.839 240.848 804.913 232.361 803.179 225.038 cv
803.179 225.038 li
cp
.698039 .388235 .203922 rgb
f
802.761 227.128 mo
785.489 229.356 775.728 221.978 761.567 213.749 cv
760.074 219.384 760.569 230.842 764.421 234.556 cv
776.757 242.503 790.076 249.413 804.421 249.413 cv
804.421 242.938 804.495 234.451 802.761 227.128 cv
802.761 227.128 li
cp
.509804 .278431 .145098 rgb
f
786.006 225.888 mo
780.185 229.416 772.723 234.278 772.821 236.046 cv
772.889 237.281 776.542 240.555 780.698 243.928 cv
788.366 247.235 796.373 249.42 804.413 249.42 cv
804.413 242.946 804.488 234.452 802.752 227.129 cv
796.378 227.952 790.988 227.369 786.006 225.888 cv
cp
.298039 .168627 .0901961 rgb
f
864.132 204.022 mo
865.861 212.782 865.764 217.096 864.914 224.088 cv
843.615 252.343 803.788 249.16 803.788 249.16 cv
803.788 249.16 788.912 243.889 783.945 239.403 cv
782.664 238.247 781.641 236.529 781.992 234.753 cv
782.274 233.335 786.55 230.073 789.219 228.15 cv
794.879 224.072 803.788 219.073 803.788 219.073 cv
803.788 219.073 851.023 226.455 864.132 204.022 cv
864.132 204.022 li
cp
.698039 .388235 .203922 rgb
f
864.082 209.247 mo
865.873 218.33 865.773 222.803 864.893 230.054 cv
842.823 259.353 801.555 256.053 801.555 256.053 cv
801.555 256.053 793.943 250.698 788.082 245.92 cv
786.241 244.419 784.572 242.974 783.367 241.771 cv
782.196 240.602 781.439 239.242 781.432 239.116 cv
781.424 238.99 781.019 236.533 782.672 235.331 cv
788.167 231.334 801.555 224.854 801.555 224.854 cv
801.555 224.854 850.499 232.509 864.082 209.247 cv
864.082 209.247 li
cp
.180392 .0980392 .0313726 rgb
f
864.598 206.321 mo
866.398 215.405 866.193 219.877 865.308 227.128 cv
843.127 256.427 801.654 253.127 801.654 253.127 cv
801.654 253.127 781.886 238.933 781.727 236.042 cv
781.568 233.151 801.654 221.928 801.654 221.928 cv
801.654 221.928 850.947 229.583 864.598 206.321 cv
cp
.509804 .278431 .145098 rgb
f
766.549 228.25 mo
766.549 230.096 767.788 231.592 769.317 231.592 cv
770.845 231.592 772.084 230.096 772.084 228.25 cv
772.084 226.404 770.845 224.907 769.317 224.907 cv
767.788 224.907 766.549 226.404 766.549 228.25 cv
cp
.180392 .0980392 .0313726 rgb
f
843.246 205.581 mo
830.971 205.131 812.933 207.917 810.906 210.312 cv
807.957 213.795 806.601 249.94 812.439 256.253 cv
818.277 262.565 850.885 259.962 855.898 254.477 cv
860.91 248.992 858.089 214.569 854.366 208.536 cv
853.201 206.651 848.826 205.786 843.246 205.581 cv
843.246 205.581 li
cp
.196078 .196078 .196078 rgb
f
843.883 214.973 mo
835.787 215.052 823.917 217.29 822.599 218.824 cv
820.682 221.054 820.062 243.348 823.957 247.066 cv
827.854 250.783 849.33 248.234 852.594 244.712 cv
855.857 241.189 853.736 220.076 851.236 216.47 cv
850.454 215.343 847.563 214.937 843.883 214.973 cv
843.883 214.973 li
cp
f
841.573 219.38 mo
835.873 219.433 827.519 221.075 826.593 222.204 cv
825.245 223.846 824.835 240.277 827.582 243.019 cv
830.33 245.762 845.447 243.898 847.74 241.304 cv
850.033 238.71 848.515 223.148 846.75 220.489 cv
846.199 219.658 844.163 219.356 841.573 219.38 cv
841.573 219.38 li
cp
.298039 .168627 .0901961 rgb
f
849.573 218.357 mo
851.767 221.521 853.628 240.051 850.765 243.142 cv
847.902 246.234 829.052 248.468 825.633 245.206 cv
822.214 241.944 822.758 222.378 824.441 220.42 cv
826.123 218.463 847.378 215.192 849.573 218.357 cv
849.573 218.357 li
cp
854.41 210.46 mo
850.805 205.765 818.233 209.804 815.624 212.298 cv
813.015 214.791 811.483 246.905 817.259 252.731 cv
823.035 258.557 850.831 257.83 856.765 249.936 cv
862.7 242.043 858.015 215.155 854.41 210.46 cv
cp
.482353 .482353 .482353 rgb
f
839.822 222.486 mo
835.339 222.527 828.768 223.818 828.039 224.706 cv
826.98 225.998 826.658 238.921 828.818 241.078 cv
830.979 243.235 842.868 241.769 844.672 239.729 cv
846.476 237.689 845.282 225.449 843.894 223.357 cv
843.46 222.703 841.859 222.467 839.822 222.486 cv
839.822 222.486 li
cp
.509804 .278431 .145098 rgb
f
839.14 231.508 mo
839.231 234.048 836.709 236.205 833.507 236.326 cv
830.306 236.447 827.636 234.486 827.545 231.946 cv
827.453 229.406 829.975 227.248 833.177 227.127 cv
836.379 227.006 839.048 228.968 839.14 231.508 cv
cp
.180392 .0980392 .0313726 rgb
f
841.237 208.313 mo
830.585 208.57 817.253 210.742 815.622 212.3 cv
814.071 213.782 812.897 225.727 813.415 236.399 cv
815.286 239.776 820.192 241.116 823.871 240.809 cv
822.516 233.911 823.141 221.934 824.439 220.424 cv
826.121 218.467 847.381 215.191 849.576 218.356 cv
851.11 220.568 852.473 230.269 852.182 236.975 cv
855.676 236.772 859.795 235.277 859.392 231.398 cv
858.695 222.273 856.397 213.036 854.421 210.463 cv
853.069 208.702 847.628 208.159 841.237 208.313 cv
841.237 208.313 li
cp
.776471 .776471 .776471 rgb
f
833.146 229.009 mo
840.99 227.603 848.041 225.213 856.17 224.71 cv
857.68 226.854 858.189 230.873 856.492 232.8 cv
848.124 233.342 845.015 233.819 833.563 233.82 cv
831.922 232.653 832.098 230.145 833.146 229.009 cv
833.146 229.009 li
cp
.196078 .196078 .196078 rgb
f
835.292 229.055 mo
841.705 227.906 847.471 225.952 854.116 225.541 cv
855.351 227.294 855.767 230.58 854.379 232.155 cv
847.538 232.598 844.996 232.989 835.633 232.989 cv
834.292 232.035 834.437 229.985 835.292 229.055 cv
835.292 229.055 li
cp
.482353 .482353 .482353 rgb
f
850.729 228.95 mo
850.735 230.081 847.599 231.316 843.724 231.71 cv
839.85 232.103 836.703 231.505 836.697 230.375 cv
836.691 229.244 839.826 228.009 843.701 227.616 cv
847.576 227.222 850.722 227.82 850.729 228.95 cv
cp
.776471 .776471 .776471 rgb
f
432.135 777.549 mo
432.113 779.977 421.965 781.855 417.803 781.818 cv
413.641 781.781 403.528 779.721 403.55 777.293 cv
403.572 774.863 409.988 772.952 417.882 773.022 cv
425.775 773.094 432.157 775.12 432.135 777.549 cv
cp
.0784314 .113725 .133333 rgb
f
404.405 681.862 mo
432.99 682.118 li
432.635 721.773 li
404.05 721.517 li
404.405 681.862 li
cp
.0862745 .121569 .141176 rgb
f
403.829 746.068 mo
432.414 746.325 li
432.138 777.184 li
403.553 776.929 li
403.829 746.068 li
cp
f
403.79 750.422 mo
432.376 750.679 li
432.158 775.008 li
403.573 774.752 li
403.79 750.422 li
cp
.254902 .294118 .329412 rgb
f
418.269 746.198 mo
432.414 746.325 li
432.174 773.141 li
418.029 773.015 li
418.269 746.198 li
cp
.0862745 .121569 .141176 rgb
f
403.615 770.013 mo
432.2 770.269 li
432.138 777.184 li
403.553 776.929 li
403.615 770.013 li
cp
.0784314 .113725 .133333 rgb
f
391.607 634.433 mo
419.121 634.68 li
446.635 634.927 li
446.635 634.927 447.513 651.859 445.744 660.05 cv
444.014 668.058 436.398 682.785 436.398 682.785 cv
418.691 682.627 li
400.985 682.469 li
400.985 682.469 393.634 667.607 392.048 659.568 cv
390.426 651.347 391.607 634.433 391.607 634.433 cv
391.607 634.433 li
cp
.254902 .294118 .329412 rgb
f
391.607 634.433 mo
419.121 634.68 li
446.635 634.927 li
446.635 634.927 447.513 651.859 445.744 660.05 cv
444.014 668.058 436.398 682.785 436.398 682.785 cv
418.691 682.627 li
400.985 682.469 li
400.985 682.469 393.634 667.607 392.048 659.568 cv
390.426 651.347 391.607 634.433 391.607 634.433 cv
391.607 634.433 li
cp
.0862745 .121569 .141176 rgb
f
391.607 634.433 mo
419.121 634.68 li
418.691 682.627 li
400.985 682.469 li
400.985 682.469 393.634 667.607 392.048 659.568 cv
390.426 651.347 391.607 634.433 391.607 634.433 cv
391.607 634.433 li
cp
.254902 .294118 .329412 rgb
f
391.705 623.536 mo
446.732 624.029 li
446.625 636.015 li
391.597 635.522 li
391.705 623.536 li
cp
.466667 .537255 .552941 rgb
f
419.055 641.995 mo
419.055 641.995 li
422.885 642.029 425.962 645.162 425.928 648.992 cv
425.804 662.861 li
425.769 666.691 422.637 669.768 418.807 669.734 cv
418.807 669.734 li
414.977 669.7 411.9 666.567 411.934 662.737 cv
412.059 648.867 li
412.093 645.038 415.225 641.961 419.055 641.995 cv
cp
.0784314 .113725 .133333 rgb
f
444.461 644.534 mo
444.461 644.534 li
447.027 643.183 449.078 645.192 449.044 649.022 cv
448.961 658.269 li
448.927 662.099 446.82 666.3 444.254 667.65 cv
444.254 667.65 li
441.689 669.002 439.637 666.992 439.671 663.162 cv
439.754 653.915 li
439.788 650.086 441.896 645.886 444.461 644.534 cv
cp
f
393.608 644.078 mo
393.608 644.078 li
396.151 645.304 398.184 649.401 398.15 653.231 cv
398.067 662.478 li
398.033 666.307 395.944 668.42 393.401 667.194 cv
393.401 667.194 li
390.859 665.97 388.826 661.872 388.86 658.042 cv
388.943 648.795 li
388.977 644.965 391.066 642.853 393.608 644.078 cv
cp
f
404.317 691.675 mo
432.902 691.931 li
432.686 716.056 li
404.1 715.801 li
404.317 691.675 li
cp
.0862745 .121569 .141176 rgb
f
404.317 691.675 mo
418.909 691.805 li
418.692 715.93 li
404.1 715.801 li
404.317 691.675 li
cp
.254902 .294118 .329412 rgb
f
402.963 721.363 mo
433.724 721.639 li
433.501 746.519 li
402.74 746.244 li
402.963 721.363 li
cp
.466667 .537255 .552941 rgb
f
402.953 721.36 mo
402.73 746.248 li
418.279 746.388 li
418.502 721.5 li
402.953 721.36 li
cp
.760784 .788235 .792157 rgb
f
418.321 723.998 mo
422.099 724.031 425.135 727.122 425.101 730.9 cv
425.067 734.679 421.977 737.714 418.199 737.68 cv
414.42 737.646 411.385 734.555 411.418 730.777 cv
411.452 726.999 414.543 723.964 418.321 723.998 cv
cp
.0784314 .113725 .133333 rgb
f
402.143 688.879 mo
435.126 689.175 li
435.077 694.527 li
402.095 694.231 li
402.143 688.879 li
cp
.466667 .537255 .552941 rgb
f
401.43 768.477 mo
434.412 768.772 li
434.365 774.126 li
401.382 773.83 li
401.43 768.477 li
cp
f
419.041 643.587 mo
419.041 643.587 li
421.927 643.613 424.241 646.39 424.21 649.792 cv
424.1 662.106 li
424.07 665.507 421.706 668.243 418.821 668.217 cv
418.821 668.217 li
415.935 668.191 413.621 665.414 413.652 662.013 cv
413.762 649.698 li
413.792 646.297 416.156 643.561 419.041 643.587 cv
cp
.254902 .294118 .329412 rgb
f
444.456 645.304 mo
444.456 645.304 li
446.656 644.145 448.415 645.868 448.386 649.152 cv
448.315 657.079 li
448.285 660.362 446.478 663.964 444.279 665.122 cv
444.279 665.122 li
442.079 666.28 440.32 664.557 440.35 661.273 cv
440.421 653.346 li
440.45 650.063 442.257 646.462 444.456 645.304 cv
cp
f
393.377 645.396 mo
393.377 645.396 li
395.435 646.388 397.082 649.706 397.054 652.807 cv
396.987 660.295 li
396.959 663.396 395.268 665.106 393.209 664.114 cv
393.209 664.114 li
391.15 663.122 389.504 659.804 389.532 656.702 cv
389.599 649.216 li
389.627 646.114 391.318 644.404 393.377 645.396 cv
cp
f
391.705 623.536 mo
419.22 623.782 li
419.113 635.769 li
391.597 635.522 li
391.705 623.536 li
cp
.768627 .796078 .807843 rgb
f
402.143 688.879 mo
418.636 689.026 li
418.588 694.38 li
402.095 694.231 li
402.143 688.879 li
cp
.760784 .788235 .792157 rgb
f
401.43 768.477 mo
417.923 768.625 li
417.875 773.978 li
401.382 773.83 li
401.43 768.477 li
cp
f
258.049 704.925 mo
259.03 704.633 253.74 702.998 253.74 702.998 cv
220.899 689.389 li
165.574 706.23 li
167.961 708.301 li
205.987 725.017 li
205.987 725.017 210.52 727.236 212.435 726.905 cv
214.349 726.573 222.235 725.116 226.536 722.732 cv
237.065 716.896 240.147 711.248 246.992 708.209 cv
253.838 705.171 257.068 705.216 258.049 704.925 cv
258.049 704.925 li
cp
.709804 .788235 .811765 rgb
f
225.422 691.199 mo
167.961 708.301 li
189.719 717.866 li
206.26 709.082 213.652 708.595 227.852 703.472 cv
233.418 701.465 237.159 699.454 239.655 697.162 cv
225.422 691.199 li
cp
.588235 .705882 .745098 rgb
f
225.422 691.2 mo
167.962 708.301 li
174.562 711.203 li
174.597 711.197 174.633 711.19 174.668 711.183 cv
174.689 711.258 li
174.775 711.295 li
225.421 693.308 li
226.059 693.145 226.681 692.932 227.288 692.674 cv
227.526 692.593 li
227.513 692.569 li
227.698 692.489 227.873 692.392 228.053 692.304 cv
225.422 691.2 li
cp
.462745 .615686 .670588 rgb
f
219.158 654.864 mo
227.827 654.864 235.551 663.084 236.408 673.224 cv
237.052 680.943 233.499 687.831 227.516 690.462 cv
227.526 690.484 li
227.29 690.563 li
226.683 690.822 226.06 691.035 225.422 691.199 cv
174.705 709.212 li
164.801 670.758 li
164.801 670.758 194.955 661.299 210.187 657.108 cv
213.16 656.29 216.437 654.871 219.161 654.866 cv
219.158 654.864 li
cp
.588235 .705882 .745098 rgb
f
218.303 656.569 mo
226.431 656.569 233.673 664.273 234.476 673.777 cv
235.08 681.012 231.749 687.468 226.139 689.933 cv
226.149 689.956 li
225.928 690.03 li
225.359 690.273 224.774 690.471 224.177 690.626 cv
176.626 707.306 li
167.34 671.325 li
167.34 671.325 195.618 662.575 209.893 658.673 cv
212.681 657.911 215.753 656.576 218.306 656.571 cv
218.303 656.569 li
cp
.709804 .788235 .811765 rgb
f
218.107 657.44 mo
225.205 657.44 229.984 662.947 230.952 668.418 cv
231.919 673.889 230.231 677.094 224.21 679.891 cv
218.188 682.689 178.895 696.188 178.895 696.188 cv
171.499 671.227 li
171.499 671.227 197.579 662.926 210.765 659.275 cv
213.198 658.601 215.882 657.444 218.112 657.44 cv
218.107 657.44 li
cp
1 1 1 rgb
f
168.632 670.18 mo
159.576 670.18 152.96 678.957 153.855 689.784 cv
154.751 700.61 162.818 709.388 171.874 709.388 cv
180.93 709.388 187.546 700.61 186.651 689.784 cv
185.756 678.957 177.688 670.18 168.632 670.18 cv
cp
.709804 .788235 .811765 rgb
f
168.24 674.218 mo
160.361 674.218 154.604 681.659 155.383 690.839 cv
156.162 700.017 163.181 707.459 171.061 707.459 cv
178.941 707.459 184.697 700.017 183.918 690.839 cv
183.139 681.659 176.12 674.218 168.24 674.218 cv
cp
.462745 .615686 .670588 rgb
f
168.002 676.723 mo
161.319 676.723 156.437 683.043 157.098 690.839 cv
157.759 698.634 163.712 704.954 170.394 704.954 cv
177.077 704.954 181.959 698.634 181.299 690.839 cv
180.638 683.043 174.685 676.723 168.002 676.723 cv
cp
.709804 .788235 .811765 rgb
f
167.714 679.341 mo
162.279 679.341 158.309 684.488 158.846 690.839 cv
159.384 697.188 164.225 702.336 169.659 702.336 cv
175.094 702.336 179.063 697.188 178.526 690.839 cv
177.989 684.488 173.148 679.341 167.714 679.341 cv
cp
.462745 .615686 .670588 rgb
f
167.428 681.996 mo
163.26 681.996 160.216 685.955 160.628 690.839 cv
161.04 695.722 164.752 699.681 168.92 699.681 cv
173.088 699.681 176.133 695.722 175.721 690.839 cv
175.309 685.955 171.596 681.996 167.428 681.996 cv
cp
.709804 .788235 .811765 rgb
f
167.416 684.208 mo
164.304 684.208 162.03 687.177 162.338 690.839 cv
162.645 694.5 165.418 697.469 168.531 697.469 cv
171.643 697.469 173.917 694.5 173.61 690.839 cv
173.302 687.177 170.529 684.208 167.416 684.208 cv
cp
.462745 .615686 .670588 rgb
f
167.521 685.777 mo
165.163 685.777 163.44 688.043 163.673 690.839 cv
163.906 693.634 166.007 695.899 168.366 695.899 cv
170.724 695.899 172.447 693.634 172.214 690.839 cv
171.981 688.043 169.88 685.777 167.521 685.777 cv
cp
.709804 .788235 .811765 rgb
f
128.072 672.045 mo
69.2054 684.811 li
5.63068 656.543 li
65.0238 648.336 li
128.072 672.045 li
cp
.960784 .219608 .113725 rgb
f
128.072 672.045 mo
128.072 705.785 li
69.2054 721.14 li
69.2054 684.811 li
128.072 672.045 li
cp
.776471 .133333 .0470588 rgb
f
5.63068 656.543 mo
5.63068 693.93 li
69.2054 721.14 li
69.2054 684.811 li
5.63068 656.543 li
cp
.698039 .137255 .054902 rgb
f
46.5545 674.738 mo
52.9271 677.573 li
52.0989 687.774 51.1072 702.29 50.39 713.088 cv
48.678 712.354 li
46.5545 674.738 li
cp
20.5906 663.194 mo
25.4295 665.346 li
22.2254 690.358 li
20.5906 663.194 li
cp
.490196 .0117647 .0431373 rgb
f
89.6038 680.387 mo
85.1253 702.537 li
82.4378 681.94 li
89.6038 680.387 li
cp
116.553 674.544 mo
111.624 688.529 li
107.937 676.411 li
116.553 674.544 li
cp
.643137 .0313726 .00392157 rgb
f
83.7371 669.307 mo
78.4486 669.307 74.161 670.9 74.161 672.864 cv
74.161 674.829 78.4486 676.421 83.7371 676.421 cv
89.0262 676.421 93.3133 674.829 93.3133 672.864 cv
93.3133 670.9 89.0262 669.307 83.7371 669.307 cv
cp
1 .470588 .243137 rgb
f
77.5062 674.609 mo
77.4813 674.954 77.5921 675.309 77.8353 675.663 cv
79.5189 676.153 81.5965 676.421 83.7366 676.421 cv
88.6683 676.419 92.7899 675.027 93.2596 673.203 cv
91.7464 672.013 87.8265 671.413 84.3143 671.516 cv
80.8021 671.62 77.6527 672.924 77.5062 674.609 cv
cp
.458824 .0431373 .0705882 rgb
f
52.6419 657.553 mo
47.3533 657.553 43.0657 659.144 43.0657 661.109 cv
43.0657 663.073 47.3533 664.665 52.6419 664.665 cv
57.931 664.665 62.2181 663.073 62.2181 661.109 cv
62.2181 659.144 57.931 657.553 52.6419 657.553 cv
cp
1 .470588 .243137 rgb
f
46.411 662.853 mo
46.3861 663.199 46.4969 663.554 46.7401 663.907 cv
48.4236 664.398 50.5013 664.665 52.6409 664.666 cv
57.5731 664.663 61.6946 663.271 62.1644 661.448 cv
60.6512 660.257 56.7313 659.657 53.2191 659.761 cv
49.7069 659.864 46.5574 661.168 46.411 662.853 cv
cp
.458824 .0431373 .0705882 rgb
f
5.63068 656.543 mo
66.6844 685.844 li
69.2054 721.14 li
71.2425 686.648 li
128.072 672.045 li
69.3655 682.626 li
5.63068 656.543 li
cp
1 .470588 .243137 rgb
f
310.425 643.881 mo
311.002 643.725 327.948 646.175 344.933 649.867 cv
353.664 651.764 359.749 661.323 362.301 664.898 cv
364.852 668.474 354.899 673.461 353.108 669.629 cv
351.317 665.798 348.557 661.153 343.5 658.885 cv
332.666 654.024 321.891 655.996 321.891 655.996 cv
310.425 643.881 li
cp
.603922 .356863 .0705882 rgb
f
304.4 643.331 mo
308.469 655.807 308.085 678.708 321.409 680.811 cv
331.946 682.577 332.744 664.925 327.369 660 cv
321.995 655.074 308.667 650.165 304.4 643.331 cv
cp
307.91 640.522 mo
307.91 640.522 325.878 648.642 332.111 654.928 cv
338.343 661.212 343.81 668.909 344.69 676.465 cv
345.57 684.02 343.995 691.295 338.121 695.474 cv
332.246 699.653 322.845 700.599 315.997 698.067 cv
309.149 695.535 303.606 689.235 299.451 682.201 cv
295.297 675.167 294.837 654.821 294.837 654.821 cv
292.893 651.036 293.153 651.428 293.153 651.428 cv
297.93 647.898 li
303.173 644.022 li
307.91 640.522 li
cp
f
267.997 597.639 mo
273.872 593.461 283.387 591.955 290.235 594.487 cv
297.083 597.019 302.513 603.878 306.667 610.912 cv
310.821 617.946 311.282 638.292 311.282 638.292 cv
313.225 642.077 312.966 641.686 312.966 641.686 cv
308.189 645.215 li
302.553 637.989 302.032 628.512 296.61 618.703 cv
293.721 613.475 282.433 609.339 277.558 612.415 cv
275.934 613.44 275.02 615.266 275.369 618.12 cv
277.23 633.357 296.88 637.193 302.945 649.091 cv
298.209 652.591 li
298.209 652.591 280.241 644.471 274.008 638.186 cv
267.775 631.902 262.309 624.204 261.429 616.648 cv
260.548 609.093 262.123 601.818 267.997 597.639 cv
267.997 597.639 li
cp
f
289.14 610.674 mo
288.864 610.79 286.49 607.877 286.775 603.068 cv
286.776 603.042 286.778 603.014 286.78 602.988 cv
286.943 600.647 287.842 598.78 288.749 597.589 cv
289.654 596.401 290.469 595.966 290.637 596.119 cv
290.834 596.299 290.381 597.041 289.852 598.248 cv
289.31 599.481 288.734 601.125 288.602 603.113 cv
288.601 603.136 288.599 603.159 288.598 603.181 cv
288.334 607.152 289.605 610.477 289.14 610.674 cv
289.14 610.674 li
cp
.415686 .247059 .0470588 rgb
f
296.513 617.414 mo
296.297 617.46 295.816 616.762 295.748 615.393 cv
295.68 614.039 296.075 612.131 297.492 610.472 cv
297.515 610.444 297.54 610.417 297.565 610.388 cv
298.995 608.778 300.763 608.015 302.088 607.748 cv
303.422 607.479 304.24 607.69 304.267 607.917 cv
304.3 608.18 303.557 608.448 302.498 608.976 cv
301.434 609.508 300.061 610.306 298.935 611.596 cv
298.915 611.619 298.896 611.641 298.877 611.664 cv
297.778 612.93 297.271 614.374 297.023 615.487 cv
296.777 616.59 296.772 617.36 296.513 617.414 cv
296.513 617.414 li
cp
f
301.866 625.493 mo
301.721 625.307 301.912 624.798 302.58 624.272 cv
303.236 623.755 304.358 623.257 305.738 623.388 cv
305.868 623.401 305.997 623.419 306.125 623.442 cv
306.125 623.442 li
307.313 623.703 308.205 624.302 308.719 624.762 cv
309.249 625.238 309.483 625.65 309.368 625.85 cv
309.245 626.063 308.781 626.034 308.117 625.858 cv
307.46 625.683 306.649 625.355 305.789 625.232 cv
305.789 625.232 li
305.708 625.217 305.626 625.203 305.543 625.193 cv
304.686 625.084 303.821 625.278 303.167 625.429 cv
302.507 625.581 302.024 625.696 301.866 625.493 cv
cp
f
275.376 606.715 mo
275.042 606.983 273.084 605.577 271.637 602.885 cv
270.173 600.159 270.265 597.697 270.81 597.631 cv
271.218 597.581 271.989 599.713 273.25 602.009 cv
274.566 604.401 275.81 606.366 275.376 606.715 cv
cp
f
270.655 612.75 mo
270.678 612.986 270.115 613.323 269.073 613.358 cv
268.015 613.393 266.638 613.096 265.275 612.252 cv
265.166 612.185 265.061 612.116 264.958 612.046 cv
264.958 612.046 li
263.712 611.231 262.88 610.238 262.448 609.342 cv
262.025 608.466 262.057 607.859 262.269 607.77 cv
262.497 607.675 262.873 608.082 263.458 608.614 cv
264.13 609.226 264.817 609.768 265.959 610.521 cv
265.959 610.521 li
266.048 610.577 266.138 610.633 266.23 610.687 cv
267.409 611.396 268.361 611.79 269.239 612.085 cv
270.045 612.355 270.63 612.492 270.655 612.75 cv
cp
f
273.526 627.317 mo
273.595 627.537 273.096 627.994 272.049 628.264 cv
271.004 628.534 269.487 628.573 267.9 627.92 cv
267.849 627.899 267.799 627.877 267.748 627.854 cv
264.451 626.389 263.618 623.737 263.877 623.538 cv
264.277 623.23 265.974 625.101 268.482 626.182 cv
268.522 626.2 268.563 626.218 268.604 626.234 cv
269.832 626.758 271.004 626.919 271.924 626.996 cv
272.825 627.072 273.449 627.071 273.526 627.317 cv
cp
f
287.565 603.601 mo
292.451 606.405 296.012 608.427 299.656 614.375 cv
303.3 620.322 303.755 642.024 303.755 642.024 cv
305.521 645.188 305.3 644.853 305.3 644.853 cv
302.547 646.989 li
297.889 640.711 296.369 633.325 291.536 625.077 cv
288.96 620.682 280.911 616.092 278.037 617.864 cv
277.078 618.455 276.695 619.753 277.28 622.001 cv
280.408 634 294.003 639.394 299.524 649.334 cv
296.795 651.452 li
296.795 651.452 282.811 643.216 277.397 637.328 cv
272.684 632.202 267.593 626.357 266.557 619.471 cv
265.774 614.272 266.341 607.713 270.411 604.176 cv
274.481 600.638 282.68 600.799 287.565 603.601 cv
287.565 603.601 li
cp
.823529 .533333 .168627 rgb
f
266.744 618.74 mo
266.664 618.538 267.63 617.781 269.563 617.305 cv
271.492 616.83 274.279 616.708 277.186 617.861 cv
277.203 617.868 277.22 617.875 277.237 617.882 cv
280.076 619.038 282.074 620.925 283.263 622.468 cv
284.457 624.017 284.831 625.163 284.645 625.286 cv
284.417 625.437 283.653 624.562 282.31 623.341 cv
280.965 622.118 279.043 620.569 276.553 619.576 cv
276.538 619.57 276.524 619.564 276.509 619.558 cv
274.007 618.554 271.576 618.462 269.766 618.58 cv
267.972 618.698 266.846 618.998 266.744 618.74 cv
266.744 618.74 li
cp
.603922 .356863 .0705882 rgb
f
292.957 607.297 mo
293.164 607.201 293.833 607.908 294.394 609.377 cv
294.954 610.844 295.351 613.007 294.86 615.426 cv
294.828 615.581 294.793 615.734 294.756 615.887 cv
294.756 615.887 li
293.547 620.608 290.341 622.513 290.14 622.33 cv
289.781 622.001 292.071 619.326 292.984 615.449 cv
292.984 615.449 li
293.015 615.32 293.045 615.189 293.073 615.057 cv
293.5 613.013 293.346 611.123 293.144 609.708 cv
292.944 608.305 292.714 607.41 292.957 607.297 cv
292.957 607.297 li
cp
f
296.432 633.938 mo
296.287 633.715 296.897 633.098 297.707 632.072 cv
298.629 630.903 299.44 629.68 300.523 627.731 cv
300.523 627.73 300.581 627.627 300.581 627.626 cv
302.504 624.087 303.508 620.946 304.006 621.048 cv
304.52 621.152 304.311 624.638 302.217 628.513 cv
302.197 628.55 302.177 628.588 302.156 628.626 cv
301.079 630.621 299.836 632.072 298.621 633.009 cv
297.454 633.909 296.565 634.141 296.432 633.938 cv
296.432 633.938 li
cp
f
274.739 633.9 mo
274.89 633.419 277.98 634.084 281.642 633.749 cv
283.547 633.575 285.006 633.204 286.236 632.835 cv
287.394 632.486 288.149 632.207 288.295 632.427 cv
288.573 632.846 286.103 635.16 281.814 635.574 cv
277.526 635.988 274.611 634.308 274.739 633.9 cv
cp
f
278.307 601.63 mo
278.323 601.62 278.331 601.617 278.352 601.616 cv
278.367 601.616 278.384 601.617 278.402 601.621 cv
278.438 601.629 278.487 601.645 278.539 601.673 cv
278.539 601.673 li
278.539 601.673 li
278.643 601.724 278.788 601.818 278.952 601.946 cv
278.952 601.946 li
279.277 602.196 279.727 602.604 280.233 603.13 cv
280.233 603.13 li
281.204 604.137 282.469 605.651 283.664 607.52 cv
284.068 608.149 284.468 608.825 284.844 609.541 cv
285.568 610.92 286.101 612.261 286.453 613.565 cv
286.962 615.401 286.978 616.941 286.753 618.078 cv
286.534 619.182 286.139 619.716 285.977 619.668 cv
285.787 619.613 285.841 618.997 285.76 618.013 cv
285.671 616.935 285.445 615.739 284.863 614.058 cv
284.446 612.886 283.911 611.696 283.225 610.392 cv
282.871 609.721 282.504 609.068 282.144 608.449 cv
281.122 606.691 279.983 604.947 279.306 603.85 cv
279.306 603.85 li
278.922 603.227 278.635 602.739 278.45 602.352 cv
278.45 602.352 li
278.358 602.159 278.296 602.006 278.268 601.881 cv
278.268 601.881 li
278.268 601.881 li
278.255 601.82 278.249 601.77 278.254 601.726 cv
278.257 601.706 278.262 601.688 278.269 601.673 cv
278.28 601.651 278.289 601.642 278.307 601.631 cv
278.307 601.63 li
cp
f
281.862 608.654 mo
277.917 611.084 276.003 615.573 275.786 620.26 cv
275.569 624.947 276.725 630.456 280.029 634.864 cv
283.332 639.272 295.076 644.454 295.076 644.454 cv
296.829 646.553 296.663 646.301 296.663 646.301 cv
299.948 644.358 li
297.084 639.213 291.409 636.68 287.159 630.864 cv
283.212 625.465 285.169 620.129 288.21 618.014 cv
289.224 617.309 290.534 617.226 292.136 618.148 cv
300.686 623.066 298.034 635.656 303.555 642.226 cv
306.813 640.3 li
306.813 640.3 306.509 627.632 304.351 622.369 cv
302.194 617.106 299.007 611.943 294.757 609.529 cv
290.506 607.115 285.806 606.224 281.862 608.654 cv
281.862 608.654 li
cp
.992157 .792157 .333333 rgb
f
296.592 668.708 mo
296.388 668.594 296.446 667.894 297.081 666.975 cv
297.717 666.055 298.883 665.036 300.558 664.517 cv
300.688 664.476 300.819 664.44 300.95 664.408 cv
300.95 664.408 li
302.33 664.067 303.914 664.04 304.667 664.029 cv
305.558 664.016 306.156 664.031 306.236 664.256 cv
306.317 664.485 305.841 664.897 304.912 665.255 cv
303.997 665.606 302.68 665.826 301.406 666.174 cv
301.406 666.174 li
301.304 666.201 301.201 666.231 301.097 666.263 cv
299.773 666.672 298.776 667.292 298.015 667.854 cv
297.282 668.395 296.819 668.837 296.592 668.708 cv
296.592 668.708 li
cp
.415686 .247059 .0470588 rgb
f
301.697 685.185 mo
301.319 684.971 302.426 681.738 305.138 678.434 cv
307.863 675.116 310.941 673.55 311.248 674.013 cv
311.527 674.433 309.063 676.507 306.551 679.59 cv
304.031 682.682 302.183 685.464 301.697 685.185 cv
301.697 685.185 li
cp
f
311.946 695.064 mo
311.718 695.112 311.272 694.379 310.991 693.029 cv
310.712 691.694 310.612 689.739 311.282 687.675 cv
311.331 687.523 311.384 687.373 311.44 687.224 cv
311.44 687.224 li
312.182 685.339 313.367 683.923 314.262 683.072 cv
315.178 682.2 315.872 681.824 316.041 681.978 cv
316.228 682.149 315.866 682.832 315.241 683.864 cv
314.648 684.844 313.708 686.306 313.146 687.87 cv
313.146 687.87 li
313.099 687.993 313.055 688.118 313.012 688.245 cv
312.442 689.945 312.34 691.668 312.283 692.92 cv
312.225 694.185 312.205 695.011 311.947 695.064 cv
311.946 695.064 li
cp
f
327.193 698.809 mo
326.787 699.029 324.909 696.844 324.274 693.24 cv
323.638 689.631 324.719 686.944 325.21 687.044 cv
325.705 687.144 325.513 689.78 326.076 692.92 cv
326.638 696.06 327.637 698.569 327.193 698.809 cv
327.193 698.809 li
cp
f
342.791 687.99 mo
342.561 688.108 342.126 687.688 341.464 687.137 cv
340.744 686.536 339.911 685.916 338.693 685.257 cv
338.603 685.208 338.513 685.16 338.424 685.114 cv
338.424 685.114 li
336.185 683.974 334.153 683.521 334.181 683.038 cv
334.208 682.583 336.5 682.155 339.234 683.479 cv
339.234 683.479 li
339.341 683.53 339.449 683.585 339.556 683.641 cv
340.971 684.388 341.935 685.409 342.46 686.324 cv
342.978 687.225 343.004 687.881 342.791 687.99 cv
342.791 687.99 li
cp
f
343.051 675.223 mo
342.847 675.38 342.305 675.036 341.591 674.358 cv
340.88 673.685 340.034 672.69 339.045 671.748 cv
338.988 671.693 338.93 671.639 338.873 671.587 cv
338.193 670.964 337.658 670.528 337.061 670.231 cv
336.012 669.68 335 669.794 334.891 669.488 cv
334.836 669.331 335.637 668.273 337.582 668.778 cv
338.474 669.018 339.335 669.523 340.112 670.245 cv
340.178 670.306 340.244 670.369 340.31 670.432 cv
341.42 671.508 342.195 672.741 342.627 673.583 cv
343.076 674.457 343.246 675.073 343.051 675.223 cv
343.051 675.223 li
cp
f
324.865 653.415 mo
324.637 653.33 324.576 652.741 324.891 651.867 cv
325.212 650.976 325.881 649.931 326.942 648.998 cv
326.987 648.959 327.032 648.92 327.077 648.882 cv
328.109 647.97 329.204 647.459 330.134 647.297 cv
331.04 647.138 331.584 647.339 331.612 647.574 cv
331.642 647.822 331.183 648.076 330.578 648.478 cv
329.835 648.972 329.285 649.404 328.273 650.262 cv
328.235 650.296 328.196 650.331 328.158 650.365 cv
327.183 651.242 326.615 651.847 326.004 652.516 cv
325.475 653.096 325.105 653.505 324.865 653.415 cv
324.865 653.415 li
cp
f
332.762 655.265 mo
328.247 648.798 312.807 642.548 312.807 642.548 cv
310.483 639.764 310.703 640.098 310.703 640.098 cv
306.346 642.675 li
315.531 645.93 341.291 667.567 330.611 676.373 cv
319.709 685.362 308.885 654.215 301.563 645.503 cv
297.242 648.056 li
297.242 648.056 297.675 666.459 300.389 673.85 cv
303.104 681.243 307.363 688.237 313 691.438 cv
318.637 694.639 334.987 699.659 339.596 686.509 cv
344.205 673.358 338.864 664.008 332.762 655.265 cv
332.762 655.265 li
cp
.823529 .533333 .168627 rgb
f
331.777 654.315 mo
331.951 654.789 330.01 655.853 328.225 657.535 cv
327.285 658.42 326.717 659.17 326.226 659.889 cv
325.774 660.551 325.479 661.045 325.223 660.993 cv
324.987 660.945 324.836 660.34 325.062 659.395 cv
325.291 658.438 325.885 657.274 326.964 656.221 cv
329.205 654.033 331.637 653.934 331.777 654.315 cv
331.777 654.315 li
cp
.603922 .356863 .0705882 rgb
f
301.262 675.219 mo
301.118 675.04 301.731 674.151 303.175 673.176 cv
304.638 672.187 306.809 671.233 309.513 670.941 cv
309.832 670.907 310.148 670.883 310.461 670.868 cv
310.461 670.868 li
312.936 670.744 314.999 671.181 316.478 671.787 cv
317.924 672.378 318.618 673.036 318.521 673.232 cv
318.41 673.457 317.534 673.203 316.136 672.966 cv
314.65 672.715 312.86 672.54 310.563 672.684 cv
310.563 672.684 li
310.282 672.703 309.997 672.728 309.71 672.76 cv
307.266 673.027 305.311 673.677 303.79 674.308 cv
302.326 674.917 301.431 675.429 301.262 675.219 cv
301.262 675.219 li
cp
f
320.196 694.185 mo
319.971 694.235 319.466 693.328 319.122 691.683 cv
318.784 690.061 318.616 687.667 319.389 685.152 cv
319.455 684.937 319.527 684.725 319.604 684.517 cv
319.604 684.517 li
320.493 682.214 321.974 680.525 323.097 679.515 cv
324.246 678.482 325.099 678.062 325.251 678.225 cv
325.426 678.412 324.882 679.163 324.03 680.354 cv
323.208 681.504 322.005 683.195 321.313 685.151 cv
321.313 685.151 li
321.247 685.33 321.184 685.511 321.126 685.694 cv
320.451 687.817 320.412 689.999 320.414 691.545 cv
320.417 693.121 320.458 694.128 320.196 694.185 cv
320.196 694.185 li
cp
f
340.227 670.353 mo
340.095 670.579 339.461 670.439 338.519 670.191 cv
337.608 669.951 336.324 669.584 335.034 669.594 cv
334.998 669.594 334.962 669.595 334.927 669.596 cv
333.704 669.59 332.257 669.892 331.387 670.019 cv
330.417 670.16 329.777 670.166 329.691 669.924 cv
329.612 669.699 330.09 669.262 330.989 668.797 cv
331.858 668.346 333.263 667.809 334.906 667.768 cv
334.951 667.768 334.998 667.768 335.044 667.769 cv
336.768 667.798 338.182 668.43 339.059 669.01 cv
339.952 669.599 340.347 670.149 340.227 670.353 cv
340.227 670.353 li
cp
f
318.036 688.522 mo
312.819 685.938 309.512 681.327 305.9 675.358 cv
302.289 669.388 300.413 652.503 300.413 652.503 cv
298.683 649.315 298.905 649.649 298.905 649.649 cv
302.114 647.212 li
306.826 653.454 308.485 665.312 312.396 672.513 cv
315.81 678.797 328.337 684.758 329.721 673.116 cv
331.104 661.474 314.854 652.995 305.637 644.535 cv
308.819 642.117 li
308.819 642.117 322.629 650.077 327.7 655.614 cv
332.772 661.152 336.728 666.749 337.986 672.869 cv
339.244 678.99 338.013 683.677 334.054 686.545 cv
330.094 689.414 323.254 691.105 318.036 688.522 cv
318.036 688.522 li
cp
.992157 .792157 .333333 rgb
f
321.375 637.576 mo
323.836 637.781 326.356 640.201 325.596 643.946 cv
324.837 647.69 318.691 650.304 312.268 652.777 cv
305.845 655.251 294.668 659.096 293.129 656.091 cv
291.589 653.084 301.033 650.762 305.678 648.774 cv
310.323 646.786 313.911 644.812 316.477 642.814 cv
319.042 640.817 318.915 637.37 321.375 637.576 cv
321.375 637.576 li
cp
f
303.262 655.555 mo
302.976 655.347 303.536 654.15 303.679 652.558 cv
303.821 650.968 303.596 649.593 303.929 649.475 cv
304.214 649.375 305.167 650.635 304.965 652.68 cv
304.762 654.736 303.533 655.75 303.262 655.555 cv
303.262 655.555 li
cp
.823529 .533333 .168627 rgb
f
315.398 651.446 mo
315.017 651.345 315.119 649.86 314.561 648.222 cv
314.504 648.053 314.443 647.888 314.379 647.727 cv
314.379 647.727 li
313.833 646.319 313.097 645.22 313.495 644.955 cv
313.689 644.827 314.857 645.511 315.666 647.155 cv
315.666 647.155 li
315.759 647.346 315.843 647.549 315.915 647.761 cv
316.675 649.985 315.734 651.535 315.398 651.446 cv
cp
f
320.151 639.597 mo
320.147 639.433 320.565 639.221 321.309 639.305 cv
322.063 639.391 322.998 639.783 323.81 640.588 cv
323.838 640.614 323.865 640.641 323.891 640.669 cv
324.674 641.433 325.106 642.293 325.255 643.01 cv
325.4 643.712 325.255 644.137 325.093 644.156 cv
324.917 644.177 324.74 643.811 324.43 643.33 cv
324.082 642.792 323.668 642.262 322.992 641.573 cv
322.969 641.552 322.946 641.53 322.923 641.509 cv
322.22 640.853 321.629 640.454 321.067 640.165 cv
320.554 639.901 320.154 639.777 320.15 639.597 cv
320.151 639.597 li
cp
f
317.335 632.68 mo
319.468 632.768 322.73 634.196 321.612 639.062 cv
320.493 643.928 307.693 650.038 302.074 652.357 cv
296.454 654.678 290.738 656.429 290.945 652.429 cv
291.153 648.428 299.576 647.569 303.753 645.266 cv
307.93 642.965 312.046 639.837 314.188 637.555 cv
316.33 635.273 315.201 632.592 317.335 632.68 cv
317.335 632.68 li
cp
f
303.708 645.007 mo
304.059 644.763 305.326 645.75 306.831 646.554 cv
308.42 647.403 309.936 648.049 309.832 648.561 cv
309.743 648.999 307.962 649.261 305.96 648.149 cv
303.929 647.022 303.288 645.298 303.708 645.007 cv
303.708 645.007 li
cp
.603922 .356863 .0705882 rgb
f
313.938 638.733 mo
314.069 638.68 314.642 639.009 315.282 639.361 cv
315.767 639.608 316.202 639.793 316.868 640.063 cv
316.871 640.064 316.974 640.105 316.977 640.105 cv
318.64 640.761 320.125 641.256 320.124 641.564 cv
320.124 642.024 318.412 642.303 316.422 641.489 cv
316.382 641.473 316.343 641.457 316.304 641.44 cv
315.6 641.149 315.012 640.775 314.562 640.348 cv
313.719 639.588 313.711 638.825 313.938 638.733 cv
313.938 638.733 li
cp
f
311.233 626.199 mo
312.436 624.889 317.055 628.92 317.42 631.71 cv
317.786 634.499 316.711 636.066 314.091 639.214 cv
311.471 642.361 304.884 645.126 300.795 647.274 cv
296.707 649.423 294.06 650.985 291.915 651.846 cv
289.771 652.706 287.092 650.996 287.821 648.717 cv
288.55 646.437 292.284 646.323 297.429 644.042 cv
302.575 641.76 307.582 638.403 309.766 634.74 cv
311.95 631.077 310.03 627.509 311.233 626.199 cv
311.233 626.199 li
cp
.992157 .792157 .333333 rgb
f
293.291 637.282 mo
293.518 637.653 291.964 638.962 289.456 639.393 cv
286.974 639.82 285.064 639.259 285.072 638.921 cv
285.083 638.48 286.996 638.328 289.217 637.968 cv
291.425 637.608 293.084 636.942 293.291 637.282 cv
293.291 637.282 li
cp
.823529 .533333 .168627 rgb
f
276.126 623.798 mo
276.54 623.51 278.134 625.214 280.68 626.393 cv
283.226 627.573 285.648 627.953 285.636 628.458 cv
285.625 628.886 283.02 629.525 279.904 628.049 cv
276.779 626.569 275.72 624.081 276.126 623.798 cv
276.126 623.798 li
cp
f
282.75 608.312 mo
282.968 608.426 282.822 609.059 282.884 609.967 cv
282.959 611.075 283.244 612.011 283.761 613.719 cv
283.761 613.719 li
283.816 613.883 283.873 614.047 283.932 614.213 cv
285.053 617.376 286.435 619.879 285.976 620.182 cv
285.611 620.425 283.469 618.359 282.211 614.824 cv
282.146 614.642 282.086 614.462 282.03 614.282 cv
282.03 614.282 li
281.438 612.575 281.354 611.027 281.676 609.827 cv
281.984 608.676 282.555 608.212 282.75 608.312 cv
282.75 608.312 li
cp
f
293.424 618.759 mo
293.251 618.396 294.972 616.747 298.046 616.6 cv
298.057 616.6 298.067 616.599 298.078 616.599 cv
299.616 616.523 300.9 616.993 301.717 617.58 cv
302.53 618.163 302.764 618.746 302.61 618.924 cv
302.441 619.117 301.914 618.915 301.159 618.731 cv
300.349 618.533 299.39 618.386 298.153 618.425 cv
298.127 618.426 li
295.701 618.524 293.641 619.214 293.424 618.759 cv
293.424 618.759 li
cp
f
299.545 631.486 mo
299.503 631.285 299.84 630.978 300.567 630.883 cv
301.317 630.784 302.26 630.946 303.23 631.419 cv
303.23 631.419 li
303.444 631.514 303.659 631.623 303.872 631.744 cv
306.124 633.02 306.876 634.9 306.524 635.169 cv
306.166 635.441 304.79 634.247 303.022 633.243 cv
302.841 633.14 302.663 633.043 302.488 632.95 cv
302.488 632.95 li
301.381 632.417 301.245 632.295 300.47 631.988 cv
299.978 631.795 299.589 631.695 299.545 631.486 cv
299.545 631.486 li
cp
f
306.776 658.036 mo
307.21 658.14 307.294 660.331 306.199 662.861 cv
305.088 665.426 303.309 666.783 302.911 666.42 cv
302.591 666.127 303.595 664.323 304.518 662.141 cv
305.476 659.879 306.245 657.909 306.776 658.036 cv
306.776 658.036 li
cp
f
312.06 672.602 mo
312.456 672.481 313.718 674.504 313.061 677.505 cv
312.404 680.507 310.405 681.809 310.095 681.526 cv
309.75 681.211 310.897 679.495 311.409 677.144 cv
311.921 674.793 311.614 672.74 312.06 672.602 cv
312.06 672.602 li
cp
f
322.395 680.017 mo
322.508 679.823 323.167 679.907 324.05 680.495 cv
324.963 681.102 325.91 682.118 326.687 683.535 cv
326.71 683.575 326.733 683.616 326.756 683.658 cv
328.339 686.548 328.26 689.156 327.792 689.232 cv
327.319 689.308 326.609 687.019 325.23 684.492 cv
325.209 684.455 325.189 684.417 325.169 684.38 cv
324.398 683.017 323.874 682.219 323.236 681.388 cv
322.69 680.679 322.273 680.226 322.395 680.017 cv
322.395 680.017 li
cp
f
329.359 676.448 mo
329.134 676.121 330.675 674.267 333.805 674.411 cv
333.91 674.416 334.015 674.424 334.118 674.432 cv
334.118 674.432 li
335.495 674.535 336.601 675.041 337.301 675.624 cv
337.99 676.198 338.169 676.728 338.021 676.88 cv
337.86 677.043 337.401 676.834 336.729 676.623 cv
335.986 676.389 335.161 676.21 333.987 676.112 cv
333.987 676.112 li
333.903 676.107 333.818 676.103 333.733 676.099 cv
332.538 676.054 331.582 676.193 330.779 676.352 cv
330.02 676.502 329.494 676.644 329.359 676.448 cv
329.359 676.448 li
cp
f
328.34 665.76 mo
327.906 665.662 327.757 664.06 328.859 662.35 cv
329.964 660.636 331.495 660.123 331.759 660.492 cv
332.016 660.851 331.113 661.968 330.282 663.265 cv
329.443 664.575 328.785 665.859 328.34 665.76 cv
328.34 665.76 li
cp
f
320.624 656.492 mo
320.221 656.433 319.998 654.976 321.161 653.503 cv
322.311 652.046 323.752 651.866 323.928 652.195 cv
324.125 652.563 323.186 653.42 322.346 654.451 cv
321.547 655.431 320.978 656.544 320.624 656.492 cv
cp
f
293.947 650.952 mo
294.131 650.599 295.315 651.015 296.602 651.704 cv
297.812 652.351 298.848 652.94 298.791 653.222 cv
298.713 653.608 297.414 653.56 296.009 652.826 cv
294.657 652.119 293.809 651.216 293.947 650.952 cv
293.947 650.952 li
cp
.603922 .356863 .0705882 rgb
f
292.971 650.863 mo
292.602 650.758 292.54 649.722 292.527 648.604 cv
292.526 648.53 292.525 648.456 292.525 648.384 cv
292.525 648.384 li
292.503 647.91 292.555 647.309 292.575 647.066 cv
292.601 646.754 292.626 646.48 292.78 646.378 cv
292.935 646.275 293.223 646.371 293.498 646.748 cv
293.78 647.133 293.962 647.697 293.983 648.325 cv
293.983 648.325 li
293.989 648.411 293.992 648.497 293.994 648.585 cv
294.014 650.024 293.355 650.972 292.971 650.863 cv
292.971 650.863 li
cp
.823529 .533333 .168627 rgb
f
310.517 641.735 mo
310.34 641.616 310.493 641.08 310.742 640.259 cv
310.987 639.452 311.343 638.309 311.496 637.14 cv
311.658 635.908 311.548 635.025 311.333 634.263 cv
311.133 633.555 310.877 633.068 311.042 632.92 cv
311.188 632.79 311.74 633.042 312.252 633.827 cv
312.771 634.623 313.138 635.827 312.997 637.307 cv
312.859 638.766 312.279 639.981 311.727 640.754 cv
311.174 641.528 310.68 641.845 310.517 641.735 cv
310.517 641.735 li
cp
f
311.034 629.44 mo
310.951 629.263 311.204 628.892 311.867 628.641 cv
312.533 628.389 313.5 628.322 314.518 628.688 cv
314.55 628.699 314.582 628.71 314.614 628.721 cv
316.836 629.527 317.3 631.282 317.007 631.476 cv
316.829 631.594 316.48 631.377 315.997 631.091 cv
315.482 630.784 314.89 630.449 314.09 630.151 cv
314.065 630.142 314.041 630.134 314.016 630.124 cv
313.216 629.856 312.602 629.743 312.035 629.682 cv
311.519 629.629 311.122 629.629 311.034 629.44 cv
311.034 629.44 li
cp
f
300.828 646.734 mo
300.422 646.644 300.328 645.669 300.432 644.596 cv
300.534 643.553 300.772 642.625 301.157 642.578 cv
301.568 642.527 302.022 643.469 301.906 644.734 cv
301.792 645.977 301.211 646.819 300.828 646.734 cv
cp
f
334.005 655.579 mo
333.773 655.534 333.603 654.969 333.843 654.063 cv
334.086 653.146 334.722 652.054 335.826 651.152 cv
335.849 651.133 335.873 651.112 335.896 651.093 cv
337.012 650.165 338.23 649.749 339.188 649.684 cv
340.136 649.621 340.671 649.894 340.673 650.134 cv
340.675 650.39 340.171 650.594 339.502 650.931 cv
338.772 651.301 337.997 651.756 337.054 652.51 cv
337.034 652.525 337.014 652.54 336.995 652.556 cv
336.077 653.34 335.497 653.972 334.994 654.608 cv
334.541 655.18 334.254 655.628 334.005 655.579 cv
334.005 655.579 li
cp
.415686 .247059 .0470588 rgb
f
342.251 657.793 mo
342.064 657.564 343.685 654.911 347.527 653.828 cv
347.713 653.776 347.898 653.729 348.084 653.689 cv
348.084 653.689 li
349.907 653.304 351.506 653.645 352.555 654.138 cv
353.606 654.631 354.032 655.208 353.922 655.397 cv
353.797 655.615 353.159 655.446 352.194 655.321 cv
351.206 655.193 349.918 655.126 348.48 655.467 cv
348.48 655.467 li
348.326 655.502 348.171 655.541 348.015 655.584 cv
344.93 656.426 342.57 658.183 342.251 657.793 cv
342.251 657.793 li
cp
f
351.516 666.24 mo
351.279 665.743 353.415 664.284 356.675 664.216 cv
359.9 664.147 362.152 665.305 362.069 665.714 cv
361.958 666.263 359.545 666.024 356.703 666.052 cv
353.887 666.078 351.733 666.695 351.516 666.24 cv
351.516 666.24 li
cp
f
899.331 737.618 mo
898.161 737.263 897.187 736.251 897.069 734.816 cv
897.051 734.6 897.061 734.297 897.087 734.138 cv
897.311 732.882 898.198 731.932 899.311 731.592 cv
897.7 731.385 895.806 732.5 895.512 734.155 cv
895.485 734.306 895.478 734.6 895.494 734.807 cv
895.648 736.682 897.725 737.812 899.33 737.618 cv
899.331 737.618 li
cp
1 1 1 rgb
f
901.759 734.606 mo
901.759 736.25 900.427 737.582 898.784 737.582 cv
897.14 737.582 895.808 736.25 895.808 734.606 cv
895.808 732.964 897.14 731.632 898.784 731.632 cv
900.427 731.632 901.759 732.964 901.759 734.606 cv
cp
905.452 734.606 mo
905.452 731.821 903.21 729.579 900.425 729.579 cv
895.957 729.579 li
895.879 729.579 li
889.641 729.579 li
889.641 729.579 889.309 732.849 889.138 734.525 cv
888.968 736.201 888.619 739.634 888.619 739.634 cv
896.025 739.634 li
896.033 739.634 li
900.425 739.634 li
903.21 739.634 905.452 737.391 905.452 734.606 cv
905.452 734.606 li
cp
.807843 .788235 .788235 rgb
f
893.606 729.579 mo
889.641 729.579 li
889.641 729.579 889.309 732.848 889.138 734.524 cv
888.968 736.2 888.619 739.634 888.619 739.634 cv
893.606 739.634 li
893.606 729.579 li
cp
.0588235 .615686 .141176 rgb
f
891.807 729.545 mo
891.807 739.668 li
879.701 744.251 li
780.181 744.251 li
780.181 724.962 li
879.701 724.962 li
891.807 729.545 li
cp
f
780.695 723.525 mo
766.844 723.525 li
764.229 723.525 762.124 725.631 762.124 728.245 cv
762.124 740.968 li
762.124 743.582 764.229 745.686 766.844 745.686 cv
780.695 745.686 li
780.695 723.525 li
cp
f
893.606 730.503 mo
889.641 730.503 li
889.641 730.503 889.309 733.172 889.138 734.54 cv
888.968 735.907 888.619 738.711 888.619 738.711 cv
893.606 738.711 li
893.606 730.503 li
cp
.0823529 .827451 .192157 rgb
f
891.807 730.622 mo
891.807 738.591 li
879.701 742.198 li
780.181 742.198 li
780.181 727.013 li
879.701 727.013 li
891.807 730.622 li
cp
f
891.807 733.176 mo
891.807 736.037 li
879.701 737.332 li
780.181 737.332 li
780.181 731.881 li
879.701 731.881 li
891.807 733.176 li
cp
.505882 .960784 .278431 rgb
f
778.946 725.266 mo
767.271 725.266 li
765.068 725.266 763.293 727.041 763.293 729.245 cv
763.293 739.968 li
763.293 742.172 765.068 743.945 767.271 743.945 cv
778.946 743.945 li
778.946 725.266 li
cp
.0823529 .827451 .192157 rgb
f
775.662 730.708 mo
763.293 730.708 li
763.293 738.505 li
775.662 738.505 li
775.662 730.708 li
cp
.505882 .960784 .278431 rgb
f
904.889 734.68 mo
904.889 732.308 903.053 730.388 900.721 730.242 cv
903.023 732.701 903.432 736.059 900.654 739.121 cv
903.018 739.008 904.889 737.072 904.889 734.68 cv
904.889 734.68 li
cp
1 1 1 rgb
f
102.511 548.193 mo
113.99 548.193 li
116.312 548.193 118.195 550.076 118.195 552.398 cv
118.195 578.596 li
118.195 580.918 116.312 582.8 113.99 582.8 cv
102.511 582.8 li
100.188 582.8 98.3055 580.918 98.3055 578.596 cv
98.3055 552.398 li
98.3055 550.076 100.188 548.193 102.511 548.193 cv
cp
.180392 .247059 .027451 rgb
f
101.434 550.169 mo
111.774 550.169 li
113.866 550.169 115.561 551.12 115.561 552.294 cv
115.561 565.531 li
115.561 566.705 113.866 567.656 111.774 567.656 cv
101.434 567.656 li
99.3426 567.656 97.6473 566.705 97.6473 565.531 cv
97.6473 552.294 li
97.6473 551.12 99.3426 550.169 101.434 550.169 cv
cp
.321569 .403922 .133333 rgb
f
7.03742 548.193 mo
18.5169 548.193 li
20.8392 548.193 22.722 550.076 22.722 552.398 cv
22.722 578.596 li
22.722 580.918 20.8392 582.8 18.5169 582.8 cv
7.03742 582.8 li
4.71515 582.8 2.83283 580.918 2.83283 578.596 cv
2.83283 552.398 li
2.83283 550.076 4.71515 548.193 7.03742 548.193 cv
cp
.180392 .247059 .027451 rgb
f
9.71467 550.169 mo
20.054 550.169 li
22.1458 550.169 23.8411 551.12 23.8411 552.294 cv
23.8411 565.531 li
23.8411 566.705 22.1458 567.656 20.054 567.656 cv
9.71467 567.656 li
7.62287 567.656 5.92756 566.705 5.92756 565.531 cv
5.92756 552.294 li
5.92756 551.12 7.62287 550.169 9.71467 550.169 cv
cp
.321569 .403922 .133333 rgb
f
26.5364 528.626 mo
94.491 528.626 li
101.764 528.626 107.66 534.522 107.66 541.795 cv
107.66 589.199 li
107.66 596.471 101.764 602.367 94.491 602.367 cv
26.5364 602.367 li
19.2635 602.367 13.3675 596.471 13.3675 589.199 cv
13.3675 541.795 li
13.3675 534.522 19.2635 528.626 26.5364 528.626 cv
cp
.180392 .247059 .027451 rgb
f
31.9051 542.161 mo
89.1224 542.161 li
95.2464 542.161 100.211 546.651 100.211 552.191 cv
100.211 588.296 li
100.211 593.835 95.2464 598.325 89.1224 598.325 cv
31.9051 598.325 li
25.7811 598.325 20.8172 593.835 20.8172 588.296 cv
20.8172 552.191 li
20.8172 546.651 25.7811 542.161 31.9051 542.161 cv
cp
.321569 .403922 .133333 rgb
f
49.2967 556.48 mo
71.7308 556.48 li
81.3089 556.48 89.0731 564.245 89.0731 573.823 cv
89.0731 573.823 li
89.0731 583.401 81.3089 591.165 71.7308 591.165 cv
49.2967 591.165 li
39.7191 591.165 31.9544 583.401 31.9544 573.823 cv
31.9544 573.823 li
31.9544 564.245 39.7191 556.48 49.2967 556.48 cv
cp
.47451 .6 .176471 rgb
f
7.78156 494.699 mo
7.78156 535.207 li
7.78156 540.491 12.0325 544.749 17.3167 544.749 cv
103.707 544.749 li
108.991 544.749 113.249 540.491 113.249 535.207 cv
113.249 494.699 li
7.78156 494.699 li
cp
.180392 .247059 .027451 rgb
f
14.6951 498.649 mo
14.6951 529.453 li
14.6951 533.676 18.3934 537.072 22.9842 537.072 cv
98.0467 537.072 li
102.638 537.072 106.328 533.676 106.328 529.453 cv
106.328 498.649 li
14.6951 498.649 li
cp
.321569 .403922 .133333 rgb
f
19.8426 500.899 mo
19.8426 510.738 li
28.8987 524.699 43.7352 533.821 60.514 533.821 cv
77.2957 533.821 92.1297 524.703 101.185 510.738 cv
101.185 500.899 li
19.8426 500.899 li
cp
.47451 .6 .176471 rgb
f
24.8611 518.676 mo
42.5535 518.676 li
42.5535 577.339 li
33.7073 584.788 li
24.8611 577.339 li
24.8611 518.676 li
cp
.180392 .247059 .027451 rgb
f
25.512 545.109 mo
31.4031 545.109 li
31.4031 551.158 li
36.012 551.158 li
36.012 545.109 li
41.91 545.109 li
41.91 557.417 li
25.512 557.417 li
25.512 545.109 li
cp
21.2991 541.955 mo
21.2991 560.578 li
46.116 560.578 li
46.116 541.955 li
21.2991 541.955 li
cp
1 .698039 .027451 rgb
f
75.5604 518.676 mo
93.2528 518.676 li
93.2528 577.339 li
84.4066 584.788 li
75.5604 577.339 li
75.5604 518.676 li
cp
.180392 .247059 .027451 rgb
f
76.2113 545.109 mo
82.1024 545.109 li
82.1024 551.158 li
86.7113 551.158 li
86.7113 545.109 li
92.6092 545.109 li
92.6092 557.417 li
76.2113 557.417 li
76.2113 545.109 li
cp
71.9984 541.955 mo
71.9984 560.578 li
96.8153 560.578 li
96.8153 541.955 li
71.9984 541.955 li
cp
1 .698039 .027451 rgb
f
33.7073 567.329 mo
35.5071 567.329 36.9666 568.788 36.9666 570.588 cv
36.9666 572.388 35.5071 573.846 33.7073 573.846 cv
31.9075 573.846 30.4481 572.388 30.4481 570.588 cv
30.4481 568.788 31.9075 567.329 33.7073 567.329 cv
cp
.0980392 .133333 .00784314 rgb
f
33.7073 528.685 mo
35.5071 528.685 36.9666 530.144 36.9666 531.944 cv
36.9666 533.744 35.5071 535.204 33.7073 535.204 cv
31.9075 535.204 30.4481 533.744 30.4481 531.944 cv
30.4481 530.144 31.9075 528.685 33.7073 528.685 cv
cp
f
84.4066 567.329 mo
86.2069 567.329 87.6658 568.788 87.6658 570.588 cv
87.6658 572.388 86.2069 573.846 84.4066 573.846 cv
82.6068 573.846 81.1478 572.388 81.1478 570.588 cv
81.1478 568.788 82.6068 567.329 84.4066 567.329 cv
cp
f
84.4066 528.685 mo
86.2069 528.685 87.6658 530.144 87.6658 531.944 cv
87.6658 533.744 86.2069 535.204 84.4066 535.204 cv
82.6068 535.204 81.1478 533.744 81.1478 531.944 cv
81.1478 530.144 82.6068 528.685 84.4066 528.685 cv
cp
f
217.756 516.411 mo
186.839 516.411 li
184.977 516.411 183.468 518.039 183.468 520.048 cv
183.468 601.264 li
183.468 603.273 184.977 604.901 186.839 604.901 cv
217.756 604.901 li
219.617 604.901 221.127 603.273 221.127 601.264 cv
221.127 520.048 li
221.127 518.039 219.617 516.411 217.756 516.411 cv
cp
.635294 .243137 .0705882 rgb
f
189.903 516.411 mo
189.903 604.901 li
214.69 604.901 li
214.69 516.411 li
189.903 516.411 li
cp
.894118 .376471 .0745098 rgb
f
201.687 516.411 mo
201.687 604.901 li
211.099 604.901 li
211.099 516.411 li
201.687 516.411 li
cp
.996078 .482353 .0745098 rgb
f
216.757 494.699 mo
187.838 494.699 li
184.652 494.699 182.069 497.281 182.069 500.467 cv
182.069 513.937 li
182.069 517.123 184.652 519.706 187.838 519.706 cv
216.757 519.706 li
219.943 519.706 222.525 517.123 222.525 513.937 cv
222.525 500.467 li
222.525 497.281 219.943 494.699 216.757 494.699 cv
cp
.568627 .486275 .356863 rgb
f
215.618 495.683 mo
188.976 495.683 li
186.041 495.683 183.662 498.062 183.662 500.998 cv
183.662 513.407 li
183.662 516.342 186.041 518.721 188.976 518.721 cv
215.618 518.721 li
218.553 518.721 220.932 516.342 220.932 513.407 cv
220.932 500.998 li
220.932 498.062 218.553 495.683 215.618 495.683 cv
cp
.752941 .686275 .596078 rgb
f
192.26 495.684 mo
192.26 518.72 li
214.594 518.72 li
214.755 518.72 214.907 518.684 215.064 518.673 cv
215.064 495.732 li
214.907 495.719 214.755 495.684 214.594 495.684 cv
192.26 495.684 li
cp
.905882 .882353 .847059 rgb
f
222.984 512.077 mo
181.611 512.077 li
180.222 512.077 179.096 513.202 179.096 514.591 cv
179.096 519.319 li
179.096 520.707 180.222 521.833 181.611 521.833 cv
222.984 521.833 li
224.372 521.833 225.498 520.707 225.498 519.319 cv
225.498 514.591 li
225.498 513.202 224.372 512.077 222.984 512.077 cv
cp
.568627 .486275 .356863 rgb
f
221.128 543.319 mo
221.128 583.293 li
183.467 583.293 li
183.467 543.319 li
221.128 543.319 li
cp
f
217.724 543.319 mo
217.724 583.293 li
187.415 583.293 li
187.415 543.319 li
217.724 543.319 li
cp
.752941 .686275 .596078 rgb
f
211.099 543.319 mo
211.099 583.293 li
201.688 583.293 li
201.688 543.319 li
211.099 543.319 li
cp
.905882 .882353 .847059 rgb
f
199.036 550.294 mo
199.036 560.053 li
189.254 560.053 li
189.254 566.557 li
199.036 566.557 li
199.036 576.316 li
205.557 576.316 li
205.557 566.557 li
215.339 566.557 li
215.339 560.053 li
205.557 560.053 li
205.557 550.294 li
199.036 550.294 li
cp
.0470588 .498039 .239216 rgb
f
221.68 512.97 mo
182.915 512.97 li
181.614 512.97 180.559 513.888 180.559 515.023 cv
180.559 518.887 li
180.559 520.02 181.614 520.94 182.915 520.94 cv
221.68 520.94 li
222.981 520.94 224.035 520.02 224.035 518.887 cv
224.035 515.023 li
224.035 513.888 222.981 512.97 221.68 512.97 cv
cp
.752941 .686275 .596078 rgb
f
193.692 512.969 mo
193.692 520.941 li
216.512 520.941 li
216.512 512.969 li
193.692 512.969 li
cp
.905882 .882353 .847059 rgb
f
365.024 521.799 mo
365.024 570.758 li
365.024 582.324 355.647 591.701 344.08 591.701 cv
344.08 591.701 li
332.514 591.701 323.137 582.324 323.137 570.758 cv
323.137 521.799 li
323.137 510.232 332.514 500.855 344.08 500.855 cv
344.08 500.855 li
355.647 500.855 365.024 510.232 365.024 521.799 cv
cp
.709804 .713726 .72549 rgb
f
362.495 519.722 mo
362.495 555.479 li
362.495 563.927 355.647 570.775 347.2 570.775 cv
347.2 570.775 li
338.752 570.775 331.904 563.927 331.904 555.479 cv
331.904 519.722 li
331.904 511.274 338.752 504.427 347.2 504.427 cv
347.2 504.427 li
355.647 504.427 362.495 511.274 362.495 519.722 cv
cp
.843137 .847059 .854902 rgb
f
365.024 543.633 mo
323.137 543.633 li
323.137 570.758 li
323.137 582.36 332.478 591.701 344.08 591.701 cv
355.683 591.701 365.024 582.36 365.024 570.758 cv
365.024 543.633 li
cp
.0901961 .364706 .596078 rgb
f
360.73 519.039 mo
360.73 572.078 li
360.73 577.479 356.382 581.827 350.981 581.827 cv
345.579 581.827 341.231 577.479 341.231 572.078 cv
341.231 519.039 li
341.231 513.638 345.579 509.29 350.981 509.29 cv
356.382 509.29 360.73 513.638 360.73 519.039 cv
cp
.992157 .992157 .992157 rgb
f
362.495 543.632 mo
331.904 543.632 li
331.904 572.438 li
331.904 580.913 338.726 587.734 347.2 587.734 cv
355.674 587.734 362.495 580.913 362.495 572.438 cv
362.495 543.632 li
cp
.113725 .427451 .756863 rgb
f
360.73 543.633 mo
341.231 543.633 li
341.231 572.078 li
341.231 577.479 345.58 581.827 350.981 581.827 cv
356.382 581.827 360.73 577.479 360.73 572.078 cv
360.73 543.633 li
cp
.129412 .580392 .870588 rgb
f
592.54 512.758 mo
592.54 512.758 614.496 564.168 645.092 571.627 cv
679.817 580.093 719.414 558.463 747.631 549.792 cv
775.848 541.12 811.128 546.108 811.128 546.108 cv
809.155 513.175 li
592.54 512.758 li
cp
.541176 .690196 .854902 rgb
f
781.968 513.124 mo
780.609 522.363 743.781 546.895 717.088 550.632 cv
690.396 554.368 636.309 552.105 636.309 552.105 cv
636.309 552.105 622.007 549.096 622.948 554.737 cv
623.209 556.306 623.547 557.813 623.951 559.264 cv
630.318 565.141 637.435 569.761 645.092 571.628 cv
679.817 580.094 719.413 558.464 747.631 549.793 cv
775.848 541.121 811.128 546.109 811.128 546.109 cv
809.155 513.176 li
781.968 513.124 li
cp
.360784 .517647 .709804 rgb
f
592.54 512.762 mo
617.81 512.808 li
627.675 529.016 645.677 549.272 674.701 550.463 cv
705.993 551.745 777.161 533.805 780.741 534.895 cv
784.32 535.986 792.216 544.753 792.216 544.753 cv
779.585 544.443 762.632 545.18 747.63 549.79 cv
719.413 558.461 679.815 580.091 645.09 571.625 cv
614.494 564.166 592.54 512.761 592.54 512.761 cv
592.54 512.762 li
cp
.776471 .878431 .984314 rgb
f
805.741 512.763 mo
805.741 512.763 863.868 513.246 884.31 512.763 cv
904.75 512.279 904.896 548.99 885.681 556.942 cv
866.467 564.894 866.692 540.497 846.818 539.009 cv
829.523 537.713 830.039 552.599 814.616 551.127 cv
799.192 549.654 805.741 512.763 805.741 512.763 cv
cp
.321569 .121569 .0823529 rgb
f
809.828 512.762 mo
809.828 512.762 863.868 513.123 884.31 512.762 cv
904.75 512.4 904.896 539.837 885.681 545.78 cv
866.467 551.723 866.692 533.489 846.818 532.377 cv
829.523 531.408 832.87 542.534 817.447 541.433 cv
802.023 540.333 806.684 518.737 809.828 512.762 cv
809.828 512.762 li
cp
.54902 .286275 .109804 rgb
f
875.298 522.827 mo
871.691 523.744 869.51 527.412 870.427 531.019 cv
871.344 534.626 875.012 536.807 878.619 535.89 cv
882.226 534.973 884.408 531.305 883.491 527.698 cv
882.573 524.091 878.906 521.91 875.298 522.827 cv
cp
.321569 .121569 .0823529 rgb
f
847.401 515.299 mo
843.794 516.216 841.614 519.884 842.531 523.491 cv
843.448 527.098 847.115 529.279 850.722 528.362 cv
854.329 527.445 856.51 523.777 855.593 520.17 cv
854.676 516.563 851.008 514.382 847.401 515.299 cv
cp
f
819.504 522.491 mo
815.897 523.408 813.716 527.076 814.633 530.683 cv
815.55 534.291 819.218 536.471 822.826 535.555 cv
826.432 534.638 828.613 530.97 827.696 527.362 cv
826.779 523.755 823.112 521.574 819.504 522.491 cv
cp
f
624.257 522.227 mo
602.019 530.949 li
611.253 546.52 626.567 567.108 645.088 571.624 cv
660.231 575.315 676.301 573.281 691.949 569.098 cv
692.154 549.744 li
685.646 550.349 679.642 550.666 674.7 550.463 cv
651.133 549.497 634.835 535.961 624.257 522.227 cv
cp
.890196 .945098 .996078 rgb
f
767.475 536.971 mo
758.461 538.74 745.833 541.346 732.318 543.823 cv
734.166 554.459 li
738.852 552.722 743.402 551.089 747.631 549.789 cv
756.029 547.208 765.018 545.869 773.538 545.22 cv
767.475 536.971 li
cp
f
617.812 512.807 mo
627.676 529.015 645.676 549.273 674.7 550.464 cv
705.992 551.746 777.162 533.806 780.742 534.896 cv
784.321 535.986 792.215 544.755 792.215 544.755 cv
791.76 544.755 li
793.011 544.783 794.271 544.811 795.433 544.859 cv
790.397 539.95 li
790.397 539.95 783.138 533.755 782.1 533.403 cv
781.062 533.051 777.492 533.501 769.364 535.051 cv
756.455 537.511 736.164 541.292 717.303 544.237 cv
697.58 547.317 678.179 551.187 660.113 544.777 cv
644.534 539.251 627.021 525.723 622.499 512.825 cv
617.812 512.807 li
cp
1 1 1 rgb
f
479.191 538.92 mo
479.191 683.527 li
479.191 688.708 483.318 692.878 488.445 692.878 cv
493.577 692.878 li
498.704 692.878 502.831 688.708 502.831 683.527 cv
502.831 538.92 li
479.191 538.92 li
cp
.545098 .278431 .105882 rgb
f
482.078 551.788 mo
482.078 683.365 li
482.078 685.94 484.896 688.013 488.395 688.013 cv
491.894 688.013 494.711 685.94 494.711 683.365 cv
494.711 551.788 li
482.078 551.788 li
cp
.74902 .419608 .113725 rgb
f
483.794 551.788 mo
483.794 683.365 li
483.794 685.94 484.699 688.013 485.821 688.013 cv
486.944 688.013 487.848 685.94 487.848 683.365 cv
487.848 551.788 li
483.794 551.788 li
cp
1 .564706 .192157 rgb
f
485.456 494.699 mo
481.985 494.699 479.191 497.208 479.191 500.326 cv
479.191 507.767 li
502.831 507.767 li
502.831 500.326 li
502.831 497.208 500.036 494.699 496.566 494.699 cv
485.456 494.699 li
cp
.545098 .278431 .105882 rgb
f
488.395 495.716 mo
484.896 495.716 482.078 497.545 482.078 499.815 cv
482.078 507.767 li
494.711 507.767 li
494.711 499.815 li
494.711 497.545 491.894 495.716 488.395 495.716 cv
cp
.74902 .419608 .113725 rgb
f
487.822 495.733 mo
486.236 495.825 484.823 496.295 483.794 497.003 cv
483.794 507.767 li
487.848 507.767 li
487.848 496.613 li
487.848 496.313 487.837 496.021 487.822 495.733 cv
cp
1 .564706 .192157 rgb
f
455.439 504.95 mo
530.227 504.95 li
532.969 504.95 535.176 506.706 535.176 508.886 cv
535.176 542.706 li
535.176 544.886 532.969 546.641 530.227 546.641 cv
441.648 546.641 li
438.906 546.641 435.837 544.818 436.699 542.706 cv
450.49 508.886 li
451.352 506.773 452.698 504.95 455.439 504.95 cv
cp
.0784314 .105882 .129412 rgb
f
458.448 507.002 mo
524.844 507.002 li
527.203 507.002 529.103 508.512 529.103 510.387 cv
529.103 539.488 li
529.103 541.364 527.203 542.874 524.844 542.874 cv
446.581 542.874 li
444.222 542.874 441.581 541.305 442.323 539.488 cv
454.189 510.387 li
454.93 508.57 456.089 507.002 458.448 507.002 cv
cp
.152941 .180392 .211765 rgb
f
459.201 507.039 mo
521.222 507.039 li
524.362 509.748 519.649 520.484 505.089 529.377 cv
490.531 538.269 444.286 537.531 444.967 535.465 cv
455.477 509.551 li
456 508.262 457.138 507.039 459.201 507.039 cv
459.201 507.039 li
cp
.305882 .333333 .372549 rgb
f
691.06 685.792 mo
693.739 685.792 li
697.684 685.792 700.86 688.421 700.86 691.686 cv
700.86 694.951 697.684 697.58 693.739 697.58 cv
691.06 697.58 li
687.115 697.58 677.669 694.951 677.669 691.686 cv
677.669 688.421 686.823 685.792 691.06 685.792 cv
cp
.254902 .294118 .329412 rgb
f
681.4 691.773 mo
679.889 691.773 678.594 692.469 678.006 693.47 cv
678.915 695.858 687.867 697.577 691.062 697.577 cv
693.741 697.577 li
697.65 697.577 700.801 694.997 700.858 691.773 cv
681.4 691.773 li
cp
.0862745 .121569 .141176 rgb
f
595.307 676.682 mo
689.617 676.682 li
689.617 706.689 li
595.307 706.689 li
595.307 676.682 li
cp
f
669.641 666.321 mo
685.934 666.321 li
685.934 712.548 li
680.503 714.635 675.072 714.304 669.641 712.548 cv
669.641 666.321 li
cp
.815686 .129412 .0156863 rgb
f
673.726 666.325 mo
673.726 712.359 li
676.433 712.835 679.144 712.901 681.852 712.446 cv
681.852 666.325 li
673.726 666.325 li
cp
.980392 .509804 .176471 rgb
f
669.641 663.29 mo
685.934 663.29 li
685.934 680.72 li
680.962 682.326 675.706 682.941 669.641 680.72 cv
669.641 663.29 li
cp
.996078 .568627 .172549 rgb
f
673.726 663.289 mo
673.726 681.823 li
676.583 682.327 679.272 682.229 681.852 681.76 cv
681.852 663.289 li
673.726 663.289 li
cp
.996078 .815686 .384314 rgb
f
677.787 662.62 mo
682.286 662.62 685.934 662.96 685.934 663.378 cv
685.934 663.797 682.286 664.136 677.787 664.136 cv
673.288 664.136 669.641 663.797 669.641 663.378 cv
669.641 662.96 673.288 662.62 677.787 662.62 cv
cp
.831373 .360784 .117647 rgb
f
668.759 687.358 mo
675.052 688.73 681.072 688.734 686.816 687.358 cv
686.816 699.147 li
681.347 701.074 675.327 701.068 668.759 699.147 cv
668.759 687.358 li
cp
.0862745 .121569 .141176 rgb
f
673.726 688.15 mo
673.726 700.243 li
676.545 700.662 679.253 700.687 681.852 700.333 cv
681.852 688.188 li
679.197 688.456 676.492 688.44 673.726 688.15 cv
673.726 688.15 li
cp
.254902 .294118 .329412 rgb
f
649.849 666.321 mo
666.142 666.321 li
666.142 712.548 li
660.711 714.635 655.28 714.304 649.849 712.548 cv
649.849 666.321 li
cp
.815686 .129412 .0156863 rgb
f
653.934 666.325 mo
653.934 712.359 li
656.641 712.835 659.352 712.901 662.06 712.446 cv
662.06 666.325 li
653.934 666.325 li
cp
.980392 .509804 .176471 rgb
f
649.849 663.29 mo
666.142 663.29 li
666.142 680.72 li
661.169 682.326 655.914 682.941 649.849 680.72 cv
649.849 663.29 li
cp
.996078 .568627 .172549 rgb
f
653.934 663.289 mo
653.934 681.823 li
656.791 682.327 659.48 682.229 662.06 681.76 cv
662.06 663.289 li
653.934 663.289 li
cp
.996078 .815686 .384314 rgb
f
657.995 662.62 mo
662.494 662.62 666.142 662.96 666.142 663.378 cv
666.142 663.797 662.494 664.136 657.995 664.136 cv
653.496 664.136 649.849 663.797 649.849 663.378 cv
649.849 662.96 653.496 662.62 657.995 662.62 cv
cp
.831373 .360784 .117647 rgb
f
648.967 687.358 mo
655.26 688.73 661.28 688.734 667.024 687.358 cv
667.024 699.147 li
661.555 701.074 655.534 701.068 648.967 699.147 cv
648.967 687.358 li
cp
.0862745 .121569 .141176 rgb
f
653.934 688.15 mo
653.934 700.243 li
656.753 700.662 659.461 700.687 662.06 700.333 cv
662.06 688.188 li
659.405 688.456 656.7 688.44 653.934 688.15 cv
653.934 688.15 li
cp
.254902 .294118 .329412 rgb
f
629.782 666.321 mo
646.075 666.321 li
646.075 712.548 li
640.644 714.635 635.213 714.304 629.782 712.548 cv
629.782 666.321 li
cp
.815686 .129412 .0156863 rgb
f
633.867 666.325 mo
633.867 712.359 li
636.575 712.835 639.285 712.901 641.992 712.446 cv
641.992 666.325 li
633.867 666.325 li
cp
.980392 .509804 .176471 rgb
f
629.782 663.29 mo
646.075 663.29 li
646.075 680.72 li
641.103 682.326 635.847 682.941 629.782 680.72 cv
629.782 663.29 li
cp
.996078 .568627 .172549 rgb
f
633.867 663.289 mo
633.867 681.823 li
636.725 682.327 639.412 682.229 641.992 681.76 cv
641.992 663.289 li
633.867 663.289 li
cp
.996078 .815686 .384314 rgb
f
637.928 662.62 mo
642.427 662.62 646.075 662.96 646.075 663.378 cv
646.075 663.797 642.427 664.136 637.928 664.136 cv
633.429 664.136 629.782 663.797 629.782 663.378 cv
629.782 662.96 633.429 662.62 637.928 662.62 cv
cp
.831373 .360784 .117647 rgb
f
628.9 687.358 mo
635.194 688.73 641.213 688.734 646.956 687.358 cv
646.956 699.147 li
641.489 701.074 635.468 701.068 628.9 699.147 cv
628.9 687.358 li
cp
.0862745 .121569 .141176 rgb
f
633.867 688.15 mo
633.867 700.243 li
636.686 700.662 639.395 700.687 641.992 700.333 cv
641.992 688.188 li
639.338 688.456 636.633 688.44 633.867 688.15 cv
633.867 688.15 li
cp
.254902 .294118 .329412 rgb
f
609.715 666.321 mo
626.008 666.321 li
626.008 712.548 li
620.576 714.635 615.146 714.304 609.715 712.548 cv
609.715 666.321 li
cp
.815686 .129412 .0156863 rgb
f
613.8 666.325 mo
613.8 712.359 li
616.507 712.835 619.218 712.901 621.925 712.446 cv
621.925 666.325 li
613.8 666.325 li
cp
.980392 .509804 .176471 rgb
f
609.715 663.29 mo
626.008 663.29 li
626.008 680.72 li
621.035 682.326 615.781 682.941 609.715 680.72 cv
609.715 663.29 li
cp
.996078 .568627 .172549 rgb
f
613.8 663.289 mo
613.8 681.823 li
616.658 682.327 619.346 682.229 621.925 681.76 cv
621.925 663.289 li
613.8 663.289 li
cp
.996078 .815686 .384314 rgb
f
617.862 662.62 mo
622.361 662.62 626.008 662.96 626.008 663.378 cv
626.008 663.797 622.361 664.136 617.862 664.136 cv
613.363 664.136 609.715 663.797 609.715 663.378 cv
609.715 662.96 613.363 662.62 617.862 662.62 cv
cp
.831373 .360784 .117647 rgb
f
608.833 687.358 mo
615.126 688.73 621.146 688.734 626.89 687.358 cv
626.89 699.147 li
621.421 701.074 615.401 701.068 608.833 699.147 cv
608.833 687.358 li
cp
.0862745 .121569 .141176 rgb
f
613.8 688.15 mo
613.8 700.243 li
616.619 700.662 619.327 700.687 621.925 700.333 cv
621.925 688.188 li
619.271 688.456 616.566 688.44 613.8 688.15 cv
613.8 688.15 li
cp
.254902 .294118 .329412 rgb
f
589.648 666.321 mo
605.941 666.321 li
605.941 712.548 li
600.51 714.635 595.079 714.304 589.648 712.548 cv
589.648 666.321 li
cp
.815686 .129412 .0156863 rgb
f
593.733 666.325 mo
593.733 712.359 li
596.44 712.835 599.152 712.901 601.859 712.446 cv
601.859 666.325 li
593.733 666.325 li
cp
.980392 .509804 .176471 rgb
f
589.648 663.29 mo
605.941 663.29 li
605.941 680.72 li
600.969 682.326 595.713 682.941 589.648 680.72 cv
589.648 663.29 li
cp
.996078 .568627 .172549 rgb
f
593.733 663.289 mo
593.733 681.823 li
596.591 682.327 599.279 682.229 601.859 681.76 cv
601.859 663.289 li
593.733 663.289 li
cp
.996078 .815686 .384314 rgb
f
597.794 662.62 mo
602.293 662.62 605.941 662.96 605.941 663.378 cv
605.941 663.797 602.293 664.136 597.794 664.136 cv
593.295 664.136 589.648 663.797 589.648 663.378 cv
589.648 662.96 593.295 662.62 597.794 662.62 cv
cp
.831373 .360784 .117647 rgb
f
588.766 687.358 mo
595.06 688.73 601.079 688.734 606.823 687.358 cv
606.823 699.147 li
601.355 701.074 595.334 701.068 588.766 699.147 cv
588.766 687.358 li
cp
.0862745 .121569 .141176 rgb
f
593.733 688.15 mo
593.733 700.243 li
596.552 700.662 599.261 700.687 601.859 700.333 cv
601.859 688.188 li
599.203 688.456 596.499 688.44 593.733 688.15 cv
593.733 688.15 li
cp
.254902 .294118 .329412 rgb
f
840.958 612.721 mo
829.262 628.716 li
697.767 628.395 li
697.767 628.395 701.528 645.671 708.018 647.88 cv
714.507 650.089 770.894 649.1 770.894 649.1 cv
837.306 649.1 li
839.019 650.383 851.859 659.578 857.51 659.885 cv
866.258 660.36 877.883 654.8 878.012 654.763 cv
968.045 680.747 li
973.882 670.762 976.674 652.527 973.965 637.414 cv
877.925 629.442 li
877.925 629.442 869.28 633.372 864.006 633.282 cv
858.457 633.187 840.958 612.721 840.958 612.721 cv
840.958 612.721 li
cp
.454902 .247059 .129412 rgb
f
534.09 612.728 mo
534.09 629.428 li
815.87 629.428 li
817.906 635.956 812.636 645.581 810.01 649.641 cv
819.946 645.014 829.882 644.721 839.818 651.682 cv
837.528 647.054 837.434 633.555 837.79 628.993 cv
838.147 624.432 839.373 617.526 841.04 612.728 cv
534.09 612.728 li
cp
.133333 .14902 .2 rgb
f
550.946 603.772 mo
553.434 603.772 555.451 607.797 555.451 612.763 cv
555.451 617.727 553.434 621.753 550.946 621.753 cv
548.456 621.753 546.44 617.727 546.44 612.763 cv
546.44 607.797 548.456 603.772 550.946 603.772 cv
cp
f
832.242 605.141 mo
834.238 605.141 835.856 607.987 835.856 611.499 cv
835.856 615.01 834.238 617.855 832.242 617.855 cv
830.246 617.855 828.628 615.01 828.628 611.499 cv
828.628 607.987 830.246 605.141 832.242 605.141 cv
cp
f
822.08 649.528 mo
829.828 649.528 836.101 653.211 836.101 657.76 cv
836.101 662.307 829.828 665.99 822.08 665.99 cv
814.331 665.99 808.04 662.307 808.04 657.76 cv
808.04 653.211 814.331 649.528 822.08 649.528 cv
cp
821.176 645.047 mo
809.64 645.047 800.29 650.526 800.29 657.298 cv
800.29 664.068 809.64 669.568 821.176 669.568 cv
832.712 669.568 842.063 664.068 842.063 657.298 cv
842.063 650.526 832.712 645.047 821.176 645.047 cv
cp
f
714.102 632.447 mo
710.271 632.447 706.081 635.283 708.094 638.805 cv
710.107 642.327 713.009 645.162 716.841 645.162 cv
804.054 645.162 li
808.032 641.327 809.826 634.489 810.708 632.447 cv
714.102 632.447 li
cp
.701961 .396078 .180392 rgb
f
878.957 639.367 mo
874.993 652.167 967.811 674.22 967.811 674.22 cv
971.151 667.145 974.079 650.005 972.582 644.761 cv
972.582 644.761 881.296 631.818 878.957 639.367 cv
cp
f
534.09 615.7 mo
534.09 623.408 li
838.498 623.408 li
838.915 620.849 839.478 618.158 840.147 615.7 cv
534.09 615.7 li
cp
.231373 .27451 .345098 rgb
f
843.152 615.001 mo
842.108 615.431 840.76 622.385 842.789 629.039 cv
844.819 635.693 851.634 649.905 861.067 650.816 cv
868.794 651.562 877.897 637.927 877.955 629.342 cv
876.62 629.93 868.911 633.257 864.116 633.176 cv
859.709 633.1 847.884 620.319 843.152 615.001 cv
cp
.329412 .156863 .0627451 rgb
f
819.171 622.179 mo
834.562 622.179 li
832.825 627.429 832.382 635.933 833.413 642.81 cv
818.253 642.81 li
821.145 636.747 821.664 628.513 819.171 622.179 cv
cp
.231373 .27451 .345098 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 22.0.0
%%For: (Olga Bikmullina) ()
%%Title: (Free Game Icons.eps)
%%CreationDate: 10/26/2018 12:26 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj4NZdQdZB51aqk6NW,f&m!>lE+DjD'GSLmLCaMT!l6/K_&*-trm\-_f>&dp>L2j%b21li;X(a(WiN.8\:/k/F*+Y:3nTkd
%r&%CbM6:MXJ,,o"V>g5(Y$Z\6HJ.YU/6)453%A'PM7*P+.7'K#3iZef;Q.+PBcQM!&,N?_:8?M.c$.m4DJuC-s*+F7nuTPm^XOe&
%RdG:]ccTM)hUnSaZV0HP_cFDFYg_F3pFE\<0Mm2[b--.kM]0BDL:bc)qZL)<pA6[)C)b-q^O.k>mZO7@n+_YI-cLfrG/J#cIr"o8
%CcEfZhZeQCI/Z*VAnIBGk]X(R=RXi<Xj-ri7'ie@a6CXe6?BbfeF&+^</OTGYs2)O'9e]H6U5s&bL.L9s-prV_`-Oq5kaZ2^jeeX
%e"?,4<`DMCITBMdd"`#5Cf8Z8I[76j37S$Pj#fl6m]5LL@CtB7o'REcedU)Q261;7ibMSGp*^maPLchBVBVP3V+S9jl<I%0"E@Vs
%"@6L^i\WLlBJog[WB>(L\!l-_l*K4F>3e7eXq8b+KU0?8$N?.,&hf="c0jnM<Zd7AYV^1BZd)UXS\_h4L[@,EL=4lQs09MCH?Z:?
%VaK9S+(9A*.R(t'H[`?:>lVFh/Tn@>fK=E/=m%M8=[W'4UnEjtIa[E/dU1GNdTc-1$L5k"de79IUE-_)[?$$P^.QFiV;'^<*R&2R
%<V5'e4Pc(0Xf^T%4'D+4Ils3h0E"JK5B5&W"T<f@+Ie(HTBDi3cm5SR>=8.C#@$ejI;DOe?g!k7&Aju]B.*[^I,Wt]M5.sJ*sR+A
%hOt:Y"#TrEIm"=Wq9Q,/,Ppq-[rZZ$FKjTspV4^\[lU#'b'LDAmrW9=[jint?g5a%AUHj:\Y3iFTeu_Q,5a/eJ.]4>_H(4nI]nDH
%[#7/)U8#YO6Z<^]3(IiKrRL28_hfHDNprIX:*oh^"&!0<&+-s(BU]J4rD1I"d,.mOBDOt7+50m\pnQO1*&adad-P<JYhH6%e@QIp
%i?.bX6Bu8)S;Jh#>%-SD@0Q0)Q$>ah,p&bO0p$#Im:F:2#Hc`3er7@UIpZs9KF<RB9<CFa<q?(dYX%HNbB1/I3]P[.L(`/h@/90R
%jg$d+:YYs#=_bF,H@;O\SSkS*=7\r<Y3e+DNST*6EG/hNY#jrf?+O70#@"lkI\)3#'mY3%gLTDcA<ppC6;Ns$MYVS1h:h,E%sM6;
%b$=\>[p+..l*PrW+D'eBB4kG6(0*lQP"eDVk<:'o^6k_K%EGe*O-bW[d9^FZCObekG1s(TI^/"spf?u;F@!NT*"<Rr0^[4$I:TWb
%.FC6i<eK]Tr#dHmq;bRf."SeQ&S;[6:;,D#2;6<_^O,qAjeri1PjZB15r_k/ERU^58@m&(-RkA@JrQJY4q)+t?+E:#a_Ui[1l@X#
%POW&'0N)e-30!OW]tl)^j<R-:,"d++hd%',Y3@X6$se"1m;^..$Z[,"b:lM&4a))cLDeLHZFJGZ$h#)/i5.6bJ(ElD>]+EXi)[]a
%Dmp3I*iZ4][JJ.`QAX_GTeek]/k)GC\oc'4MoM`Dg-rnp`<a\#iiL=no@28#H0R6a#!&[_GIpH5qXi6hcCY@>XYN7b+RtaUd,BRq
%1_Q*m+mTb=38-Yg_p;n!B0T-jVOuK7S!@4-dTVRi^Ll>%;H^j9ati8:3Zp*?J$i5]-V+<<3H)TroYHF7.""QWk4:3+Hom69RHXJ?
%DgZmuT=ts)cO,M#cRL##-C(]_duW!4pTd5?=fp0&/%>QWYKA],cM53(V^3ifrl;(L>&TV;dgQmmh&KtdK4kU:L#.7hl[O3Q_J4`&
%bSB`j7m#?X=Dmg.s2!9Y?II3IIs<k?&q185%\!7o1,q.7&pdjpEGCo5@%lGT1O&fhF9]P&`7J#l6@6ECG6GR,[f!eEeNE$XgQh<D
%p=fgO@#?@$\$^M2D\=jRM[RjS]Cj?)o94JLQ##`pg0<Cq5qF<4dn;O<r+Gr2s#1'Orcrn+fro>AOr2'j2<s..kBPZElKt@ZE,4d0
%;?qmFYn.?J`GYXm7Cj[YI>J-qDJd_L2`jP.9<E97oP_7ps*Qu[&'f&#9%rOd+$5Zci\K\@[,:fI;G2@W3DU&Wr8WdnC<UM#0)F"k
%q99HEphmir3&<^GGgpT^3o-@kXTna5ha.pD@B83rQ25'8$-0X3lue?"NUt;b`e1#&5cF11pGc.I3BR/N9W?Q\?[bbbE\NKmbaV@O
%n$a,ANo8*7LK=\L`t!Efs/:-g[kEB<pn;m\9T:?Jk&'cU?`Jb(_554V]@5DJ?B0TZMZ.h@_N-%Rg#=A_ELBDHR9=>!TCZkO1!t%3
%rrif%.nKfeX]=7p2_Tk&=-P,Wr,I"fJ?lr1J]Bkl8%j@as#2'M^\!?-o]jfM5UIg?]_kA"Dr;(/48`FF\QYreg]$e'38a`@.!`#P
%C0Vc7Sm,>l^MMKU([_+]pA?kCg8Qm9,VeNoVtF\<X1s"\WPt%8`UoZ:2)"lgGAXhBg=a00r[9;n>>-`Wq>8S;rk?n3rr,W(7DriA
%e%'-US"2_t)U$CmI^%G8eFZL;qJCHa-C/GKMdbYkhh.o$]C*-F8#C2($%khLnR+hqiY0D0c<R>*K9Fmem#hpFr%WmWq'sS\K:Se6
%::%7[3Q-Pa<[$B&?>qCK_32%UX`TU"D4"-'jm6uo3N$PohsKdl8%W#0<*$WU?F0N!Zgs"-j7h=)AujbQB-]cFj]+M<CuFpXK0SWa
%fSX:APL+H(Ik'-,dOMB$5PbeXbIPo*Dr7*?4^/hGrLi&JeD%*O2I,:+N67D:c!Zb2q'?=;ia;XnPqONooKQCM'R=a;FkSlmeP7_t
%n$(8*3HQ0Omj)_ahV3rBQ':CKqGsJcd'8X$Vqiq"bNr,<p8HlJ]WCl(c#0efag&P%N`;k*lbH?,Z3aG_>2jAl&f/+4?DWp5\%gUq
%GIK%2[Z-SPrht)D3DYu'6)meThlS!m%dSdBNP?u*[$m7d0h,r;1?\B]b.[dnKKJ"%Nj:lcGbDq0>Xe;&5nla\l^q2fl\BRIH`d7A
%2HuPU]LR;RS]2^Z+H<[j,IK%VGRRN_]^JdKYb>lEZehi,1eq>6-gEPBX[=!^,gsG@a?-VFs$;pf%,!^l1qSNfps!Q4IgD>UR9:\L
%Gqt#E?t#08]=FYt99'tgnk4@jok..5L\Xc6mdr"UAX5#1mUESr21)qq4p6fC_H8q<YiJoOQ)"=%/bfi+NCT1Un'q^_2;dd@&rh3B
%B(X)a;g9b;0)h`dpPqmL,6Css\2V%ln>P0gemY,J&mQ:Mh=IQV;1nf:SUR#6r9LT9m6d\@mEpgaSi6Vokm#DGdHPO+\'AZf1B"l7
%+7/agNg_TQU$9IcrOpo.>u%MSm7qiaCXQbZI]Da8EuUH@=W4O-(>c6=pNiCtm96!Xo;Sec<:QVng2=;o?e_L$IdLska-V_I`^mjI
%n+M30OER9j(XAE\Qbn]mV*f?]ihZf<G6C0O[Q?)OZUiAX]@#H7oc!LHZ^1!03MTH93pcKBjn?tKen[)PH5B<]V)mG'g)h-T!bM5H
%?0!rqq(320C=a!fiW!kg(NiA@TuPTbhV2l>pZmU$.GH9l1O2j6c,dA$3,?Bf_qe)^q[\#0CA(gm#:FDUdg`atFDMJ$M>CUQH5@b-
%ROteAk7+ZED8?tR&j>E%a!TT\ISb9](ure<JUZdVX_AarG&,<Zr",d<Gsc3bkeg_DZNVh'6(.+mIVl,k)ZEm1Tht2kZZd#DL*M#s
%DZ"qYFnd-IaH/!gG<TP\UQr]^4gR,oXIjR+**^.SO#>[+\!qb64MU[0cjCgNGNrS=J$;%>mDJ@8Vo39@?9XgY/1o.O3,MC3RQ,4:
%qh/9e,kP9i]MJKob=<r?R"!&NVC#`/G>@,folT=.Te]igZS3mUcYJFJCWZeX7n#'pk'Rkh0F.MQ+VHg"rj_Gm.auh(80i%#=@luE
%H6r:Mm"4We+3jM51oJrD#MRhsQ:T=*AIl8#C$eP.%SQk&\R>;2/oKS.$\e[hZq.QVU%\q]r8dYl%jpec*G;RDF&jRs\np-G[e,^D
%2Bl6cB5TrMk5-.*60G(UoJ3Q%F&=8(a.OKs-"p<U_=@IYFZP5:(G$9J]3b(q!X_7*jH`Pj2rC8a3L-=PA,l#2+-5r&k<ItS$HtYk
%-(s[GKNb:<5,U)ofSbA(d+>]+6ImgPMS!*KhXMh96+Qj.60Fu)EM;cpK>rtp*2bm55]eROpt&sM4J0%J<2+SYaL(9Zh,_:9+a'Wu
%S\qS)+-l%qZo_NedCHai'NqNX._+<@N\$HK+TI',OkF5-hSn<jU1N_b3N)(9pIol/XJ4NL7E&EN&l)8fnU%s-MB7M(V./WG!TE3u
%K'I/T!+gB5b[/kBSqWpcVTt_Y(=@MjCLGHJeq5YrC2#:d7ui_e9/)%>b+HeZ*,GPPf3IMrk4#eN^`<$\nEZIdC0$u?3&/\>HETOP
%F^duO-[o<)J$e^F":TT'K"e@R%WMu4<]PDDSP^[@G]88jTO6=ji`2\DQc2aY#E@$[0q?D@K*q9#YoG.BM10_@'XuRsGn@#<gLlj[
%mPN)G:jE?DS'A(.ANF+>[G,N)H=s5_AQ%a0<a1&2gT/TeG-c0\NIOiK]lm4:8Kd"0f1>ZBnH@.))1+T!Oma=Ao<\@1'Rd8B]6(;u
%YH18XkS+BF9'_"mQr$/?ekOVE?!L[9XIN6kQ5,qFpH4\6o2-D%nsD3)pe(]Gm<E*-4[kf48mM"66&WKM=c.)M>/]GW60Y_QP+5dH
%Q1td[Wji_bH>"oE:@iR`e52Pp<rj?9,IY+*lsV>'\(n$jhl;]rDXHL0eZnY83W\=[K[)3=_LJ<U"GMUr>S*k*8p*]JlLpZ[miq9&
%7=0B`_bD'&hMHNLXfcDG/7tS`p3=ue+7*5`4)qUF^R%UmW;E[hZYtsRSP=?HQLBoF9)Po9O1P!9ka!^kK<;*&^JKt5C2oUH\qRX0
%^J1<"FhFns#R9]J<4bP:8n_KoPQ`?D>)Gr:20=/IPo[9c[J?XFD\hQHD6]SnokLnGGa,?pRJU6;GOM,,QsP'.hL8SAhRu"[[f(#a
%=l"O5X`iSIeM7$tjb&td#Q;%&nCbg*^[gf+pYjc"jhpQE^K7HL?P]ZlRl<g:eaY"3e>tUPM_!\CJ#Jj:I*d;H,j<.R0##&gFWYh]
%o\oWSqVR*Y2#![=.#_hU(Br$8ooIuWkeiB!r,qO&A*F<6hWD"_b29poY:H=9X7qSkHu8B)=oUf/dYI?)1k')gYC><):D7sBobDW@
%kXKF_(4E`M;Bmh:?/L"3kgQZsW4k7KlFiY+=!"AEW4e_dd>'0e^HS0+G/*#%COD[Vr,V8\3'PjVJ#Sj"]:3+*)J52]fW<aZ$9Xj9
%rcn1LI;]X?(H5\I,7j5o*6m'ao)5%mDL-&?p=6Y/onSHH2^PU#prC@uCGR%J[Vn:B^@:bcIH"8eogD%shLWf%dH[l>=AmK+_R0n1
%ad7/?o)&0d_e\'5eimg8fN2#?hTNn'eD0]ark6Ei:T->Rif1qn^>=lSG]W>%!1&)Ietpn7*PkoTIV'_&'Dr/2ou>HV"Q+!+Kh#aZ
%74Y"pQ_g%fJ/o`#\JK&U^"R^;'9D;4]mi'>EpN_Wgu@t)jq3U)G.rBn>e%7eGB'_Up?&-\%Js^SDeA=dK5^3^F/9OM1qSA2L6bJ*
%YVil`D0E\#F7etI_ke)`T/P9`>B_189J/M5((\.8Dn*p.jbM0a\ouTurdB+]aj]P9]meSP<B>@[1V7hr_81M7B+$o-DL^\QD5#Xp
%mhXf!5Fd'SoDIq2o[E2!mIic#f-eT0m.O?Gn]Kj'EpIE4l+>>[g<ZsdF&V=]%gu$79/if[\b:ZaRVSDYS'Fb&[af3'Yp:[jdZ6YX
%OV^fln)_j]g/3!:Ec+`l5FN>CWQ>D:2`>=I<,H/SHYPo"bWU;rn)VL.*W=9=q0R7+6;1BL8][ijCd%c$XY.96FEkFhea!)\I>i7n
%DV2nPO!E23kAS+8DpG.;q65Y1V'6Lua$8S<kelqN:VPRB;sh[3]nmbjT;HSKX(0\BZ&^]kd9@")X4QFnB(`_[/0;F8@XnV@As,[7
%nb_\aeVV8Q:A*bugU6>-MikR8Xn>KUeZ"PIYLV@he3nG*VffJ;m'".%MOnTaeS+td<?8c]<ASg]8_)Z9rD[q!F1:EV4B'f&Tmg7;
%H!UAJ^"m@0S#U\QhRMjaHV[\BpXem%<$**9am.[*c%YH\LXFGu`Nej=lGM.j&#t\o+)Y&E<XqX#:T'4bX3:2%T<$<,:JOkja6Z^s
%`TD!;]!h6)='m=n?WYj?^5c1MG&Am4hg`APMf(H0^38%&0A7Aq0<`U%lK7rd[Hc>t_e[fiXaA7Ah+kXjh&B!.=8-@aIB.NlC6,CP
%)K3>iqmYYHOm5jCBOpaSmb,\6h!!D3q!Qng,Eq`nPEDj$oe.Q3Zhj&$-(aL&2^@JNb``Y=r5SNQm?rTdOaB%PG=EWqhgHH3hgN$n
%o'k+,4gO^"WBIQ"nT\VUAa>a*H.dXd0_2firbCM"64IeU[RWeNY>mfJD!k6RgUEO18F&,jYWmI/ETD)h0;4m7NRr>qA?C2qFA1TL
%*M$k\^)<JFZ]@V1HKRfCR$o#fqt8h0SM.I]7j#DAqL3PFq3.)ka(rf7dH*<6G=P^n?Kfd<?ggaL^)NWQ1&<Uf*#Yl^f"7^%S[JFD
%YO^pZl=T\Hjo"O[DesU[g;qG8m;"Xuc0no,r:F[s>&sN)f5%8[HN.0[nbLqIHVY0QfB*mfNGFU*m*rFUPAe[QQa_9bYJ$p[4M%sU
%]tSfp4u<&og@hkN]@ZbjoT$'pp)hhf=)T2:V/EGs]m[VBIIcUA`c^gaIW4-:B.'n?Gs6E?qHU>>G5]hVMr!^FT&-$J^?0/@Y.kq?
%^V0WG^%^pjf%65$rq5lLea&"FNW$-I<aCdBf\:^,<ZBdX*7Jfdp=RThpb;E72*4RhN'4K4:WK'?h)cI#20S<Rf_ZJG2TP)S998Hs
%c%iQVKf?EEUT')/2o^/^VJ]'bVr-@XlQ9n$DSN]pEF\EN8)IEP=kgNm\oI3<NAn!0_],5.G+[UC[dPP]ln:#?^<thbE$*U!`kB"7
%n_/0_G2/s<B)M'uh]H3QGl-n'1SU#lY7B.'`]#g@NUa+uLWe`F\\sO&kFR]-gmDk8-DorR=!ueoo"BnWT6do%8)G).'<AOSXbjM_
%k2/j[ku=9M[-kUo2\Y*&hV>cXn87`.D=#1(:&AqhgWfVVp"ms6l<<fAMm6%Uk.=C[dnO9e2fA&k5(:#pmsP*g3AIf1EDlYYkK2J>
%7lD_2^*MHscYkDB-f7%5gRYF,oWCu=IHG=/rK3G&Cj0[moB=s]q/GToXZKIP&%<=$%pQMD)SOO&mlmnS>E(:Nn^d^%hOCL,K3*Cu
%;qLJ4::Zdlfr<Zfhqh$iD/XWqek',7qQfYRg!j?qjmLXGcMOCq3VVK8c&QYLCCbS!d7s#mqY6Q6qXU1m[JJA(O)+,1#OUc<-gK"L
%eB=2Jdsc)^9[=eDr\V;DdoY#e?U+?C9ukXTIp;lYR>d3QhFZ5_dCnVTWBX(JoN+PHoppdqalWsDPRaX%EIDPKRCX!iq8BYM]/HoE
%QKlRJn[dbVfG*otEU\3q?!dQ^R[*I3NCeE!Ze1R>k<HYDDf=2JafX]oPM_ZrDlAMH[0("5`"t:L^:[LIDXNAXQsP-4^+Sl!4n<1g
%@06+DIst;Q^#R-)PBW38qX)OCIGK9pXf$O2>0fn1h<^X'N>jU5k3&q;f@)5`VD5KBQuBHO3d^J\gjSM-QcJgYh"7%`olBH+h/&.]
%mC2`DR(Ko&X\1%M*o_p$o]bUE[sh-@\ZKc4VX&*XZ?`nL`nu(>ps;6rT@<f<^"^k]lfj&*l0-7lREF[@eT>\Fr@iZ)\9fV%d_&&:
%n*f&#\_2<'@V4c]8<q9JrC8[4R_+>2X]K]_W12PnT!g_ip&(S?[hfftoPVEIppb]ulckV4\,5jZc(/BmeD,='s0Zu^FgnVtVsZJj
%mX3c<s5i[urHIjWn(lcf\GNqQgUR-+rS#`4LJNl?GO*Z*m_-4?Rih)^IsQ2#hWOXZE!5SL[LU@G:JK+&h7r]sqsj[.iUZ:4qSQMF
%pUc4RoYL1BUZi#i:>L0!2L`@9?u(8\E45W-j5-l;Iq[(ZDS=emIC&NWHhQcbqX3-u4*t>tdMGFNF&*=1mbF_N8#(-\h8U^_1LGKX
%;pEY2ja6T7rVi#VmEJ/e$eO5VD(W8_kIlQs/%+*Ja#CW:$\r)\XY!;/h.nUfq3r%UY;`JfMliKGmiL>1o<n>^p@N8!n9K*Dou#%>
%Id^-VB&`5'1Z^ha>+0\rDB=5=hK\bXgZ1csEKWMVJ%W#>h0]'CGOaPMrL<2FV-C-phHQG>R/"8bqEnbAl"g-oqde\W5(@UV3BHtH
%mFCXF-bJ]hHV_[`54kH'IK+$[.ENMX&^OL-H/*W$/`6LX&U%]1mDeM;jk]S??_:&KlM@i6Xh"7?Y?n^!Z`eGZX3W0LcL1:,]D1@\
%)`.?gq>QqEKpCAuLUU>#4sb72_oU6-Q#DS-2cf$XI<9Vrrl3@NkPhCYMsA@MUDNo<BB7$(3e!X2H*KMH-XMg/Y9kpkX0:sQ\t?_:
%ErYt$-Yq2UZ.EcPVI+5DI9N$uHrV3?R!e"&h7rPrF_6$_eP:U@oC^AJqWR7U%o6hE^L)?WicY"GmCdZ6l)n-<[X7JrqY&S$f/F@a
%CC#IeAp.haopb^TqT,/op:\GSp@62,Dc\:+Dnk,]He*F#q;n&l\+&q\k.?ZrUjlaR\$k2?ln71Fs6A0/kPbD>`:=/<h7NLAWS71?
%@I)D)]o@l\NU"O]p"'#"NQo@f+0-K!A(8cDgWsLj5JDTO[f!E%WpN"7\fLaV;LQ=YWTA$3r`jgKHL^UT\8\&ZDg*SD9^&=J0CoEX
%n&qU>rC6b>dcO$tre'l&p%JttfBPk!X"QAL^Kb(#>i/^lh<a"RI+e#8qs2a+A$%+B1ceF!l<Eu5cI]07NMO1o^]%Z9WLkH5\U+#K
%>dHSCqrP84r2m6;o&f>ep>5KF[A0O$g0%Ptqn08elVr)YMhBcrX4-t3]C!:L\"u#1DRWrbT)$_oGeOU+oW)87/:CgYR,%^f\?g:$
%0-+hHmB&%c]"QtP_g;4*iX=XmG9iXS,B*>Fm6A+e[_Mi65(%Bi@m%GEY]rNO*&OOV]:E0/f'b_HXPS&B2t,Q_Pf_)3iTf.[08H+?
%l4`IFS,[NTI!`2!+6cg+XkA,!qmbM]I+(7D9jHRNs51LV\3E?d?!n?4P<,;CqB*sp8*tckYhbg4V'e7)@k!*C3Y>X%+\khP2!"_>
%+WumqKo^@j77^dJ`m>M(kjmlNs#&)u.q56YI)#eC%Ho?=U=W$G,a=)4T;cq"Ee88<YB*_<Dsi`Erik-n<ZWE!e5E&_d&Zj=fXZrN
%>-G9_3i"tr>FidMAR1<l=1ZTgrVABBC8n9\Q*)er9eR6?k?tLFW#mp1rWj:,QOD&ZWm^>jq\VKWcThH2rM_c*LeNtBqN;(,p^a!(
%pag>n0)]!K5!,1?&BSIP<hWYXB_J>??7k5&:*m<Mrcq?Dc<?H7Dig7+X8H#A;iWEXCc=AaoX(QRl,ta"<b$YkfP:=r$W'/"Of%Ab
%,,_9-l>CH7p&7/=fDh:#k`&nt/Z@M+Mnu6>]@G!$)6_.Jp+G!ecJY$rN??Y0CIsC5^X]nP\kTVBCioCFEL67E%!"$?K-3a\E?+O6
%FZkBc_lMToD_Y(D924GGSXd%`N"D$iC\$kbs8LU^s!K9(=W#>N1<u`-P15Gu<o\g*S[.msQ3mTQ]N,:GWFW"4U-T-YW)Ud0Qf.i'
%AKk6V<7I//#-9X=_L,YB#EZHL7&u1[^8>/p.L\n>+UFA-?<'g!UmB.KVC%S8Q2/dq8>Q_[U_Gcu8ON^.)upPA(t1rT0*dA:cW_D4
%/o/RE+!Jd>*@BX:U95AB:^hn0;a==,gQV`q$N;ZCPG).t7boXd)"JOE-nlg!d./rF(0:Wp:an\@/[^G[)PbQ?%.klH>g-?G)+#PW
%K5_+f$]%N1aXUJ4/H_7MTgu-s_[mu%W+aT^b7&`(V6c'!)]+$*Ro%=%*?\P-!-(2'PWGu=0qd%$=9_;O!&$]]$IA&"5]':4Z_nqo
%k9J6&FHDea_*f9Vom*8#4U26q1mOjK8A?puKK2,j,(R.&@/\QeRe!-diDOJt`];ela*KMD-iFX&`=-G.Clso8.YEodJG)%2XgQC=
%Bq9uU8>!n2KKT_U10.B*!^`eb]6o_U0Tfa<lEL"^4HrH[4<KEfVIIsf7oO"Z+;6f>-FL7Gc9<ne:MYe#Ne'S[_TI4$Jj:`_GoQs+
%NYVt`7,spQKWnca?kRA+\.lu6Vb25BkAc;TGs.<M)!HWPTpSe/CYm!edKPGL-EifhZiJ+n/!5Q=&j`Q'8:n0<gJakY5l6RfpOFZ\
%[L!3HTJIbl*FUNe%'L.,A-<1ahhg@8]NX;h!#j3:L?JmcU'?/<5!lJdZ(?,"N'UtR!)\Et%$<:Sj-2UsT2:rWSra0LLlQ/2EiC>C
%eKV#e!3e?L\05#(.\:S\3oi!sOOi!'1$[%="?9-5[H2fZe1l&`1dX(%S-d!LR8>HnL4DKp15(Op!0J``Vo4kZGh%d"6s%Zd!ig2@
%C%[>2d5Y&<!)A<ui+S*40->_s#"Q"=]^.HY6$Im#^_n4:F?>-cD+`EM$)^'8K](#DrpfQU5[[7F9O1a:6qGX=fp%rB\WQM/cB-RA
%C;mtfdTe"n"JDe-2UK)g<g%FLGYO)a<#7]b"Ihc"Pp-Z^i<W@&f%';E8HYZo&WZPu)2JFCkR%l`-o1mG/JU1F"O2Q)"0J5mgQYHP
%7FM]5A=/*Z4D5T5;IBp8TV407"P;+SlLD,:"rG%T&Bt6Edj,A3PVA<B&iN67J2d`s=W1o>L.E\B.4u4D+[BO6Nt@q,QQUsUoEtjg
%[#4;iX_E6CEAUEOdSs"Pj=!JZ5kd@jdr^b0oq4/R7"(6FU%U`U!%hkAbt$5<J9<SKTnJ:(iWW10C^#q&M*n6OOZ[%RI=MuF"\kg9
%>.EPUlL>U+5fef7>(Jb"/1FZ-\,Z\mSru2i9rFR*Zm;6g2]tEp'd,PoF/5Q9A-5XhXG"FSVc<rq,>le6AM<jp$@`0GNd<G<IO&SZ
%;#j;qKK(8m7lb#f/0InuK3;$l7YP"]fWM/a9oG\/oP'Le)-TM1kpK%MG9)YVI7$Y2j5(?[<(tj+Wi+%!QlGAoSK#fb8#I_.Kapt;
%WR(m=MT=Z[0EEAkUea[7&XGF<S/;K:%O)!%#ot<E#dOUV9no%7#ZO4M[*l<c3XoT82,&BGY!WpHf#8k([)C&4/ZjchUFNLCoS*&j
%9S0]&Q/!(E3NL$>$DIi/=P>;mHCDJHDelj+>%th^+2<Gq#@%Lm%XmOm"\Smo;1(p5*H,p=W#_5_ZK@qGIAhrHJbd^h8I:UEMP[RK
%bf0Y9kbu5u_C?ZLJB4I]",f[Fg%4@Sd0Ya`@@kS#Bp7Ata4Y63eEoom>S$0!>t7k>b+GGPFbOPqkI"S.'h\bC^Um+Hf=8a`hg<'*
%p$^f.Z/1l+HMG^,c\q[@[K\\Vrc3"ucDpSb#iWljRbL<pi.-eKV]&(]5O/3Bmc>,o(H6;ej`+b(<PlU1h;VggE;:f;/u+(KBS$c?
%&OD!'c/jb4+f5De[jDkrK>m#sK4rtf@-A;B/<F!F#uM;h:3SWo4IL`_ngmmu1'rc7O!;LsTT5i](BK@$&/L!+@'%JM$"q.U8`Gd;
%@_4H_K#Q*)8pR!(+Miq/SeQk]9*ELY0h51rLo/`+H/CXuCS2"g\`a(^S7,`k==OZ^M<,''[WXsX9haE9ePQCDI`&Dbb%3:a%0-M#
%K4R'iqcM13=Nho^"[aEL!MXPH!M[K!k`QT7+"%Zo-uZ*;+`U>E+dUapL<sfB#b:s\.je^g!L]&NJgHTpHq'JG?g</DipO.T0G+/M
%O!UAIPKCI.eL@/t8J'DH8nU\h,kF8BEXO"s?9q%)<^3ng"B6r;!#Q'ZTUrp)CsNZdUA,J6DuqMS6n(a-d!Ck*7>2H;U.?%g-u;X*
%OQ$%K5pm,9(C<SaPD'-,N)rk]8qKSA)#-S99Ub`Qb,P_e2V'+M-9u5VZi2ek<reLW6AJ2._".qNJh0L;WFr(me\o#:*YZU?!0Y:[
%=bn7s?SKES-mUkBK6X3-M`.<:#9f.>-AWcqga*LSJ29BHN?g%X#bC3bCm,J_5>If&$4:73o)Z^GeW?P(M!Kfg<Pi<f>6/iFN5\o%
%!Q8OaQ&-'H*0%%/%TGa0"610t1:AHuMi_1;Zok>ka3"WA;=KEN78sfuN=Q#[k+0m<.>AGR;-]"2BEeaa@Oa*<X@8eGPS0RAm_D8c
%/KAED#Ln9+"Gde,J/E6oJESC#H"JR<J3hXP!):oO!1'Jkf%C6mP[t.8!/g"l^4Z)jM"@m7KVT)Kd?Sg1B:&g;#`)%"d!5[JWCR"_
%2+0;_=<>U"mS77@K4sM$`3#^=&.B^Ra=r98%*9%nggjG_ZIhT2BmDHP$@i*gK!?*(VY)L"VDda;JS[iDn=c(A@O[JW!sG?5J7PQ]
%"[*G"[25)A&<fQh`.!GOA--G8LA$8>O!'mr#+1Q/8eQ"KhG=Hshe!U7.RO$PJ0G'sXV!pb#Ydmm6fSB1a.Z,&XO*T8-4EnM8XPW`
%)$EhY6U3r44sKZ>7S5t)5S-_#,XWD-!?iU/$sk3$%N;%8'fo#N8YIX]Lk2jj+eDI46(gtb#is-%"6(1hBP(3l7dRg!Lf_77:^QX2
%'&H1nW=pmf&V)cJ=s;8,Ar'2bai#BU@#/jnjoZ1d246pg+kl)j)'L+1%$<0C.$P809?RFT'e$pq"XG<X8B_SZ'5QWO5[4@b!AJ1B
%5UEdr&.pBqP\5eQ;-?Gs__M9,=YMU1P^LH$-<Sh7-K#%a6_)JaR"/(k!-EGgE(!K"hF@[1>QtILdK%Zl47.!@g/-0`km</c!FVQ(
%"@0NM'#kWd.2`?tm0E\)`7Zid;5##0@M/!4I^dcJ>'WX4Lm=8p9>enJ$[jMQO\9@70`n;`TH@R<!E:A.2'j_ld&)>.aImJs>":n/
%M4odQcohq<qOlcq/0=D($sh6$Dlm19('-aT5<o?.K<5(Q[W+a1;iX>i5U$t?,Y/JfijE_iBNB;$E-t'8Z'RN#DJ6ruJT_.\1oMjV
%P>GiKnqHFJTj=A("7iYh2Q/PCZuD,2'-'9#h5u8]*-+'l-E)hRSTcJl!26I:Ad]iV,\&D3/K#'lUo^t#d.')%/(V8:gn3jgds+E"
%1g2\AfV$<IfG;LR4h-R7TZTkQejo?!-SqD)/Z.Gk=Q)PmUVI48IhM$6kUfcNI:-'2UO\5R#``:eL'$\]HA_o2:XG"F3+>]VBP8oK
%3ekp0I3Ym!.KU$qVI?_C<m[mD%+Q=)ae2B@X:(gc-"61q"0i,1:J?!@K^sf;"W[UtmpXIk,db$3PP?Pi"HNGFS2-Hq,+[.`:`j\;
%#3'GV"[aY4eJi6KL)Po@YE9sAQW$$camWoi5<-n!8MZXpClfq5)`A+$7\U/oTuc@&XTXP9.GgJKc1I/)s*g%0M4m]?.>'6])3b4#
%f\iDPpH`f7dM$LT$[!lH%S0(-d1Nu^1_ctCGY-lA5dP?7.L=acT.Q9uJkB*I]YldYD"-@&6-MpmUl(I_O9DqJ81@,k\1eYNS#F\W
%nTiRA"uQ5p5]W"M<s5FT@#2[X)Sb+\^b)67+djLhCHJ[Z\tqMqn1d9[%4sJ8d*Nf<;k]Yq6NiuP/G#?5(biC[YoP)7(M(/<.lom#
%!>T&n]p])28,j'5i/e0BF=X>EIr5e96G,$=iC!7Q"X>B=Pu/^?$;.tR)Q%,n$[AG7UET^gANI[;7)k.@"G"EWC$)`mO>&5q,`iEK
%'?3F-0QL!!UtOdFataK6bF.K)bO%H+#m:P?*a21'&\.=J$B5N[V.nqLR6'AnRmmF1ap][k(QR`!n`9tlZV*o4(JHc@*e'%P-RhWC
%APntTV-jVGh3-Q.==BjrOdBYF+N<^ua?Ona;rFVa5N5%3KZAQKje?8PO3NoI%OM?97A$faNOX-MD@iE`&=q[9q6Mtm+LY7J.=2f/
%C6/B4P1:^YrRk^=fU@tnC'D@j8ZAE)@n)[HCm%?R_+g)gSOfWe(@P7&6A+;,F;8^:cjrC11gi]Fj'0'(3s&jlfc$#AGhAo[<?OEY
%-5)B+_!45-^fI^D7=uZ!Uk2$abp5ca4oos?/&SD(O\hT3Hg1I]9>a#ING,'VW-.(da;>`MjqGXiop"+<<0c<R9_KIdo&gj^Sd*(,
%#nJ;Qa2+r$1;&`O&IlfD*kp8^Mg44-",Nc_RRmrW!E`%?(2J#eBW-9cJi_0[[="-L$nMfdGSIA*JU%R'8fY2>!iAQCZ,S.K5tBu*
%m_e_e"@YBZ4cM`W$;I$N%7:7[KbPj]<l+RM7%I"\1(B2^4!Bh=3nV4RXb.'T_AXdr7f`6?%+):V^Xu6WU3#]0*op--#.^/mL$_c?
%pQDR`TYNn!,`0MfSdqLd5p6?2?5Ou6m3<maQ7k;DB#dkJ-n@&_'5P7<.N/o%<[68p7,uZ\ZI6bO(5:1+-=14T)]_mH0LbMtFY-5]
%TKEi`"UCkuOt1B;Y-d^rG9ih0L>#,58ec"ZL%chCrs2XO3S<j9=rZl@arqe42Jc%oXc7r>fa4I32T@+!D6ODr9W>(;5t6i-DlAF/
%?C&?2#5LdO+c>f]kWVjN07oZ^!*[Fc&eCNB/cuKU%S_f,*rNR&mPndA:Zis40<$<.m0r>H"_`mK#_WQfRX,>NLZGo^;tS]J'g4=e
%5cpf\-ajgc'OD`8eX*LHJ?`dL)DVRJ6GDqiQ&>+i6UP[oH>81e.7UJ9SK%PG&u6[:qE;B5Vr@LqR+7IH>i#u\qCYVt!o\\u(iOh5
%P7qCnfLXng1tWN\(G'9/$_Ks'XGAu4C)*e0g&-Z[oItHm0E?Xc),,(>\HNO_T'F*:>90<o'V5rrR)-f>L1k?*$Bpq&OFTee&GW6p
%F#r'JjT#BQX^D6n_2uSKXLe#m-k"`BCY6!;%I+:1@:L9NGF:1<XpN6f$P`u89'N)G4fpB/H$,,(I19.GnaTRN]ZlnD!r'N%?fP-'
%`0l$`$4%U\;A!S`%O79A&Z'-r%"?1"/Arg@%CHude;;HB8h!H_/8KODf7CU^ZE=X11U&IX0ej6B"L-g7Q\A$G5?"KLWFOue"S[J!
%JJ)aS,,>eb8Ig(D;DBSkA9c9Ekp'r9PR*-lif\p<$)3rSJlPl$&u`+4[Xk+\G!WB#+?#F;,hRpL\IT.])6uD"0K)LS-OCkgI#-re
%(?]o@X@#,^UF_TZGRY+=nZO4X39(pc\\LE[/<`pRW_i'@K4?M85A&geMC1%`LB0XS9[SC[+uPL/#\[!XgBK_h`ZYmr5a5hlO,09<
%EWoeVm;n$jf%F5/`k[<q_T0k*C8!b]cQo$<UA#/p>KmCNi=5^(^reqD"0,u//IigQdYl943=a!_+W&q!_lBE;3M\%;T-".#0;7;4
%XA#EZX9TKaambc/F#)]CSldJYE[Ea`gscI8F4J@SkVNaMN6lNt"-[2B`l^hRJq0-V?K\sp!5b,R"cgX@[M7b"d+^:I,[a_J"OT]F
%;c^sg'A?4j*r+D,?\S3EAKT*Z;]L`5>tk^(hN/Q`M:!t!7YrC1&>E]%nrrhG_Oa"b6gj4RO7!Q=e*PW@Z+q4uLHH3cl3]7/0WQWD
%LYt%h4`TZ4H\R4+@$`;T(#F1W9!,sAd\ln.MM1L_lrI,J)IQMS0-:^7EM*(*a:Ml*NUJ$0KM&"8O+Cq)?Juq&:Z*HdA1lMY>/RU8
%4NWO*EWPNZJh*+:Ktf@Y@L)s&oEu&CY.O&QUa7;J_K$DeWVg-)$S=K_ON\O_7+g3#%l_q@'e%iC/p^'Fm;!R4gX8`P3;JeJ<"]Se
%oYXl?]@Ma4Jj6W\LY/2O]*\CR3MZp%.&;^>`^7K93nU^7.[[K<_?]tf1d"p2o-30;p'%L$(`OhT39]A@`U_bU9(h1BLG7+Q)!2MR
%k-#!c$[=`\15s3kR;Fi(,ukq]q6SAu@$9BsZkt21XUafPiI13Zmt7*"^IE.?>c'Fo-hN/=M\CD(+'i=q66=,@&IS&sQD9(tB(&3V
%j5U.[*hNat3ZW<Si)g.h.Wg3fN=g#3_%AcR(0_F?YTQ:^=BEBM1[kSTR]<\.<AIKPfh>6h1.@J2S6iE-'NM%gTDJX;i@`&LXrO_Q
%9$Pij87E-6#8!BWb\nmX=.sHGXiSIHWd-1[b\7G<ablWi1?UD=A&U5<YVa"^Y:i[[YMtbkOM(KpG4V=DHEp-pA^(sC7?Id[>Qt>O
%Q6\bR[>=Xq.XJVP6c!>$4</O^caDA\WQ$XSBI%CtJ.rE#+VnOn9$_ead+Jdlj=qN2%D9]?/O?&I"3VM"jp4B-'kl-S#Nh[*d,Q&q
%K$'Z#7'iIJ7Tj7"4D`o-mN';5$?l3\c8/$9q^UPp"e?]sS&j^NnQ,r-gqXmN`B<Le=IR97!>nB=7lqbQ@\^mI!<MY:bg:n`o;cj:
%9a(2:Q*U861XSZ\A+QoYNZD9)JB=kM#OW:4:=+T=G]@5JMOhb$<'#=?U4)E2",U)'D>:6gKHNnF??rL=puga++KO9%eoOY>,%sGe
%kTa\Y_aCh@V`TURIkKq`D)Ba>:oePbnE`Q1)iT;),aO';KK4)j+g`M3PQ2u!#W^h,$8H5p0d6o2>VFdo2MLmr$4n.8;8NbaQFM_b
%-#M:L%>uoX*s&SG_4tB,^dr!@;k+,R3JI?1LC#C92cGXX:PTcMF@D*!aU&Q/k(AV#fmf@Ok[IL>+!-pTXpmWa'"5Zq!-c*O5.H=a
%PD0NV[uLGC61o'h5U&m$P3kC6&FnG*YG)MaC^VO"O3.hJ:P/t`b&;]JJoj&+<J3d8!tI<oLL#WWFo`)cJR',-eu<&;$p3^,^#7jl
%aCkh%kp2iP-!d`b&;^c,]1fS95\iQiMC'37nNod3"p8Ou-S:9LH5A+[8/QH:XgV+S4K.Mo"hhZ[AJJHO9^+Wc.;%]^a/RWTP)Qu0
%DcS.'oY,hD+Uh3:\a/qRhhT2c6_<>i=Ej9MTL>Fe2RC^2rCpag5)IIRXg+sa[j0l2].DBu#oB!$8qj0d"9nij5sQecn-CsE&g0RH
%j1UQF>t@YB%`)\DQKg<^.7+=_mBI4+^rjHIXG=uN_ol.M)#t+021]rRd?(F*6MGo,"W<J^?XeN(,(gA$iXRN\IXjup^')8B"l^du
%`$S*.TqmIo&c6fmS0knX-Ve4sK1jn'LEdZ@=0U2MYp+i21bP"&N)uJ%SDOT`W/,#F.cn_s@$?ibFN5]tc!QAGM1YLYVt)O5JQZ&8
%%BM@*YE?oAXPO0O5`t!DoIo`BD_)=gfojH"c>MQDM,CQEN^7ms'7!tFcnVFGq6:GBX'MBo*59A.j>B?+!Kbl'1A>EhW5*C03&%OE
%5Mo"O9an-k`H3<A@QB,.@M)D@'e:,-(?eZUi1/,P/!AhoN5-VaE+>I[Hn?U<)W5oi-CA4#BaCTYJlr_'_*$L2hSm`OQ4U\Yj:35\
%-q#=C;"t_7%1nCBU@lI4:K%kmas:m;rQ6j!/Yk75n)NCH'mX<NChR*%6#PZF,V2XR-osBKHrra(Y),JA,5D:kYm629G\E)a8N8O;
%MbYbD-*2c23ZO^72+8H",90+d0PRP<88?Ap6>a[W`%mb_>I]KZ^^QLMd`8S'0GaC4^=a!1oWP(<QdJb"UkBBDV6r?amj):g^J7/o
%CL\=pQ[&&3Q/LQdbETepS$_&0P(LYlWAc.r'C0l.#JKM"GQ7GsB(IT&,mo^JPot@UD!m42arfV=`>D!3MMYFG6W(9KP1ct_AohPT
%.ij[`4K"A_E_%UEV3@Re\,Q=Z>8a'3]R@\s/!<fq$DJbig4Re1`,u1<$LC=qAhc^S?T9IO?j4HlXB6*R&S_&_nd;AKT/d#U9I"%"
%&RQpeeb7@A)clo1_9nXeh4[2HDi#i4Wrf\,/j-5,DK5_\jGc/Q&_d7r=u:U[*)ba&UX5p^)nIc:m:uhN9jmXRYi,k07U-TsX<HZV
%*5_t(CcJF(#MoSDO<O%dB$Wsr%**7I.Dk8Y&@G3C+EN`3%Ma'k3\S=e!f4A@:;eiF$1f1c=MtSAfa]/s<@E*lT>@JCeb-*cP(b&^
%q"ZhNL1=&sXGicXR(knj6DHgYI.k^L#0/$e"H\u'K:=/8*@Lr!'^%f=(='S/82!>%%Wr0"*l`L2SN[UTY'h&_A59To(tP1WMY0?4
%+!UYZ7s\t(NX"1@,f1-:I^DT62+T>0.P9;!o4pN`)Y"?]&M,Lf#tRe[-aQ'MX6'0$!$#!*1_J'E`L$]lA\lJPi/ecms3j[P7KM;+
%!XpNnO9/ZnDk9@&6:b)$=Da_EB(K=4Ws6#d@:Y'H7R1!iZTFZo!lI9*&i->jDb::g@r9;5"L`j0>&j1O">4()[.>8m)?G>!`W/Q>
%\6-1.:c\]Y"R5^^ZnsP[JVOfX=@0Q-dL)q5@XDb_hhmNq16<\JVdWJ6dQh5#)k1B2P!QCHE?OG3B):T%Q5P67^(>qEU+7-cEbNf^
%,Y>b0.>b<8U<_2u'R;Fd^//e<DOB6o(YnNnOTH/O(7t&<bZ)X1n6%K&J<@o$!7PDrSf!!_HNo6EJ-dil,,@.c[Lk!VqV^-Pq4WQ'
%)fRR<.*F"A[h"5'.4k%UUTP9`a#F5IHo[M=)UUh"_d6KZk)aTl.E=)NAgDa1f[uh$dg;lQ&h;-_VQEZY=%"Mi6Yo_5,B>#B#+d-"
%dkt]'c:-qO-%]t&>H*I,$7@\b-H>Hb6$jdM&R@(.YgGo+oT08%"'8Qd3@"\o1@V=]Lr="<%708tJ`*HqN=?5S,Z0B<L)W9Ep1*kD
%.H3+'4p'ttfXD/AOJU:u#d%rgb$Z1]Jcs`d,XB0N*_m%pU]?=#KLjN&O.+.@c+!jN<Q43GAag<qRt."Id9m+<b3DBM"Ct%gIT\?`
%kn5uN6/?8M/Mo=C@IjdlB=KQ:<Dh!0Te]4afRP0D,LXQP_Eq0)ck-:R7#/!0en+3!YVr<6ON;_n3@L\^7XaccLWmS(Lr%M9E!T"V
%\Y+&+@g$WD^sYc?-,P92d-3h)&=S5Ba&Q*9%^G33EW%BOdpNO%@Pr2X+djAj'>]#S4=-p;Y@>:o(LBtTeQ0IWn:E/+?@+C5@%sCh
%miUD`='):Y]M"%0i"q%oM"g-u2+%L%Hd7+t<%/)CYb119363C$194Xta+=2NFHW$j!(/;4)7-(<rE53EdblaF_EJPpYfEj*fJMs[
%Ge2Kl/Pqp2(+go@%)`KEAd!]G43j]<#D8s0Q=1DL&_WGA"s7:^ZYtdTnM8aH>P];UJJTrG07up7W@jMB$NT*V9Y%I9CIl3po]m=@
%YCul<'>qBZOD,#]I0mR$M*C/L@>d]1;TkrpRLLPd,d;(r-l5"*3L(Y*j3kPuEi"=g:PfMm,,8BldY.\biN9a4[$QB^SA:*30qYX:
%/3`hmZ[im53ZO_-A1DgVT'j$0?-9,`Xq),Y,41O:n1YOenPKESKY[o?+AQsScEnpAKfGp%?HT5)QBE^8jHYBcc%&h\1n$Y0hn]WO
%<Ruj6$.t>irNbTcQ0OI%P`V#0*Um)2??i(!=L/8c0fV<N<,fZ`g4fGqf#83d8Q9.ATao*G'd7t09Sh.a5#=L,db)ZpUPd&N/=N?"
%9*>='d@3rV\;O%Bnh11L@5B^-+Js/fIVdq[bn]3b%G$;:[7"cpOLQbMAV+UYLl)>SWQs;W6n2KhOMJfZLC!<;0[hCW2Nl&snfFma
%M$Z'EOTsW<5r-C"!AX-e4A?B6TKQbL^gY(bf./,::H?]2ib(T+#TY-,$_r@C1XO/e*ufR?+tsPfPX>9h_`k49l,R=dKNne5Am$k*
%3)%Oe#jC:[Br;P+\:RWap`UOpE7&W\(kU-(!(!:)a:K25<&]C3-96SoO:gH6!D0ta!JunsrmV&U6cQ1*RMd=001Nst'p[^7:!<kc
%iQ9DZ-kKHaLN"=@T?)5N&0\?FL.5&f*mr,X#V2]+4LFUZ%qq)-i>>k.AEMR",i6<s+&Y,(;ae8mdk$"dFlYC+N\37@6f]Nd^1WEn
%E+F`.74JB`')pQ0`Yq+:%m[3S@13X&##<Ka+ADE/;:.)9`;dMt\FdP]4ZpY#26"/UIj%@O(B8OOn8&M)L&MGIiF+"okB_oiA%;#/
%=Ea:.P_.=+@F[j>pe6>+QT2kf*-%u)P&iZPP!uIfQon.WKumcH+c@d+Z&W1(&0m;)FbMYC:20oCPoNrE^c^$W%$:uZ>TS[\',BMe
%C@&'[YU[pF/jKu40SYBX&\<RF;KK]oig2d:jIl$.<,r"b,k$cr<=9]obnn8A-7#^`T$Y*UAi[XoOn7RI7WA4\)b+cbP5em#FC@TF
%mnf#fbC4+uP@WrGaodf.&BRl3af[2sq3*d9;b5EXq$`pc+E?6eLTG-Gdh`Q!<J9b\X$kqO+<K$`M1Q=BZ>0]RNCa?[BI2s''T$CP
%](h@lc@ME=%>pi'2<6b2#nsu%5g:!Z4.)N]/g\n-M\s%%mQ_VGJTG6rK"+!]3(mm(39QSpmV"#4oD-Y'2<daHV(Nc8U")tJ0gs:d
%9SKDs;PVWRa+YT(dY'GIE9W)a1#aKloRP2Ko,L$I"n"WqU;S%kg]>I>"_)F9?H63oD/'dBbSH'HAe,GS*nNMnL#aT+]l&s;(FVah
%Ko)ab4orb,BF4O*ats)%6F%9uBOLtr3C4l!+n$$=2t)lk$lS#%*Z&7XWl-?s@efE;Rca\K6)q,%KZ>6c0I0!"``IQgec=sa3'Q>A
%&qkI.X,k^PmHED>;NfEMD4tc#a(Z**mg,4iEZ0T9NmsVq5toSH1e?(Qm;tXHFJ>G4Pm%U`@LMLU5=U9e,#09t7YqDASC@NNAT@BM
%`N[iZJhnZ3^P(Mb`KqK[F\n3V7(Js78Mde&KghEOBFY:LhCP0323ERaC=$K>UdiRZa<F)_!mqJ;CC#u"!Z9R/E6QZ17P#/nFc(n^
%ip1ObM6+H#'(\@";)4tWdM(0[U=<-C.69"fEE%3Nq7oeNDZH&AWm?[QV_4W+=[lc^K:oEq6qha-T>;-d83*7DOgC%E6j'4q8]n$h
%EX87b_iP6K>"*,]U++'<)g!Cp0E^gmiXr7s`ZfYa/[^d0b2!fJCfI[5I,$)^2qY^5B+f9BFhO<j<N#"c*1,$_ZI6*cml*2FVhk@C
%3]uV03Nt,AWp453=N)/8ebC<f.2rD-qC*(7XDofR-V*+mLH<uhg&p=E]L^uC&]b7kpM!J+1(/^?^;OLA5R:Blq("Ql,q2]Gi+Rj=
%?THK0Ld!Cj-BpqAkQQ!$BC.eUY9F<D5)^I:?Q*kn>Rp$+c;L&4+`P8j2/g2/`'LU-(1?rOQclTmVnDD+hP\rkP27fg3HD:F2Yf'[
%%3coBLhoC'`$:Hj*mF?\=n7.]b8e#3p02lL.]KhRV,+?)YcC%qn,bp%)u45N/JWh=e^XD^X"jp[&8aOJhka_W&JmPK7Lkh>%6+SF
%L]'u9CX)/lY_0;sWVll2LV^)]?p<N1A&)ne=o61n:T`B%gO!8Rl:Z!_5k7DXhE?7\CDn?GG_6/DQ-06M>G>mgOgY7!9*A^U@s,FO
%Jsm,-;X@c7dTHQ%&k6N3-,KouTENN/k<2/1MgQ4!AA/mu%U0Ei/eL:]W!_!)BmcoU!YP^RD<7u]g>rsOQrMXa1%CHC2W3_hpFpiK
%c-8?b&l55:p/3%p&FB@$#`hG3gp1KrAg&P-TP-n>jh0ir7X1tJ9(4]oFo_RUU!a@VN,f!Q>7CZk;G@1di&1Rk8n+eVjH.ncg^q_$
%$YC'RZ[d:rpI,E7@RXtq%,n/-)4Q3pnGo#B1GN#nSWX#X:1d8HA.[aIncZSS?t`5Y:;hf2=/fRu_?'+^.81mNHe9dfbQS>CKqMWO
%i>b;1_I\m,b4G"Q=H83&!/NuhZ'\b2&1Ri+U+da0]muLp+I3R$"KmO):_%2me-ls\="8qqPtGX_79LN'R.n\-\;,d'/.G8q6Bs7X
%i&,<HW1lL77?ZV`Yk^U.A#2RUQu&m<%lm4b&]^6&DBXp[!6**u-7%]Tc8I'?*1,g?('5.W[TMlQh0FZ`3]dcZ8<iVacOAcs7Q(E6
%=toON,f-5YT>#t/_Rs*+6g@@hjd%#**KX.6bK^>jRn0,+Ytcb.\dcYe\:7HGne]p]8OiOHLA=MJ;/cO?nUqXX7;.@OJ2C^nAAc!;
%X;Dsi+79u$JESWDKh9bR4X,+]?BR#s:.V&jZ%LF*.J%ZC1`?k^nd7^('shGjN*TTKY22ub1=V]h,%$b]$TruG(E!<._YYpI,t?_k
%$=(?+Cd6p5QQQ?$;g]`BkY-j>@Dtl)(mZG]P-rT`LoBA:Lu4V4X$F`NBK;m\EHqL8J`m:I)VY;rR7J@%aI21Ilt>.ZBE^Od2P(O,
%%QbKM6s<9'q%tfg6f*-t<;?eT_#,'C*1j)qMD^b)7rFc=-Q)B(e3^VHTM"3<PCbC/MrAtSQj^tXOY5t$+p0'6lb+\I=h0RN$"3@Y
%'P.9lEu.?;!Pq-\7-33@"O_F/.s^/_:fG<-bf>f4@cg3"C^G?&9?TT/>*^Odfjp-G&`h3$J66FsAlV%)id71]g^FDLF'Us6KHW;3
%Zl3(r'X*rrFL_=2mF;&AN`1&#afDB<n+FP_`dd`?Do:=HGe<p+#l.e!'b&"i9W81Cb.r-$GB&Y#?\G5V&`+^>91XXD.>C5MOu[8H
%#)>jm>7.olF!*HqKG=WQKOg.!_&NMW(,ei`IiX(cZY8DUcC7/m.(3F(Hd!Ul?k*bodB$:K2g&a'Z^(qhWP]^CO"4up+8VrS%\U]D
%FZN=gFpTJgJ?Lf6#si)AO.27;.dmO<I]KP!J.NGe3!Ba\91U(i5sWg,nnC%76lCQAU_/n@@oIae^ptc[0o,7e,5i)]:0B:WDoehX
%1fZe54_DK=?s-F)_4R7XJ@ffmT'U)Q.8V,L"udRh9u/)_DcH:+'7!mG*?jm=IuB/rkb"L@KHNl)]R1.'n!+SanHeS<=Gi$C*tOHp
%dD:hM7bJn]I*.QWSn.I5#k?`g(n1e%_T=MG<?lAn7Yl`_.`fon:n2'KKf$;M!lC"V0N^lRN@#("bpQqgQ+0L&R)/lp/KNcc*ipO;
%nl!7/_FC;WBQoji=gi7%k(F?J5Qp1\q[6t`1uaa^PLR_smnlGN+C#mgA;Z@)@ITkPd\A8P8TY<EJMSkn"G9\C;Fnek"jXZcJu@4B
%0W]:rdGAZ[F8X@4@d%M$o8_Be:,1J".5<erFGn8U!pcD]6Je/O$H>tpg*unTM=0h]d*og+HLn>X::EI\pXWbgYS2JeipS$lr+At.
%lT^s:?bb"<+3eV<HsV63nmlb>e_8$_>//P=X/skkHbGCJR0^F00jjDBgJ*E>CkViWeFs'"1dAJGc2HM^_sl^X7o[U__nYDV#8<e#
%%f+"Tq74%cf`/R,Gd-e3XS$b;*>eB5=RW!T'dTS8=Zb*u0)h(I3!&?,>1bn\F3;XtBb5;//*h\$(]q0qKqN*jk;u'hUK5fQ^1mjE
%70GT/mWZ*+@VSUVp4Zq!36n[dli_nXU<NWI0bikoBC9u8rIV`)HsrcHSM?W\8n@@6U1/p7'$@i1s,JSg%FN%q/F*i^@9_mC^coV@
%q:(?-12Ji2g*ci+k,a;lX[AuVQS=^)JZ#&iF<k83=Rrg$Z>7e[O3uG%ON8]KMN0a;0d)b,AtEob@)!2f%&0X?;'er2RDK>On?b!6
%hS=1[\Cq+li=Qo)S&3\cPY35$Hff&JqW=<7a#bP%aN:EVYFU`"VU8iA[6nC/fXQ3Rbh):T[$M#m91+PSLn"Q^R0WAl6dR=/R[E"H
%iWD!0#bSIWJBSG;A4<H@d03VpC+e$lF$#6&!6f^nk3%n^:u]d$bg46tj>?"dT8O$EPJ6O-!VR?2F:E[OKW]uFWN`3/)9H\hYsW<r
%F4$9%EuL,\3)=tuIi7X.m(e_Br#1GK(ai^!=]RN!7XB^ZdEmi<l&CIXS_#06j)'UFI#Qo)1:tW?o)lf`0LW8q#nAJYb61>e['R&+
%E3ucfkb`si+@1pHJNe++UBOY.j`4+8:/5OhJodOJl&ag3$-nXjS1T4-Bq^>JJ51gR,r+:>oH,'11s>F1&*q'IRNnWE9[u/A=S&&K
%Q=Gc'C]VW)NY-aCAtoh:$9_9R+?-F?j,QhGX<VI5!0dLRJk@Gfn<OH<7W;5BO4c-NA/#@V.%qo+(AVo0k,F#f'EOlO8GTl/#@A`u
%62jBW#1I:(90oKf*%EgZ6*(>(8"`\`GeS>*iS[Go%oGS'nr:?UO;QS_?ZXT1^n]5kBZt.#b(f!j'dc+!<lAr6*98*IL:GEq%Dcb5
%g>LB61.6([=p?',XpABI*IpI$VOb`%FqPeLUdCStNFuoUQ6pJan(k6X!gasQ`,VebOCSTk#o9o;=p^#Ia$dmiClp!LPI+no[)e:1
%a+Y5=-$Gnj>-8J&g@Op*pEm'l&efe;foX:S8[Qt**R?(F2K3>$I!F^/_87*UWGq/OJM^T"Y6rTq>U8[1&JnAe3)&+$*bdsicljV-
%iA"[`CoiK4?ml6c#M0@qki1N".<JE!?3U6^.<-@0,"0e03J??AouKptH,UJW!2q%eLV]J,P^ljCLt-m0g(8LM50T."@i'Z%VkKL@
%7oWUdafnr*1O#RfL<YB[?ii=i7u<7+O9uVj+<4B5@N7$EK%"2=P+uQ[_Z(4hBoUGFGEM,-GIb.3Hg_CkNY"Y3ba0CEm0HFb]o:qR
%T*RbB#=Ae_KF@GmS5`3rN':nbLn9K'7Z@BnHN['0]J^+s9/_KT:no!hL:#LfEY:nPB37FO6NnXc&Lj)[#hp+q5p2b.)H7"Up5>G<
%;TBLtZ4M'$=E\tbm87u,6UbP!p>KGK<>L+0QNl<bcqFLjUl+OMCC4Gf?k/c3$nr[]bejEEFQe-8Dk(`-Fr7;,$0Vq7-km'^>cPd5
%H<u;M7LVtBPc1DKEB;_YAFN&F'gOV18LeDTUJ;UjFJhO^BEBS$!(tB>O9&aPM"i$0na'qi&=YuUH7FP4D_SG-Y#0gXC3I6aF?D5[
%1b^<XcpB)_Lf,kP*mI3k_\*W=W=em@qeQ@/,]+GmKtLO5@ou.3ka[<"=c$Q:l+iG$%L!ko(`!\57SGdB7O^$tFQcYJYMd&!J[lU>
%a>0Aa:dP;KJ6t1+1/8=8Y9'#E6hi\CbpSYjNi/eU!Ao_;L.!.D[:=Of>Y[]Y-&rk'0V"7F@2)E^o]?_2PX'==EF7\o3t>.S)!26J
%f:4-mn84Fo'Cc>t86@@^.fBoE<&%$>-q7*^#bfLR0&4-K2,@N!""MBpU8u7pHi2E&)=dp&QaZa#R5/pM=DW^Wi1V^IJ4pBYY^$q9
%&g.^M:kHN9=]^K(6HfU;.D!\FNGr$7pi$te/3!i61mEJC3m0g/5^=UMQqpFn+L<>_qubD@IO@g2.0d\==<F6";Lei\?-f^7+U!BG
%6T@t1=J-WN!\1]Pd8Um'U$/`qR/piZ4ZA:.7-+QP..a<V8@cbBQjkTbWYkZU3=`R5^YY@+-9j"G6^#5Z=/>lF!"IU(bjQRFJJiO.
%1B3gTTRlo$Q'Qs%$A0RtPm%`AGf7aaYmb.L^]=t_D'!+?0S7TWp]2/*-ff.-!>b5LP_1dQK.R=@J;2o"B1m@^pu9LbM;'[+E>5L\
%O2-.QbK#.dUpB]PH(S9HJXjB0+8i;FBRh5k1(Tlhq$?ZrGp96E'u8q8h_<5*JB6m>i'J@b)5LgLa#f(cAH^#o#[p(-?jr]i[i^2Q
%a@\XR$nu$,D?a;TdU2!tU)_QC6nn5/[L5VG!k/nqq-]PM!OFdtbnot8[:Y&.XZ2ArrUf"VOCk2!as%;9Ye+kt7q@kn\/`EqQ*C9l
%"CaUZr2M<0JLr!!hE`b'7:71-T`jEF#skrWk$s2N=ij0r6fq&%c%4&HcP6g'H!T,:%0<>>^OYD()+q+mguT0QQrV^b1%S>E2W4T6
%K@hY<-U%XBM%h*MU1:^T\.rK0<#2)l"SkhQ>m+iVY%YI%6t^k==X2;i\]c@,1*>_Q6H\-X+iel%AEM_:F)D.:Di=].EngGD4ZR#B
%!&/Od#p#cIkY+N'ODmS6!RJ=e-%-AsJ[6T[*MsO_!,jYEhr`l8+PLOi(R%9R0W`CG.LVOR<$[d)(99!`6HDVJTs;f$/g*.WM14Sh
%GQoG&:f&d0MBtgAPdM2I>eDT`@g+<O*Mk.nb?2]1f;5/[R%--[CkB`K,>8]=!=E">K@;$+"Xg-eqY4e<'CN4AEQpoukZO`7D%$!;
%ltTJU4eR@KWjKle6qE:e,'C+j<@.).H-s]dVd1(._(gt,&Gq$21ROgf<Jf"Q1WWf].Y*CZE!EHn9bs57F,+k_9bo0$bnS2B`.$[t
%$o0@^CW8`gKcnn2&DAR"pjgMU@DuY]$q^kUJBMCX0M6<NV/hWM3B#i@(Ek[=/h7enJn$S>j>r<R!sN>AkD&L%^T9.,#%ne<9n'_4
%%"VDk,0#`I7'QJ[@3M-V^qfUnRDgIKAOmE*+U==n1R*DE*^\_4N0o\;U'T*Go'TdD(]uuOE!3]Qj@jsr00h'(*NR5T;jmr2#dRIi
%9>`2$7<jP,=:WYR!bTW;[9bCa*'k(%5AQONMZ=2/l`$+ok_3Df#p;=eL'S6C3O?Xa<tka)i6a*2b\*G@WXE4qE&lBP;&A[/N^M*G
%#Rr'[7kMfS#oFN>)l2."7j&%&a;^1K&qWH*a,i[NK=RGiSWEr7D/'qZpOAWh'>SFia+5/t!i;&^Bo?1L)dMnrc6.!0"7s&U*s6P:
%#1*$#mC^La2!E*HXVs/eK0;/Fg&L0GD&B!UGfTb)#gj2/)0IJs!sC69#\c:1r%..>Z9S[U+G<D7R2S0&32hG0'^^Rh$au5mQ2qo_
%?K:5!U(g9IPYOk''p)=C3A;OThGc].PLCIELOF&2[%AD2J^'!2[U1IG"3A2TOK^J_BCBuE0BFSfY(2ah-'Wp";aFITVF'&A=33PJ
%!5,&1"d#T0"PJbJ#3G4dOA^9?YS^Bk;JG2>-TKaZS/]N3B0I^@K,f67k6+T9SZsC;DndE*rVh"-1Q\-MMFVT@k%&(?=pSb86"1Cs
%P'Q@LSe3N*EU$G$#!VR[`YuT##%9^7qgBNc!BN:g@.tF'240>PnTgd^PaNN/**EQs&8dABQJEa>9jl.I-]9qn_30QoG=9Y-*'A7X
%B"&Gb@oM2?c/LPsAemt<G?LGjaA6h)qf7H5->?$e5f,sj)6L5!%DhHX+l4gZdpOqP$4m)V%+>bCJu>->-XWlP$T]Db%D?q>N5o=b
%a!D$B*UA1rVZEs+OtI9e@2b#A*0SY[iO^rn'%eJ+0n6,B7VN]/BfL%r_^GuSQ]KQ;j=ij:c_d?q4Ze:kbC@ZKS$!<B$elFfS<`>7
%A*Ya9`ViR>[W>IRC'hG5Uc<Q+n*S,XAG"bS5TPW1!8o\cG_)Z>TLD&fe>?W@X\pi_NdFXuH18$H5Mr&EOsNfMf`AoTZBG--/%r)g
%GaISkmIJ$lV%@KKJo/_(/sf29OgZ"+,!=]Dnc3rZ]XaIa;=r121H/j+J%B7;b66fPN3>?8k,a#)PRl^]CK;;<5m8MR>Cr5i-I2Vk
%]sHoZ568I$U,%1Rh*^Q.2(msV]@8..ff9F^)5X#Xotk#:V,()5%&L/%\&f2XLFE,eS?sU5l`$Q*:*!ZeTZZt!V1t>+lp]/7%r)%E
%MO3#jIu*+XC.<doUA,;=Io3/DW"9Q+/<IBKKU-QjFtbN`p0:0nZ=U;8Jp?`blmMj%G8`1Fb(sq6fV@aD7_tr<?196<*XqkJiknKc
%0pKe8q#<R*[.6]cKK#s<eX]W*+<@TSqNcZ45[o6*;q7_oS])-i1k_Oi`'Ds2rF`_\JouYs%<N\kf#Z7\<GO&g]fAIM.2#qX9'#gY
%-H?2MLMUT9a>*S]#U641o<)[OQV/V:e\^"tNd/.[!QZf9**cLoaH4OSWU.s_NMo7^Rn,65CT.X3nU]=-`th"XnW_RtW=4*9Za'L=
%":o<JqGRrQW$iPCpCP(m.7IP-<Yl%mjKq.3dI<(T+BPHqg)nB!;q2,jBK+G!$o*'ad0$=2fh[,OBLCd1M)_&]Vh?XoeGgt4+62,U
%.;E3iXiD!\LT(1/;0`L?G_n\jAY&#;6FK3O=[_Q`8l%>j!j5`;=]i[dKG!;gRR-1`!OmNXpAkT9Pr1rJdXWJMpg:!`Q2,!+:QDI@
%SJ&DNpNn9Ir3,ELo.a3X$rQJMOU1Uf6ECV/SEY_''4G;]hcW$oG>2?#XUqGc(9g>^-/p[qKS)Q=;dj63>#),X+?YL\jRn`FTjm3.
%*FqF4ncmB.a?#gAXG-47+j)GhOY-L);H#S=Z9\P[,[OhXM/5_hLG\nk.o?NW>Tt.S(DC7M"AuUt,TqjK=n;nj-*0DBC8A.)cnOJI
%KLYAa+UUaBPX&'sa?Q43'+XOQACctq6*^tt0aDG'=$f(49c8jGgnrS2#!p4U@!T"nm+`3dI\3.g+T@?gH*3mW35iSh/7fq85R8Mn
%D*#d)m)UhNm'-jl]KcrJa[hP_e1lDD"<mqG8449<+cI,HAeF=2.-<K+]II**E-Y2OrQUrlLd=EZ6C"T"=q+?jG=pd@M!pRacZkDd
%2(;GUki43H>mRF[[`%/D:KN3@9.XsenJI>1?'l9f/le$=2s520RQq4A&s&M^/Fg6J#<X,(%BTkiN:2js>k6lC>&WCTO7TXh-8b7F
%<j5gZD$nQg+hDjBb8,UtOE?<\q,/XjOL?f#7&1q1PSr-_V?O6:c;faF3,:gr`tj1pOO:t5nl"/F6UPSLeD(7=A$;Vh_@W2cT2_-Y
%q;_t02)7KAZMAqe8:7=$#\$*/V1`ff'1!G6.:Z]f1kJ=k+g4d@8eT_N1sK3e,tQTq,J4KhTX"h\(j&WK.1IS0jI*Qr%)<.9%4a)s
%%m@:1.]6o=(^c_4W5BOJi%MdjM#&V)90^_idYX93[iB%)'f]c+Ap6*Fn!GlBRoM#G]6P3(G#onPX"(Hf#`U,:0+)mseCXt(l'eZO
%=;c.f6UL:W=6Un]*R[^J<$:1,GbF6OG/DuR#WtU(4+VUK$n*+d(uQV1/nA]J5ra""&8Q?[6a2'66Ye[n8Quo^dB%bc_K,^=C`"%#
%^-(<^Lt3h"Nch20,,L.U=Xe:(JAbm#)Cko%"(".qbiY2"T?mJc]$6kTR$SNF3KZgP2$9HZOo<lUqrRKZaC-R_h!6d?2HT/4ip2_V
%fbD6`JH*o!<<*22;'I8knjm5iNr^MHD?OduJ]Q(b9V`Uf:d[hdQ(iPkjWIE90o?ApT9$H\CcS/U2o_0K&r1=^k"FUl(q?ONb6GR`
%L1*P$XV=LmZd)(&60?Ks`W;5".Ve4&8H'Q"f5+%AE3`nU&[LTYnM<%+'Yrg\r#1E3F!+:X,GhV63bHI8"U$iQOSi`T&;UU6[3X9\
%UDa`CE,E`id6<ZBfLdlU#aiqmlZ:En5V\+s:jG3<$%Ot6]]fJ18&2'k"63LMbJ8KtH1Uj=ZS?!@q6QB,5Wg-'d=um0TEtQrP-G<d
%(kFNF-DZ`^pUmUGAGcL*+]f!nM+-99,ihLQ\RbjL1^?R'o]k*30mI)i5_e3+.RYH\`+itp/MYSkKJM8L9M=Me*s8C%TSe_S*Kk4b
%a;Q],8^/AR4TL<EH117nL0S^Z7;)d:[g`lgA;)/O)T0,mLSTfX=ITMXKXf_O[MoA1^t_b-,i4<R9VOX8"S0T+L1h5%HOGJYBO1jM
%&p=+IiuO.&$L*4tG#ZK(!eM:6/L/]YQ\lr.Fr[MWLq/$c`$`tTmh+7b#M(+A)!B=iXu(CK^97D(3C<+BdX3LB7jo>\1F'P;W2L:B
%g`Km&Kd6i5[.HuACs'eLGDFEH/.OtSKolEtbbEa'KFgWT]&GD7E*92_Ag3//FW+!tr3lYs"EC/`q@M4_84VjjKd*%1RHqC%UaD(+
%BNu#"1Goq?iq+_g:22-382usL_FiNqBWjBE@,eKbKMeF//.BQ\aBg)OU_2I3-2K6O=Z/E@gf1<K%cbKP-[J/b5CS7$_"d;OOA6tZ
%S4:dCfUkYjoE?/YT7rbe4n77,W#$L%BcCB\^Km!\8:r%s6']>h-nBjV],X(%9a%a(23AKR%"U<.\O+7LWKT+]a(u%footQ'U33E=
%&?.H-5mE-(5`u]3b^ljH#A(d><!Le4C*i;c16=A.j\@SM?;g&9kiNL`)I*<"F3+$#!+rQC4pK4H-#5]I>!@W/IK%_o0,J?VpqBV(
%lu<C;jWqZ-Gl_n7>R;kM_e!CuD'c=fR*XD,gli>idSF$[;AP8Pd8"r;?<WNY=eD*L,`$paIPN$;)'V[N"jBg+$MR$@3h?CORoYD$
%A.[le*:[:j'u49G`Go9>,17ih4P(7sEOR8KfZUmm0R[O28iF<`&ge4b+i(D:/ft2DAP"8,De8$!fE,p=a;1]f.t2O)Q3YXfQ<_\5
%;o>\R_b9I5V`4I5ZaPE^L!g*OWYNoJ,JmPRObSi@l,Jt3YBrg=5u(lL-:6?M"'O5@0CiR?6&:bi>06hjGE"l-,#H\ci(PG8M<GNa
%(]"*']m"=Y,g4Ul^C0ZUcKD(dm/(A.*XrQG0G:.STHKpWcBL^Ajeu%`R\'<IZ^uAXF7U&o;P[lWB1=tKeQip#_CjTeD7t:%hmMA2
%.X?(O;X<$I]0=J_V6;!0=F!@t'/c[?*nA4S_tjWN9R,=FT'I5"T"#.W^(3e4!_l:"?]WFAVh?LZ&9l7][40gfYD5sm390D&G0.>U
%Rlg0n1lEJ5WShs!_-jT-DXP#+hRj'H(Nqt.](kTfm[isA&tXrE;[Es==Fkmf<=;/rd\7tr$I-+rdY4!\<MfJifO;0<<&kTKl6^fJ
%ii:kb&o]ub?-G_U2j_*J[QEcmX&-.r?M5m(m$Q1Qq[GL+.fK$_>n>[386:[%pQ'PqX3S)kWDs22b1t3UQInhR?COjGb'B>X&rVb?
%LjLB6T?<uuns'Z%;EjtPEc'8NqS"&;c$grdY[?ZF=a+-)Z%NOslmnd'9<i7Y>l<n.2p%No!dnG._tM&fQb%O`@qt\$1h!:cr=7Mr
%i<d4ZEf)C;0=K&1lBPr$4$/oJ]\B&:CU$[P9q)\eD0FDP6Kui[lbc8D&kH2beV.U-;q*-dCFHf`m3G+D]0KUl'u&42b>NE=`sUk[
%VUV<tO\eJkk+*5h]i:HXF+)_C\k/,WRq@;5EdQHOb`L#ZPaT[)krQqsGBY<^6V:rt(q'15gb-=ohFrIch(pMq=o:^eKr,X?DG.]h
%=a0?,TY`p'nEO!J5Faqc7PbJq8"c'0.ER6-ViV1Dq=j'unKkD2a5m.YCFSNF''T8jn%bZ]'k&RNID!d70a&N&'lKHmZ9;6J,kSRC
%$U`E:AN[l<l!cmIVWhR)`D+g8?.?$S`h_.,OTR'+\b04[jmSLYW97X0B*>HFkMh0_5J6/';hgOjHQJ_`\.RtmY+'E#KCHmBP7pf?
%18Qot3]U^XT@,>cK-I&&oB9E_2uUNnfuBbm?Y?.Sfl))PU9h&gHJ!B%)i`/A"!4b=bZoK]kW'CI#NO2t"0sihmlWXFRb%0mY3\)-
%&6Klo-chERo_OS;-YEL$C/s,N15@0RYnQ]$'SG6@L.19S$(m5,ar(7F($4@KFc]$>LIp#gqT?Z4JC!8hJZI3m=<Vkjf/,*HX0WbT
%lb%H8m<4+dqppuY"t\`6IHtWID[kL*=*Ds+IE"hPC#GSenHddgV*hEUShF^mDM1#pYdMh7ZVf[4,I5'obeZ5T<SQUJV?qlkmQ5"*
%0"JAnYJQ8UB>;qcLU5n.L,EUNf_)K7i]#S]qe&$'[\bk#J#_$r^[[-!R\P<0F7m+NpYqtLJ+]ke\6UL]]%N&0Y`Qe?ZYd_6'5r*T
%lRgu\`l0LcoPQTG/Ia;fm)F6b416*+1Yd*?`[>U#>1fdq%!Q*S[>\-JCg;bZjAn;rW/GCQ]e;(+EX=/V/aLt?gfV%+2FT7-Hs1;Q
%D=;/ILd3mi/iQq%r=U'0o#A8K95[;)G2^HPFhQ3mVmYFNL379=f(H95dPoaZq^4M9JY-q[;\P4,idnm`o"N*_$6<hg^8*aFPK%/1
%aKl^n2ds.3He,=(L??VtM7@?NG-MFGjX0lTY!S90R*PO#k>%DN0B7e'B4(-;foA4_mJZ^4Q7'pfY5amdoku*k)7nNKg_ThPST$aD
%If8Zen))m'Zn8p*J#5"qG3\`t]fluN1Go[W5i;(rjFRt.Dl@/0\Z4EGDN;r;g0q&D$soJD_9T*f$ZC94DM3pLB>=AaNO,hJL0&"p
%mgZHqU2;oWRj6C`G1`N!Ulk[HYVYV3_Ad6\)r]f-fe7i'o"2AS:oBp?H?\ZH&*.P^AC`O??oKo'3=crJDO=ls\ZYZlrRrUB72oLf
%3G3NW%?8YmE2V*o&MC5UrVDE^B4&VQUU)UtkKuT9b1tZnd)&+eCV0-ifL^1.g!6:4Q!GJE]CPWOn(uVMFj=Xdlr<.XlMQ(_Em/.1
%jL@a!2RXS>CucHm[[\h41X3!_>E0%6@NY'kEg-f(U[/+48-4(p.u=V,k[:RY/R&^m@#Gh3Z/ne82ORUQ;7;QJlXT""`%Ik<%+P,K
%QU;ZDpR$09S.,4N8j.'jA-``iMFF\,1HEuYDQWB/1tfP*RG/0r%4d.1+LJ].jlBsuY@1'C&!">!4/Udej)AJGL`baPY]d"7+g]SX
%jB,i2am\G6Lb+up;f3?d)*k[pG^T&/IeT;Zqe$>$Cub1gF;;pZ0um%U6gu7qR,5U.@)#iM1cH!bDlNda$t9&%6fru0QQ*d]JKVe[
%rO392VMR7hK7,=`[e4it3P]?)A)kah_UgVCh[+?:.kXo;SE`pfDb7@]RtIO.Wn8%%@h/76M3u?nIgqI&l^U%HNk\J4*ubq);4+<S
%l4%55hbrk'L.6s%3HdS*B?\K#(qS5a*GGet4M3H3TQmU&B;I:D]dum:mg+"&eaq7`OA:8MYjtAQF7-1q(h&GV1qdfIa^.Y0,U[GK
%)ik?VNEEa2E@]][F*?LOA'U'QOj`SthhZ(A-/;>ZYR;_]c/*ErG_ioSpHh?HR;).sW4:LI?+07X\@n"kCh;HSmmaU(k3Tr(cC>j4
%H7f$erPe/^\<?!%rOP5\X>t)X;8dQ<CQ;q8oURoG8Rd#>FqfO5D?L?ULSF2uMb>\2",47k]s,)r(.F1,F)E7<bje3\A34YRNGS.5
%lk^I^9n1htYQV.9C1O2C]?9"/U,Oj2)+s@.rfm(V`]i+sIS\g;hqIA'X;f9H/n^NQL]$d>-FTGEIClnX.qef?n)*]f5M2m/>WFT)
%A*W(7auT4.h_-t]S%3RD;%5S_40kBWE9"IE<NB9(T8Nooh'@k7DV/uK;%-uQ%Kf"3=oME,O<VLmHd.OhESOg&FJZgahXHg_kIRhp
%Yl/jU9AMbiZ,CB@'/6=J*nA:UHo]\$-+T@$HoX,POkb0nE=1`\*=)VZe8[j8ZW_+6floY3C]oRKV09u+?F("uP+2DJ)\LAE`uDa_
%I::aFY)C&$lL#N#.cHdM3L0*$&dn@`%JD`.3P05T\KSs1Rjn^\&J!43(l13/nDu&0=np(ALS\Gi:Tl^D\k6l(CMngNQa:%5,Jr,P
%Gf,lSYA6AhqETrlkPc'SBiR/,(T1:Se11'9]9liApi:8*Mr]U\+B<8[*ZRAo+[Z&F\fC1ZN;<0$/s+)tQ$18E??7>r*&mbk2BJCe
%N]2&?f6(A[g6]NZl0\ig.b-=ED,7#)4kOda0$<\<G8TUG(MeIsDftg.bfB>%V//Zjk=k?sF"k$h%riEF:*jr<=8!W>-p_qa2q0UM
%G<HOng)+KoX`X+^)bH%ff-R7ShJq6,Rg!Y:)g`'XmUN(0/^D)Y)tk9"DgD&$HPj$%2'uDk3Cp*iI<S&51ec=Sf6-2&.AY.i/'hZr
%NUIrcM91`Ga;]$`0[b1B]=N?c#PJ*7UKOMorrD+?BfqJ>#C=C[nfLGpZ^)0Vmmit51PLbQUqQ@b$a$GA\ED*c.SQX>Qr/B6fciN(
%cpm+h;rd1.rS)g#A%bi=oA.J[]bGGRHEmiK.uuuS')3C[N5*!HVZS%UA$&N46>pL0dYY`"[(fLh4-6c4!J?_(.M$/E1`*nnprpN*
%El\:d=8T5$\B6@\_-"i]eQ'o&RLQ%/QWk?s:hmP4qrrb!*RsrbXBL*'rMfFM+;=Qa040'Jq.Pi'+j'NiS+JA%F8stEp!hPk>JGZF
%]2pJ<'bZq*KJoNc;0#Vrf9YK8HZ%Rro?1s'-#P=-X0I(_Q.u#f'k@$c.]3oW%Ws#Q?h0T,\+laKJ*Qs2o+1&1qK;d_C#q*B.dsk:
%<4l?&(L6?HWA40+IWtWSV9Vl:e>H'63rRm:DZ<L[f`hFA@9%@Bc$.)agkdq+(QCo/QWdHab`oRfH2pQPUq5rVlheS7U>)CQ?-oKA
%(.Mqmij&u=Na1s!3<s+@12Td'gYc#*k2l<X]-SL$M!'c;SLAKP`#gs5i0SWD6OAl1>Kf+9PnLY,lb?)I0$2?;o!ca=O4ZQDdGt"^
%\WIt>c0)>brNH7lO8o0.r6rFXs8JX?r.echpq%2h$m#@bO8^fIp!Ng$#C?$Wqqll!l0nZ4s7IK5O8o1Os8GeYrUc`]l+b"3f9cO4
%Qad"kq59i_M!_+4?N9TlTDmSP-2ZpSs6p!YQ_.PNrqcBhn5"Q4q=EMDU]9HUq0.![D?'Aa5Q14u-FO$VqX`Ujb<Q!@s5g`&huETb
%s)#Hjhsc[#PFiCKY>Fq$RW\SZ("?uC8\om0YcYtAIC$$T6%<n=V8Y_MAX5Z0Qqk?U7J?F@HF:_6W>^>:j34p*WIqZGRl7j'D4#7R
%X@J`+dX.Ui[E<lmVY'/p;-B1]],WWk`j>MhV`f7XF,rqtk)^pBc3+.o'rY1"&#5u(!]Obh;V#t;&+)pXgJ#'oecm4:*4O&>2Tqrk
%Rbu3eLfEAN1A1'U#IXPF*P#,5:SiP/K([%;Hu7?sDOZXq:5t_OlSib2cWUp#lKbFQh`ir541'1j3pW`f<57uZ(C9/nG`!No/F*#e
%7X#$=mu6lF#sjVZBmRN^MQ][)@AkZ^H@O%hRf9D-'W7t'Wr<9(rtURia(k#lr@@U0Dq+"HXL/\=6D"V`n?cqgE&fYAi$PS[Ek4)>
%.bs/Z>:UNPU>2PE>99,sB`u%2DJ&L<>JJ:\2L6o%.G:2,.G'J%9,'6[nrkpbR*c5L8)CB<+@82/&FP4.'.3^_]P@Gb+h$:bBGPr(
%$r`+7)g`k((Y\?7Bst-p::'@;&75e?jR8E;M)Uu;3R(lDhDLZ.NTH.aZRD;8.5!'O_-otEa=:e]R=@CkP4V%]4.PrN5Zb"bb#O`G
%KIlA!`'hgL"YQe!nM1NVB<?$;]`$T71FS7ioCfD&0.k#(HbIj-ZL5bY<uHC9bZ__e#s+rT3H)Og<PjT.=]a9[H.fC.9@j&J5Bu<8
%Rmege,eH%pnebUa*mrJI7N6^?;*$g\WoA"*WOjdXZ(b@<HP0Vng@hARkWfX6Va\hVeYBkeLE5/='08U:rYfOmFpYKd(ImV_ZM<a$
%cDFP6[o7ZI.%ogUJJsKlE((R)f#LYChpp7gQe-,uXl]Lr9"S&W3pY('W>4tO-!dN6O:.asU]2F):FMM4"51B#grqM."\"^Q=0.Lb
%>m<bFf,:f#<]DO$Q(W:]BU`*\j84Va(AmblU]H88qe(G\4#Z2DGVqpDIqEGUiWBC1JNYfL2\)_XfJD/Q2Xp9?eqn*lr"a!Y44-`6
%'9)\/=h"?OOR(=kkS`&>2N.8"Bt9g3r%JB-d'!RK\'<U\<og!C#]ko$=!&<)"_-uQ"K)$q-+6%fi[Lh,cqKs%GE2cU\ZNi+rL/LV
%k"LLt'11JK!g6Ocl,n+SlX@Jqs#fGgV66!KNgt>/)N`"VM;+jVSGcjnoo<)[-Z0=($MVMXQb%[d,GZUi9.+GqWKG4Y16lRGT/q&Q
%N8C'`B8T]\N`U4f^@$iQ_8aUrDt^e%fs5[sDL)tO$aX]]__fKDr$dKie4>tr&cBR,P?=mk$8I="ac>*!PF1m'@eSbEc'6C.UJp9X
%Tatis#PTo^TVUZ-Xc\3>?SDas_UYbB/T&!Og"gE9V'W%K*]a'*0aUQY#M`aL%O%cENVN?1ICXP4J'`gn7OD=/@__lik'rg.-U@WB
%JGSu49:sE1cQ4ac_2"WM6Gn@D&)r+6/2:rh)E:T#k(l8Gl6]pa09\;gIWLm-P-$+g>j<flm\gE9-L:of`_;0RV<Eak'4S`8&h)&2
%/SiK%Q#G9bJ&'ZsT)'R)SRfF3Xrc-DDiM&E394_A?`E<;bS]ZC*c1d<dGGbP%fg3#Nt"^a9d3RX9R=i?LUG'b[WlkmX5ohODSi!h
%'IouJf1QQ")&".'hJnal\P;&kgP#I`[nGOAj"W'6SfuHZ0n2h%oU@d;[\k*%FOMf6ll>aEek<1bcsmDK+O`I/'(KGc\E%At4;NB<
%Wt2_-C2@L3+W+;gS"?&786U^RSu?0G^<![o5`JpoM95.6i.^V!4O''Z'dEoEo=>f^(sJ=$O>0jGB?_i8aF5>.j-'!<pVp)Uh'YSu
%m)c+P>P]YqS.lr:[dS)]-Dh\;Z7m&!"l^>/es"bebj7%8aIF)9+rGl9r.Z1e%:.)@@AP"Pk/'e'Vf"+SP.I0GWL6!cdhR6@b2^r3
%W^M1MAFiH]\jPaoH7[Nu6[72KQh"&L;&EtABg&QZ9MLc`F!,^HFEEgbD`Nn-Jg*4m`A.ejg#t98.6H96LCNATo%"H6olOYt:Y&ii
%VWrYE&i<0#<aE0JRBe7"\<LBg5H6;/;]/6(lc1VXR6!p\eufn&:[1kH"UC2D,L/"XA+;R=Fp3NcjA?`'dYUCK>/3qp4,DJp[.\(`
%Wu0JaK*p\p?e-Tpp.tJVU[S'.50Jg:U<.5hI`'EpZQ!>SD%bD6gfH$NWij6gFC'hr]&"bWoUP(+4jLn%a?g0HlbaSro1o/$Fp60$
%&q^[&N8\$6@&I5'8m%A8K?tqs'$?Wh(6_-mI^,5L4&Oh@AQJ1VG!kCVZ:ESd<ODIUDVRJ9lUT:7UA":(7K&%N8VS)sLuZZ-^]_;q
%YpWI%MErX#DqN!Ud+*RYr>&oSpbDH"fmBgs)'ah4rc-V0kTqS<WnWg*A!qB:GopbMmDI85fQUus//P0YDQd&+\AE43W)%$N\B_Aj
%Uok,\]n5[Obsi&8;+q4:gcaQ\7h:#1C%.@0/tYACmJhRjs7p]T!_tQ6&SB6:a8!o)"SUnG)H9T.)Ea'"R4;Nk-t4n>29UW*@IZpJ
%PadUsijO)J^,%K?2GD+d."\WnCF^#RGoW8VRr/_hiC*i5HM,+i(cF[a;acaG"l<ilp`P_>L!t]N0`a,63B7X>G&PVUYpD2/&4nF_
%*:2!C`_`hbTHsTQPjL;K_ktYHO>+,aYKlAg)@BJrloSbtpQ0anqdJ(j[\o'%OPO)3F_sU)nQa`\c.EH4\1f^FLp63db@51]1GEQU
%WGXZFdG.LD(^PW\Jg's3F0r?Z=X8rjkRh%R#gD7r10EOt=-bQq\u0QRYL-Zs9@,OP<336p8a&=&"g5;Epj%`0B8G\]dkDIQ]7B)2
%?E:qLe2jS(bd^1?.BmNdAg\A.T!b]^$:d9ai)g0eAd[*+HZP1T$7,=t\sk^f5:.0"PS>cbA]cNe1gub/B/-m3o;Jn/o1d+2S<rmL
%Vu6^HrTL;2B>KgjP2NIIUG&\(?<CCJ_<a^Ae1Rd"`fpOY^DIs9]/4kd;-;SDdYqK]0X*G>AH*=LUG1kq@KHu*a>!i+4g%Sbi,<k*
%W>S<Gh=m^+eq@U;,V]\$l_VO!e#"Yh`D/"$0Rt$H8X^=>fZ$j;\U29H%j$)(?hhk,Sn&r8q6PPo.UjT=@(1r4pnR,KlnC5%4Tpk7
%RuN+<8Na'c6`]2LL+p.'e$=aM\#/j2ARZoY,/&uAI$"gei'D;_X?Beg1S*-UD>O"0!YGO)D#3UuOWkZh5FpJ<_iuLiVnk'dXhELS
%hs3cCr>Y*iB5F&#m?c:Nq;(D(X6oHs19Q@?/NN#2*8mI&!n1Dd.'$q4)V"'43d.0Z'SG'`;1#NUG`9h61nj:h6Y;6g!m?[6ClR5n
%[":7UD-ben*OB/1Qp.E!6FhhhC&Vhuet&7kR8"sLABC353_bp-?`LNlGG>[GBH*,O/r#f%oQ5KBEj\&HUIuLs38>+Q"/gGb[(lMV
%7'oB?lnYFPQBGd%Qn@I.G!4'WA]cFUhVRQgYOkqGA3OR'ZGGLdZhE\f^H\Z4@J'K%kr98[0H7e+D'T8=C@/c[cbd,DP$`#7)f:e@
%Um4FZa"]*SW'ReY2_3V<DYE?d8d!S6J_/HiHQt]C;543OBgmi1q7387^2taR43]#7PDU3h7aKR@90s>sh?ZTIK>9PKlo^/H]A[Xr
%B$>;gLe#oa+=:iY-VWpeLYsM#)RBRA)7WqPS"J@I%S6)IO("?'a6t-eh8c2H7lYEK!"B0Vr+o?aEFLe(h=fPgThi(eir8a[5C2N\
%)ak.]f_Ki&jR4h?-CCrF$9%M>2#Y,6!oGjUfP,)LNEDL@noJRdFn!d:8u!b)EV\`k,;NtNoT^D_Bj2jQDr3[>-TobI(mR*UCTt"`
%#BF?gSj2Fl8m4VQ.,sQiV&m[_j-q'ml]a+uhAHtiQB&FIMIti#HAT#]_:WJ__hZD.a"92C*tl/hThO^X/\GZl6dFOc5RCg<[7OLO
%L&YE#?G]#6;uMA!Rns2(dIK"nmGR=f-md9f<*d/%]\jsfhqD'lr,Ur8F/:T=(EfV@=mk,#Hp%Z:cPZG,qsrk90;kLgK&?a2LjBLN
%n$ki.O&\SYm\=BogAbcg)3U>F/"JOQS,/lF5VF7:A0'<bAs]h4\0[lt4e$9g+I,@h:D&O[19g\9)&4L_n6`8G7>&9K+1t_Xjq/P+
%!F1<]6Qa_=Z%?0$^fL^;$!:L])Mg:;TE>cLq\#YL/HU>#D/"GmXD/I5k*P355V!]]A=B4PblRMc!1Yb/F@.H0RgP4FRBKnVIrqo1
%"dD]VAdsXtbaPJpV?Vn"J.T#XH/pI).us%)]t;l,hWI0lkSXJX#(QEj-iT\3pB\dPhs@khgX-mY"t8U"<1Ah6#XI4/[5Q6ZXAcQ,
%TV%sdAf&CC1DdI#mShDpk>[[j8M@4"Gm52;$n3uum,.]:Oqd9-f!ud.`h*L5=N/N[go_LNi?1%Y4jA_64=hc)M*shiDFXqgXh:#e
%fOra/@KE#.X(.agjmM@C>%18FZTFX6:E4\N1]"5nR$<t+G=T?ek`/2+ggb^h1K2N112N_)_fX^"-`3%Pku9iu)VH6.(h(:MZ%=G3
%liD,-;E2+Mie"[J6[.<2!Z)1cYk%'9`+_7^(P5VpQ:deKrCRTpb>XQ?IQ>7+"IB?QH/BV&6=$Y/10k4!I&/JJ=h%qtcZha;qIm/k
%C.Aga=.-@'Eck+_%%.qeInJm99r:W&$>T0fSonKtO%s"ch,'qQC0U+,``[):b,'o`7KFu?_G-dZW(2KMk./t_.&Lm&jpW]`Jr1.u
%Lni0aCNRB^]#,5*WYg<TkTq_0)om0&a#tE..EGBEW_SUeX6<)O\<?"jc)t?uA(DBk\i?WG&9^""CqWUTN)P<0ig/XO\uaTchu6[K
%OS2<Z0J!B7Z)d:V9+iF3m@D,al?=N/2H\;HjJe%Y`;VuH3a_s]p=-Xr-#U0dW-?_QZtI>+*n.c2He:5nDlLi)ApI-uWK^[;hRCPr
%=sl]U4leP0+QD!DoJ(=`KU'3aR_4,-Y9/0ba#r/PN1p6[0;$#Cs#torGCX`>q!l4KJ8\hg?a#3$_[2"c4u7>.+F0UaZW2g_M;oQG
%fp.Ih`nng4^nb*l\!7'rBan_`.&(E=K"E(S.g@V\3cr(I4=%KB/!?Qqr[E#X<%aAL(8>eY$FpVf)Rr3f@U$AGW-TI,m:rJDVBO=G
%X&pB[ZuS#J<?n]08Qo^E5b^aS-Z]i=MlV-lfn"K^5rj+2NEU@;r0:OZju9)3MNULsSh5TiZocN7(6k#J27U-?.4a9.Yf#'6OD3Aj
%:2-m*cn<l.MHl0,Ho0KU)DMCDY*p_FJatd8(#i;A?pT(;dj=]7Gc?O'TdYbKl#\>_^[9EO;G-+bUjk-JDbRa0SQoGaJo]*NMZ,D`
%poMidqN:;!)RY_FqQpU_:3$<i*4,7s1ZiaDqCdBtQSYLaK)L=2R]Xo_JTHH%""*1\%u`)=P=D?D/^Urf"d$25%Q(<8RApfB#kYI$
%\K`Zf=Ko%`"@hRr>5'A5S",MUKemp3]qZdA;qMuoF[ChSA>rIN632r_S=g/.XEqeh'N%j39H-6J8X3Tk$$qbq5h"M-j17)qRplJg
%FGu<611t%7?^$umWqq98_m3#^,iK'a%6`>uG\+#Bq#Zh?4]JUNmk@/72;Ps4K37i+\X>BDYqp-7_UsoRT+f_fgsnreEqGa_*8]:r
%'uJLmBj;;$'n',"&f_pmFD]Oq7M[+5b=Ec%P1)=q-(2S^6EK%d\Rs4I!ctb?pJVU0.HRp0YV$%UGB)I\B)"eOJ4l<<gY?YllKgGH
%$7eahl%#WW$=S/D:(0h-kdaeGldXl^fm:g;o(C1F;t]Pf*V@FF1"11npQ+^'U//1S`sIMUpp>e/]XRM_C_QAijGI('<'V)7+qV]7
%i*(!#<o[ZKa")G)hU'J^;X6bK+DaqY9:HfITJ4Y>Hq'%j<V#8U,$gGCS$3.'XWkSPc5+b/D&(ag3m@)5V5D=XprZ:lQVnVUP5lU%
%^u'14rU9F$gWS4;_Q3=s?I2!?I``)BU>.p!PnVT[4/@:W`t`-jHjs[*C<Tm9K*"0RFou>D4jrf(N(Q+Wk8fkV/VEqCK4UHCi9]jD
%"D6BSFB@q0[6UMr=[i!];WtD/6;6j@N:9^C$Hcc=$"$%;4_<RmPVmfJr!pm+^PTBfrSG;\@o/J_11bDkfa25NK!K;j)#%o+&3]lO
%ITL/7,%nD^JJS(.'POY,M,.g+lisQsWcPfKR^h^RV[VrRSq*?;HQgP%^_(R&*2+=.g3Pp4X:G0(5YiO\8Q[E<Ob.,\\0SR`0V6c_
%fWq4RWhemE03sSOq;gmRFU`d(jd_gghme?b>sp.bOF!SX7;62o3sL1J_dSj)6jq+`3"kit/(NDfKVKP,E&CC%*f&D`;2ldH-7DK)
%]1GREXcZ1EG^Zmmff1O`P@E6mkgQ"W'M2fc"Y#OU5;Pio#SMdTE7BZK-khAVp=(Tn!b!G?F*347<t2hK_F>g^P$SD"cGeD/ib/-G
%r-*kqKhL)6e2&-'Xo;tZXAnuZoS'5&VJNE=4\HZaq+28m,8$9lb)\rQBL$"HreA`=@61)rH=DktnXjemC@keb3$[c2S7fT+='f+]
%#$cW(Q#luU^4,]'+5D:91PJ-;Rb/\b%d+mTmQj'BKV4H,'eP&h:@sDiEX46XaN[l?J-m9\8BekdL5odL`h7%kD!!WVMR9?[9cMG%
%nOa"tL?u][?r+@r:_L-P5_^gD#Z>B)i?Vk;8mNHcM&EKsq%&VC,>$!kP_`l&2R(WMQ,GN\7fbH9>,pC'K*>du[n1(7e&T1"%>SFK
%2bE[#N&B&763E/b=>I_1\a:Z&s.)nLo%S=o#jctfXE#c6mkIjHf^EEV6_A)ca/fI`9Qde9>1[>c[YI1XI+uf/VY^;S@[(8a.Vq-O
%o%FKRSN6UG_q@T2-(*7I@Lo&Q[oO:]=DHZU:e=VX6#<?>91'0"V?rT4'&i3?k"%=;^YC`;N7`5l>>"A=QB?d5T`U9aet+#p1aIVP
%lMA`aofIN6s7?e=(seTtndXV4ll"u8EUFW-T$O.>BpI^D3X1l'ce_r5o;ZB2NG!Ph-ffWa!aVp^)g_Tnh-4/JM$`'L.Xc+SK3(<<
%Dhi-c:j^*&De]NTKIHN<`0OPAbCNQRs(t.%K>9U](Q<c`Q'JN+H"=Um4Rr&4mj+?d0i<6QL<f\m!KSP2dk`=scBb%8OFBk*Q@@dN
%HbO>MUo\,/.N,7,(a6-SW,?#\'7g]Uq?h;]`Vm(li2[`57%I>Y"8+I;OArdt<A`/K3,d%'V0`;BD07(eF2lCY`#5lg<,kb!UrhXK
%W)-g8iX8oVdRAli@<>#Egf,fHTF):^I._`f+$B*[bNVT><[U5)#karM5D)3Ej/Osr@bb"9&eT(re-8CgqA<\@dTCKeO[,/jo^<c#
%+[>r>LVXs'.h8[GYh=BBnEQ,*2T0E)LgF_bJs6*70I(X=\eU"Col+h\GX6f?p.oB(,J%WUT5;;7=LMh62+)f$9X7:(3bL`f_0S#U
%U>"j9&`cXN#guoogKXIErJNZ?@JNK9<@<Nl)"rSc=in8l"^3(nc0Lka]kCf0L_:!T@-/$K'."EXF-J\ZYBm&rXCO<G6+a(qAj`2f
%=`V$1@]hH0$).S*`s;_26lJer67js%"nM-K/VBau-);^=CIqjgC$ffZ_8Fm[95G_S;u94;\UVKJNun0@:-E)fj4)W:Tq_:jQc[mJ
%YX]GS+6VR8/%rjmjCub+'V$R9jJIh!f0RcsP9qRf$!CkBrDGdVY;4Ylg8:68`[-o2*O6,+^6)6b]38QuX>b(GAKZ`=Ne:RZ3h_E"
%.&Ke-=N>6KYKCjkdT/LO9r26fbopW?efgBZQ7[EPqoi8%NCFn0>B5u\V25i86hkMVHOhOkM;MsW`E%5t0i!N9rhN>K'>%GT#I1K#
%P+9D]I^>?D=bJ\hg=r*qX`t@u:tC2NGt?6-QXJ;iZ<sV-@o/5oB3<Z\iTUT$Yn.'.@:<8lm0Chd`&WMIN$XcqA[a0QqJ["jQ4TBl
%%SjZ"lY>`a3E&q^Ik\ck/BO]@RJ?]uF7lt$jq^h6S[P.7Y]cqb2X$1dN15Nh%qH<?F)_/e]mfS[*e_co[XT3@kJhMkaSY[WUqm1S
%e^GY%hS3mLgr,9-3fF\="X''?=H'/n+;&RdH?4!<h7e3SP*`Qja;jPM>eLH1IFMuI%r>"(YD0I'#1^YVX;87!.6?sFRmmXd17aXq
%U8c-n^KA>BrNdT3R*DDG>"/XDEYPQ`]:bTAOM!Kn<4=_)@u9h'=`!6fZ(W#-H=$42D&bsKVbI;a?Kqi)%u[eL$o;DKRQ8fo#M@75
%eUZeEiFiO^Cm^ojTs/<%8M%sVW_3)1REj>C2?Pr3m!`N"c/t4B:D%0_4/"[+W^/0=_V3kZ`b\bN=l/G_0t-rUe%:RF=l3SMqM\aO
%h)&%8rop2#*lOE.NT6W2ErsQ1/>SBPqs,/A`;!9j?tEddBJN&8/l3B,IWbWQPYSFI"tV?(;*`n69Pjlt%&G'BhEuKt(dJc6gfHfl
%TSZedI(W83E\^&n?f2#WC$VafF-3BAX]l?7`QdsKBZ?2bRit1RVZ,%7b<1M0jb\WU-a&uLo&GGj;#Vs(:D.97Gn#D;!'GdtY_Z7G
%T^ar0hVf>Lfp%(tAZO'b<>C='"@c<I#`t*g(==uh>2aG#*f.7ci)<E;$^ON"4Z`GD>"-l-gH%`1eJ5NeNMOQ/bAV0`"dr"\3"qJl
%09WGPjCL0]HbS)BT(sL"4_&%$"K3!,*W])NACO!eb*U+!)o0h\HBho+W#H,hAE)r.#a`J'L,Ya;i(T`[%dIBcPfK5aUU`7L,(3H=
%[<S7qirO9iX>jVE<+SAF6-M(Ghou\#\rIYBf5tA7eSd4]f1lAYB9;\?k#6o0Tc7[_($E^CE4)Jc;S*"3*FP49kAD@8l^.2=d@30&
%9@"Hc5*b`#+%'_-s22hfOsWi$NB_@jiO4F1]8[uXBelS,>\Tn:\rh#6BY9ShP0t7BB)$Bu-j"O$[(RPP(del-V9c8P3k%EAKE@.Q
%8qi>9_PA,bXH'-qaPBEQW@GS"RSPc4#!sPk7Zt!bR=8(P,\]P<0t<K]@he<Li6:%3A.M'1:L4lQ-JTTF+"n\G8Y=?-3fd:MQfec<
%SV4j-Z9N6<G0M<E[Vf#LEK5MUD9nXfgnf;GjSsp,9ZmKG-JTrIHP(g`BE'NUBhZSsC?t38U;dc--.fTf@DQ2a[Shd0f#MJ^Dn%SH
%Fe$65TbnqmC?g_G^#N]_&0e./1O41RE5GnmD74"WY9F7K!A9oM&#W("PVu3KDkic:4-NcHlnC:,A,$2q9E8m<S]0+fhj?VdD*9U3
%01O%tg2A@E>)bUteT,ie:J5%0.csi/R,!J<HOI?co-Rb=_^U7-QY_S@PaqM"O3&D:KE8(7!9QlLCc.nrQ%qL",u4jmS:m<e9@eF`
%X1WoR;]W1`lVkgY^3kAkU%O)iLZAep3cc"QcTOUSJS]6"^k'U^`Ra<.>=s/*pu`<6$kK:Q&tm)i(KYUT##PY9"j@+j!nCs2U3L-9
%_r;D."1'Vm*]6k[/"@SZL08/b`!/)]H3p6VeURs<RlK*G&[ts\#OU<$qkaC#F=fMb"$;o9SZY67;Y*5&1Bjg$\-cl\+]dq_gZ-<P
%EF1qX#m[0hBd7OD:n9lE]n$M,Y`#4]bJngM0p>Lc'Q1dUD1@qdYB\Ss5>bdBNAuhMe\"e&%^XPTo-)ZuTU8]M`o2:`REQsXR0\d5
%HpmXB&I%h?R;c!j5H1sUU_"@\bKt),ggCG`pfnl\[fW\Xe,YsVgjoU[n4mVl;$bs7U5(5(bNbNaj@GZW]-iaf].&fAi`%9"R+4+6
%$fVR_#1V>>=PAO@p2sQOm9PhB#g"`!J?HMnqYJ$t4pYrM(qElCG:0Pa\G"`o.:VT3pWs3!UEXD.UIJu<l5igWN3MEn;Plm0UjKR-
%lL\rg1n6frA"N*n;P;o>1?Hj<"(d^/;A+.'dF;onK^V6bWJ[\TXI>#0S88F3;$1Lsp@"M.(n3c,jZ6r3'4Mk7'Sl%N:pGoqLs"31
%F()!/_Se=o-<**+[8a[AhPh"fNf*F1J6kE(@91!D8_t@gBpk(GS(*7)`[;A?qtG+^6<Beam.=9>7k4,fr6N(Qnls#k;EIU?RLF6*
%df\RnUAc*B?2=W+(Q'o9(J%7oPG!XH=EpCQIu8*PH6^]PW2"&ueU6Ne0B@4P&]JYP:35O:a1-f,161ihb*3KZU0;RA7aQ\O;'Q(^
%<-mhk^j=7?!_V>?8%?\e=V^2rQS5#]BW?l]Q[@C;)1\CZ_3@(0D_n)ma]ecLK+N5u_hkJNTkb;O176"jn-DPSpXLE1]76jk$48N5
%.XDJPFX7en;X-"ER8q+4KZ7UFZuRJ#C#o?i>U>@N9-4YM$g$T@<B"?maD0os,EiI`:ohtAY!?H>O*8C5_[Fq(8*WdFI\cC!-(B2!
%p<(@`mY#4opiI?^Ch<hdnX1[E:4@>P(Tf-KZRmH"8lgf*brfPeNWs.DT@GZ48Omhp3o1R7,beAQ8ZTc-Tc]]%NRJ3d)Jo_cATdYB
%4"SX*]t:c=YP`<f9u:eciht"dd),GNNW6?b3c3&]4*j:>J3rdY@+d7&dd4]XZ6+fr,'RB\F$Ai+Cf+mPgLuZo=sfFY@AYX5#3,m:
%Kb6C',kkL^gQ@DI1/X%#Bbpf,#.h4.^'dN6<]Z6(Z]#<pR-"iR'r1gY23faFcnpfA:'49R,aoL;2mZOn?'JR[%$`.5/]:.*9)&0A
%JpCL'ERWKIBZZ8=PDC]*B[O+;a%s@57`^?18t&K/<>ST"-l5J!=YA<)PA$ds'@2H9U(UgT\g+:`^$\S][()+\b41kXgsb7VKA)`q
%'jG$!Co^,orh)=:Tfp*#YA['m]PYR`$5!:5SS72tq18K3ke$'O_p@A1^YbV<ir[U^s)n29-S@V/l11<Bfi7dIj4tj0Hjc@@B&-PM
%<X7^T`DsUJe_"fc3cIG5R5Rt7O*fd4[#@GtW^N`\ARl%Q:oPl0R9"L9%%/s#)V0"<bADLD]=$p'CuPfQehGULDbg0fSHI5?@[n?N
%G8J%QE<ML#VOD/EAdY*ETOuo[E[%t2k!?A[fq4K`mQl9n%0"KS)IQ6@WUjGD%&>e>5+E1n2XMr#^U69H_mlU<eU0RNmDQI=FjQV7
%,?CU;4.Y@\-bLj>WOQQ^<4<"/cLAt>WD(QrfZS9ZLNBE75g?\2C^hW[OBG0t7_qE%N;'?d&MNumjVdR#Xit_uI3`c"fYAKfXG.7!
%Q(h/*k0uI)3VH\NBI<C0bGcLj#dD<B5.[F'V1dgr-5V<bP_`oG%@QaJ%C2]GV/Wf_r(KLS3A>Y9)8CXI[ps+DN#@p[,CbKo.OOee
%WhYnQ"N]-!R9'"G9ib3+Rj4nHF#,e5R(`b,9%23\_Felq11B1NWVWBJ)R0m%)Vr1,Wh'DV.T;Q^-%VOc%@E]cbGr/f9C!M,;jh]A
%8&9PCIIeOR^!'Z:53gM]N%-'j<'1nT7"cn$1bTgtE+o.(ZEu_i>Zjd.6-ic%k8@7I$eY\!fDVHc9,R;6oRouQr#M^S@aDS1AHX>9
%^g/UkDiXPiMeB9dd'iKqAdW6I*e$HpY*3"6qkgBD8`X/L'LM=%(2\.-7e>'/&&YVeFS>kEe2@Hq7kr92eITlm\BY(q,m^H.&j$oT
%6KnAOIV!0fSnd[YnI.^eiZj(fY[uMP728d6ne[gH/bG-u]jWm#b]UmDZKa,in9K[:k3BX+)/?)r?UHAe6ncN8,:pIB1u#&YiY79G
%l*5!RbdMh?H=i+5Kb8K+G$ej3!Ph&CWntF9aTp5O)1@5Q%3E5Vj33hi!AOaN_eB@`WF\]CYu>F:SWTdo9/"q'?$iMWT:Vf4'6Dnd
%ksNtMTa]F=\!Mk>@0XeQC@lSF(DT[4gTMs2D:h$m3)Ad2TNR`ZR.b`has`Q<LP!$j.0,`Y>dZj6mGK"n5pU#656KMp0DEe=bS'?A
%-%,"1DqT,3Ip:EPHr!2I)!a\XZGY)RC1mPZPW(O:1%\K&=#CEog<QMF#4gKm,P$O#/c,C5\tTLn")`\Tk,#4lH8)"VjI"m"Ukc_W
%m6iLG20IR5Vli8TX:"C)SlZNsfZ`Bl`.PP,>2S[[#aG&iiM9h>fsbIJhEU3iSU8@Um&>%:h:F@QU.3f@)3nnb=##>)gIAoEs#0f8
%XA&0rmHQ0&5R"buV3[G!^'$N"$SIu=Q7])>;7o,nb&RpMl0u"2^u3g=9Bt"1LKUN`h6p&2agUrG)OFX71f;rOFXD[5iR0JD%TJ:5
%]?rd/4SQ\0*`K:_\rinB*E01LfD8fPHW]T\kc4&EIphU>>!a2>DLGU<HZ-SIAsU%'>/^VKHH?<'dl,(=Clu+j]_g`4pIG;</Dj&c
%6Z:5COibnV^Jmf[MV=qpqIVWNNVotP$I%=#9X-.4aBMqM$]kfPI]Wf`C2.0g&4n_A^6fKt/JTK+Sd[gMr(BU3)-A=61Oq'9SLh'&
%?jGqNK8&9TKa/nV&7ILN6ifj=D*CF!`cb3hkj!UKc)dX+LVD&mE''KL<16F0[fSo!:;cNe-/TOI5\ljjQX81K&rZ$,]tU>p&)Z3@
%,=pR\Z3UF$gZL4sc>'Y+PBf]@6?QcQ^5Ps`UL'6k<0t(&6;c"4l4'*l@"seH;</CD#g?1*_l-tbiRrH4/mShW#R*SVH8"`gKR0cq
%%!34'!(<Ii,7?uqc=PS&?+WA=i?;"bS*fZ;<H<&Z:8>l2LhU_<n(/(j$p1&edJRh;4JCeTKr>]6RWnL(-o%/pg&`0$Jq7Ngcl#uN
%P:mAL,1-HUSUMpd.j[QkZYCd(4Tb.KJI@Iu5Ksb-1*R`NY*;NE$3>Z*`H-SkZ$Mg#&.qHT;H'RSdmD`!<Fdk0oH/FW;*b0Dp%>jc
%%%&Y>ITua2Na9Y$R49PC8k`V7'm_^FaoJFmc(pL[6t`FU0N2>tCAU]*"S_j6HN!?H*JCG*bX@t5cA>P^_((V8ikuAVe@<W.1RB@f
%[;9RFLZgFbaiCa:OLGrlVCObh,3<(lT"8W,;tgVA'e%3J,KIkrD;_:g$r51]lFf''^t<SXJtj.4g/TT=N9dE;q\O,8dkF2VB=Vq.
%R_9DhD`nB`MK_XCDiq&=Fg=rf%_f3r"`ILSk-\'PRCu$PpXo^pL0f:nX]&I2]VUus-9![a*9<s;F"/p\=030p2:$N]D"":jn)sA]
%[rr>>ShUOn_V5B8%t_8'#A"u-e7GdYW+2dlHlHVWiN!,rKPIa:10rgHZe9l0AenR1e9,k!>(OnqGb:[BH]pciN4($eV4);nnJKfg
%/2V9HXUL<OYf[%20<\'\"Og?$XqN$Cgg&)h.b6/"N]`g.Dj/llnmn:7Ba*W?3kmW>.56f!lndt00<5P/MR#$*oTp(0oC^"V5DW"n
%8Wi6?VA#=<<206D"7&3K7[o6^7j?8D45_B]#uj5_732!DkK\f$PMVW]A438n\@6e[(>C#H(RnPR>obbF,%JrP9BKgrHp_)m]:kJ5
%UCl(6$ouKJBoTZ?(j?0tmVXdsPBI`L@16ru.8U"\GtE`D8_WF+oR7]7Zt*uA-1n1WTl?Q)Q;WgJbI`]81D&\P0?7YV-\Q)CP5B(P
%4nJ[O]RKM$N^6nX:C;(h`gmt@W,geQmU2KQQ&'.,?%[7RQ7Rt'(pBXdBeun=B?8@J'mW(o^J"d$W1']uB'Xd%D`=&A;_ZURb'Y^^
%'J8Rbic-D%ES.8C>\u!dKmf9OQ"@2R#s(A_P>Y8h0X!#Rc$3qP6<7UOq@4\Jagdrg,&:??Y_\k$W6Z=0iGV&<L.<.dC0,ni7\q#k
%=O7hK>&;kGQdVn2-C_VKp%mVT4:$/qKY%oc::NBM0dQCNa&XrHeT4toL,GEN<t[ZABiQ9G1KBYpm!0lh<H(CX09hHt-7'NsL&.q2
%NCMER2*W^?fiU$,-O#,*;u&Vd&dK&(PC+N9f&"mfW!8/`a%/sY6-U3C0?C2,?DitHKU/QMo]1,4RLPn=,Vo^Mn"02Kdm0[/jlu9r
%<3jOKFFLjFjKp2ngk`Z;*`oZK,sKi/PY?@&6c2NMCr@S:=r3G.Ab]42=ecgZ"`pa/6rYJJJ7o<:`pFWN5*O8bh(+X,br`jS-@JBg
%rR!%D]q$L-e:J=nX#8PfkHZHtH.V;Mg)M5=PF)_^nEtB<NY9hl=:%Q1:_D_5AA:5@<Ej^h+MoAT0ftj6Q"8eaSH#@fro3\@l1Ms'
%GL2fRV0]e(c.[VM'.;-i#j?`<hkVTKnmSkOj8B;n&JZY\O]<cjB`"QjZ?8_;BN1L4jG5q%)3*W4UcXa4:]P:)]1^93,7>4nZf+^q
%a.4omN#\?^ae:(>86,&WZ)T,W_PZCIHQn&116SsF3&+dD6XEWW*nc+9dBAi$7cr@7]IA/q9>C<p%ISSoemhg`"_3_gS$[(@Qb,3J
%qSCoI#\q[(oKGS."LSKA`k[^50SQ/g+@gph^nR<&6#$';j<57L2Fh#W(@fh:&Sl):B?[YR`*u>mAjo=!+c.S)AUfL*LF>I%P!.;g
%e43W9)3;W$06)m7-3Xl^<BS[P+p4oE6D0L>G'0l/]2pC#L=4Y=08+2?"5U2UA0?/3PZ_Jk>/ae=F:6<oWOb2GW:rgi7OLp@HV^ge
%^:e#ae^*aX$!&EUrFu`,=RA@cNXus8;eOk8\R_e%S4eTLGPCYp?2=7LeLFJ809ZQWWpnkk>C%D4<af>bhT)q+/Mj7UH*"SC+]k>j
%lu?9_eId]EOO:^Hp!:!:V)SRdMe3H1ScEgAX/r_9H<W-<*i%(;NNI]E6N:#$mF=XL:O=Ybe"8M)Hm6sp7#rfGmmLCMg(a6d!(6KO
%R\]j_hj_\rZMg,i!:#ekP1ANL/!QtRhdE0<9b`%a9X7)p_jA%mnIadoASM/]jMT\/Pnp'40+_2;Ea[P^X68SWc/-JrPY17p_"sXg
%MM#;][hBPKZGm(,W9#uSJ`locIJrXM*&N2;1#RGRcA=RmjQEf8*DZr'R)=^$'$^gESWlTVGS]hE6ph5/kr'tQ)WLLKMC:orYc<C<
%S9%+U<cbo-;BZ[(!])m=#\n-(3)TmgQeOn[39<@aAp?q*B8ti[o'/X.AJICP@SL&24OF!]M?'SRD?L8AChaK@Yb1*FqaWb^aujBC
%qs=NO'3$#P'D*kJ]J.R,QrARm7_.I'/,YkC21,+B/up0O+G\`TBIc`Q8nl.#R5C<N'f;G*LO\]cgeAI_p$O[rc8DJufeootpZU33
%HYUYYFsY/8$@<\VPVg=<]XU:4<*oq8NZ/u]o,CXEfefC7ooME?LbG+k=9O2D!NWNp^&,a>E(F$[QPVOQB'N9+q0C5/K>hbOW,0?^
%3kW;sn/2@IF(a%46DpDV(K&p^d85H%nTq4GSg/Mk5'EQ<Afdj7]I%a(%[oGR#LMi#fR&[c(<gPIU0D.LLYPr-\SC"imsirA0`6ll
%pb/8kInhCUU%f.ldHSEe^]!OV3k<[f4RsRbUU-7OM8o^4FM->b\TG-N+;D;[Q'=*=A(\N4G$!A&aS;'c.<)-/[1/,=Lcug=Sl)DS
%Y>8>tV+Po5I+=L&=BK-=>jRk9S&*Coh+%*h8E6=%/E1KDQUW,M'[i6qPa(Mn-Ka#s(ktnU#b5bRQ*ONh#G2soTT5hr>s=H-&U/"N
%jIFilN1GrH?VZc@'>5K#8/M&l5nW$K6T(A/b,m*uOVnjf79IUW(u6m$8kRYVJ.jcMj_j@#I^9p#.Mo(Z0]iE/`aZ'-Z^ED*SSUfR
%0WPKcR_#n*F!-8[Oh23;+Js%<d=_8L_@\p/,rAubDFF(S'6uci[%r=>nr0>[hpt">PakS@h%Q>>bc\N4drd<)CFrTG9(!A%&*nnM
%VoJJ.W3I7tU9jJLMEjZ"aj1n?@:JXq?_L$$":4t/J5N>A#h*rUCuEWI6R.H`l(]1<`.hnM_)me<7#$I>_s1,p1Z^.u,rHl'9X<qP
%P%5I\]\%sE?%&'Ha6]VDm/4P&,)uufd&C*fk*n1g;=#KlR@adEU_1bq0E96n:pOX/9BZe9&7Y5n+S@"#ok3b=RS@;S&,7kmAeCsq
%QF%Q0bR$X1]7S2m;NAT6HqGHmdmlFWj+m>*#0eV(XW83-&Un%5"#E0hmR/W'dlV!9Km22^9]J_4b;@lkG8EAt!maClGM3TU#X$=c
%OP*B,agZ]%?/j2:#DD%K8-6'P#IoYk3_+#T?8_eO-.r9pC6p</'Kp2m;KGDMfn0ZDon5k,OpPQoXAUbYC;(F8J=GrP%L0W*;Uf6#
%8%mU_!OSf$e/0<[UsO9_R;u%W_OoD#'s??3A_(IO*$dD"#;8+?;[A^H=J0VcqC$>fg\Ve-&;$K0=NV?K'890qHB]lLm=>af*5R#q
%QHEc:E1fIOXGur%$?;$ZaCn]\$?S]E<l@piUG?82qt/8n%q<B(`]Hs=3.^#"#<Pj@7Ao(bFO8LSI@.>aT-L?E3G@GR::@8'g8+``
%!gF*(L++X$*1@.`7=Yu#aq$8#!.l%%>L&R;Men(O"[B@7/PV]'VuHd8U;hSYR#@FY2!tl13!Q,ZM@edJHQL+\Vi5nM3Uu(HLPLRG
%^I)<B$5$J0)7U,i[=FuXPQDS(CiS9300N`9e+]B&FqpXC1;orJG)9r.Ob:M8js4ZnBZsfiMn'^0aQ)TU+$pBgULuuR1JMn!`^;G4
%<(&2lHGNU(-N#?:^kRreLb#Pl^nR*fR]E`AJdU76VHf&+6$?OPnWMYrZUaOKs$k'Yam1GEDLPF6T/N'^lM@LGhd=uLEhpICV1r0#
%,Z>bs9RAnsGqF7j<-E"8?Bl":o"Cp#\6k_8'i'4+c%@MDPek.6JPQGu8,sdp6*c%M5cl(-#\J9ZB-!Yh.l.!i4C`k>-u;_)OLCsM
%Nk>\mjldif&rG>\bMjK?jI(]+TjPtOI;&fgl=JOSR\'DQ-F/dJ(A:ULad\h\iE6HXp9::%Ta2QI&9Tm'*rJW_1$l(cXR%'i4C]N(
%e>>`N'0B6&G\%74Z;GA.)4(L_PsOK5&a3\U';']'cl`./QOntB)HM;%eiDs@?pg_[@8<#R),,H4+g>3DPXYeej^,Du4#&OP[<kcE
%05Xs\p?@4k*`S56N23!Onka\<':,?Ke\5Gg4BK<X?TP<QTRWcJ7eS%D43Z.uUr0@?FqF?JJA$\WNVG>N<f6Zg?JsXVNd]UNGp>MN
%%='Gr&!o[>!17o=rm,Tm$Ia^0l%\bm=9od#MunI3>3ui,!DgUT7`'re2G"H*3Nm.6rA#7caCT5/Fm)(M<G3$h08li7.9Y31c2MI&
%bE)&,F2<saX[ebXI6fb,jF$n7#8--X4.VIS6I)ci*%!OEnRJ@-76amQ'B4\<KJDNcS2d9>qLprHh,b_SEqiJBl`9/;02p\#$']kt
%o1n!*3OGgcS5*<,:U@pY!8tdp`o^ui6DZ8Q_,U^tG%PSi\jrq7.BK5C]g<Z6G<7r+[STsoS\F9qn(2[n8"ML2p%_"<'1Eso,,kfM
%-c'n$Co04HJctugZ3BS*S*AA)"K1I$0:n:Y`=$$l`m#KBQUNG4[]S<A"tu<SWa?.pY>f7D0;3Se_Vj>+Q('7Q44A&&Gbp!He"CfC
%Sg,m%r2J`)OqW-J5]f,9?<AtT5$6K(!'-f\V]$RTUK(#lHe/I,>D%6^NOS)J0"@SS@7inON\,[:K3H\<7]*YdnoW,ZQl\<s[NQ<O
%;L`IR_kU73O:PEm(upoQH@PY)YPoD,=f:Y8Wr(gk_S4P#LUR^.+&oj->>=t>SB@/I#!8NRr8b^DRAk@Of=f"+<riM=l:Ci#qWO*_
%5Ti4,eF,eV'*Z*79u]-ZpJcK82gUl'&tN`,GqI/t.1KjudjOn4H`'T?QYT1ErTOQ0rE8/tVlHAhrr$V#R,"H>+1"=f`ue2m:.C_A
%B_oXu3)Z&:Yl5b6&'Xno\DFjO2V((LR7tjh^[9Neh]o'UeFrE;l6]1ZHN:0;O/q/Dnt>D8AW5tTr_rWB`-i\5buD#Yl>?=KH@jm`
%[<pqH??6;_QJ@um01S@q`5!6NO+_fmY7I,IR5RuGoe+IK:89=1*t9L(0\H:"*X%<U%X+kp;-!GS4t6E`d&E0d^Xi+oX&hD&=`6F\
%[%--)abhW.8uVXXMOEV28/Xnkf'3')*`Rf*%?6pjjTtqufI`SiS7<`^"K6(H%TB+)Wp*QqZX[p>EOUqlC'=RL<*2739EHR"//94<
%;,[d9HJKD>,7bVh(nFD-XT#L3rUk#fl$n09W7VCV-NH7OV;*$N8gKKQLEW`($o[PM\])G_:%!p-(5&A#>kQ3o\=i08FB8V9]l#-3
%%??aUeuD2(-'FZF*G88]U7,qc,dYFaMTL&cj)pc5:5DW.Tiu9@ki/I-;M,0-dT1D"CZ^M\i:l<OjKcK-CI?`Q>pV$V]#6,^R_dE'
%]B!i%B4n^nY(rEjmd$9?j/IWjSe9&=QpA(0Zj2=#pU9MR<0[`aRQ\QWYn!hQTP)5?nrdX2-Rnt%W3h!iG&U@(VY52=r_Uh"d;4=F
%[NPZeGRMJT9q<\H\Lc9]3V'13K>'HhT+1-!e=<6GpY$7_'"nLUc_(O#%ti^?<_g7^I%pGurhF`:kY!oAk0Fn<4;$rcmguNr3M<6@
%1Io)LZnOMM'Z#hj11!@Q(hD=5=/H22<N(.^VO/3/L8rkfn(P54n*D',G;hR]*D[Uk4AD@[(k0-'rt=jEVF*U!nHKf@$Y*J4E1Mem
%&d4$Q\h^96f;+Cta[$o0+sBDKkj3rUC15[u=WKk@!uVb-"HM<M<&SS=Fu;!MM*P!!,[q+"-o\mXdlCH+E33ho;18BO#9i7J_i/6a
%s+ra#OF'EcCFYf3-YKEs?.-)u\7]8a6f#/V'_`V[OQUbO7)Pb]^;D:n]='G$&jL/"5RA526r[u7_kN`W([KMgT%nrI_[6,,QZ`p(
%ShW3OWmF+;E,@+AjQfuX0\phsVSNL4>bROogXcQifNGM5YeKZk&,b;jKu<CGGIY,N:OSM@GpY0\&O'M3bP9[pP3T`pE3\ApRtPV"
%ejo=\D9(/"4CbJ`</8N"Q-mbmgl\t)FucI;IDA8-'+Dh`>Ht]/Q^d4@I-7>2,1\=HZUnR6-WW73OdVM7XVQ`@TgOf;,.C4UBm21a
%Wj;<OfjNeX8K!]$:FeOVYre:T)XZhM^0C%l'm[e)d+d`Is7A^7#Ote>C<kM8Ap/WEnni*P/AOi9,XpG,faZ?]J+i=$U$hJ+bR%:o
%$3Wn>MYF&nFg/YlXRU3GTsiLcXXR%sKKU>\)?Ih@L-E6)fSMi)R#sa1:3@J3O+$k4]a)C4.0Esb:2i2/i=?kFDE@cqOl6Kh,:BhR
%s1"3Mf-N+*r8Js=^]27A2(ZD..9:QW`UM96.K(tOd6Ka4%B,Z/1`kGBDRp1t9@(aqW"s[.Ell_apn"?gK4eqY19:9"M]k5id:fa^
%)q&r:djDV-1ZCm!qpq:&?E$[np+FRQZ+"-C];,K,W&4=IBnC_HXVX4(11/g3CPf&$]6_LuS9@,!8'J=ZC`TLaQO\XRF,kh!R$V=+
%ZY-UghRadtOias\5q\7?ZQ%=)W=oqMHehKAQ_DC)&b0JCI^]:De#_<@^W/u[r8.b_6@E/Of:)EVRLjD_*&KgNH"A</Q^[*a"&?@,
%Cib31@/>`IdWq>p@;`@EW;"SZdLe3gm:.%-Y&/6e4/QsG/bfukHU?TdLkRkYG"7`!kaUqLfgG0%9U;&'#J*1`I\M6-aD0r47Pet[
%(Ti,$%V;gW/lAbs@W4bXLD,Un]a4KM?P&GWG^n0I/<3C+[b9]RosfIe9Jj@]]m&*M7Y61Rn3^.r97rIRZI#VbRm-1-g."4<a`%%W
%)p\0,e'5bu!,6G\2l;MfT:<Np?L9.=ahnh9?3V$A^qTK(87`TcB6;2Z;5B$A'phV;Ct+s>anu6)p7f$Ap\DRQU_AMWL7[*4RLEQ[
%DZBNQg((%JnGT]Y;cWK_U:6T`Vr:Q`pWhGPBVa$VB%kMt@c04r=4ISMj)M:h`G32W^_@-/MFe(h-QnKZ<KG#,8EB0gcg)UY+Ca/#
%qZj27bamiLgFTWQ3X@bU6Pj6l:t.bUNjAPiSqN.ZK6#nF2SDFF:l(O-bHOePJ8OX=PQlZq-4*X","WaY*6&$SMC^!j%;UT>(_\7/
%*&'F>fQ8;RJp!iU/\q;lgR8lrW=1P`mFrR8>]#R9p6mUf5E''u5-%tfZL*\5E+k0Lq#XdB%1\NNZ77ph;NegG/i>R2FM'eFVDkac
%UiU-(!d6pLZ6Elrrc_NmZ9rt@&"*,r?@:_;V.ldc\F5iPgkl1m;t7HT3`Nj;,Ch#N$,<unfqrenU`1'n9h6a&69IrH<F*ib8r._b
%`cPZJCtg%h,b[&AB\SVbn#qmb1F2mYP^0Y#-ee9/la!^l@r>7(?p7=@WC;#I&@D8bVN=g%IMgaFee"^,52C%=@#lWB/!Yihe=<L4
%95RM9nLGs+,P+;s05^\KfMBO"4iY#r[UjuVV%cXVI"+mkAr?!O?([(D2je@,W>,Ag9ECHu;]pLPnWX)^IcJ-51^'iu5G;[!,e&Ug
%.fqM#CLXU?^ad4mkML,rAAPf\Nr]Psg1T2i^e39#(.fio4:2B@^9C/mS?.dTFT1schE7BKDe;N=r:]iN[kIITT?fps\N`<5e&MD$
%ocN(@c$+`&a`\?[Nem6tgBA)@TTE-eOW??rC8pmAbV)f.!N&]6jg>,q?WY8Rdra-'+>h0>nigkC/im!DE55[i_oAr0l3p5O0)DG`
%G@8<rUahkD2O.g%*/C=EQa[(0'`=$'cnpqQ@';B8TJ-)KmB&ui/k<I'mjOmcY6h:E,jHjVf"VF#'(BuID8A8k(BQAH%W#asJiB?g
%_ZHrcK:Oa,#nZu[1R7?$:+`YpAi[82+[r);Zc/,Sd1-=i([l,0%a)Al\a\`U&,3nZOI.P6DROE=`G_`2)1d!:r<I]L],h(-*1djT
%hnGW=H@kGb$,_dYo.Yh:j/4uhG.CDh?o-OkZcod%OuEPS`FBgW9,C0/E$O*gp1<M.\9?f]>:?9)<d]Fg!$!5kFX7A33eTn07H01o
%?K7tP>9.]>/8bXf$sI5q,H4ZtRKuE8@q$U=,s-QPp>[O_B[:,>DY>V#ak\0_KVS0mE:i7urT=<X'8ZXL$r.\T<2BE9)4X6a;9J8:
%bi!;1i/d"SlFb<X;E/.jX>O0P$s-FjhSpsY*N:40*D82WH:c1g'R##:e&K'sk]H["`">d(aRGRa\`Qg9cA'X#$sj+JC@4h>(#bud
%bc*R!>[^[<@4\92V4(4>f1qQb*/\?b.QL9gkj-tDJn?ejT+IGeJ9j3,@ZU:8C/5s=g6K,5TpcQKHkoOh@W%Z[Sr5*Y'!3pEoTDdu
%;1d4trXiS66Gu(M0W#j*Yu#3.E<[ST,f*rm!='3#2P$/]:qAHN_*YLZ_<9I`NFI(JLNi'3rFk`A8lA-(6DYiCFdb*6>'sti+L"c.
%H=0G7C*TX0T[u&D0@K0f^^>59L)W^e9qs)jH\qohb"u<B'VZM6RE7jU^Y?I@_3rA`^Qr3oDKg%]I)aD#q11amE*u-Rm.t!&ckCVl
%c^`.;TT;(u>=9#,]fYrDGK.aF?F:f4DMCioOES%Q-Z:ae!:c?GQUDiO6r1&f*:h*p8U\[/?6SspW`k)2o-Z%ZE@2/IB&^7cqfNt0
%O/L4YS3,U7%$.]Xkq/oV30?dmM@T>Hl<#VRW-[nR")Q0k,B*ptBJ5P^KW-Sb?@B<f=`1iT;GW'.N1U%tR5V"$Y>4IOMrng?NpNI_
%iiV9p2#E&oA2<Pk*)P)>O;6MV)IMp!H41bT;^NM[CcJ]Y;+?2an\^rhj;6Wc0OGTe;7>g,Wg>T>f!9Ni#9=g%bGM19Yp4u,d@m8D
%IthR;<X91u1jhc]0e2jtafC7G>bl&CbQ^gq_.5/BF$`Qo;49Sr9:T]G`a-$R-EV!D21BW(4!e'cARmVN\4OZBNoAFM1:_nM[pt57
%#,b583iH01(Jg0?e.T(>4UQ>j+pAI1=k>r^;l,BHFRbpaEhraZXk#k!,!"E1JZ5BH73#S*&mFdpIaHkolDOJZ,3X)/7iAHUG-01\
%.NXtB<E'6j##&L'Vl!,R],J]V)g8KWg9o?[r2;&Mr=UH&6Rp\:.q:E&lMV$G'eMrW2(<+JBV'C%i2_,<pLp!]hs@<"8]19uGArmu
%`n8nBPE489QGl8nNEn27MUu$r:*qA?Y1-\r0hoS.7Y@k\23RriR$R;3On+SQM5JrMb:oJ+Y(1*RpVf[-MJ\4cnh"r=PhB=i1F`-u
%?#U9'LM<l^[eJ2*S1$G`RC3AjpmSmt3T-E@I^Q`T6WZp\Y-\YC9R'5?"AD+<5Zc*"Ro\&uXe]u[1caA:U[jYO!YI,8<(a:\+7\8i
%Gm:EH[61IT,>9#J!b@`g<&N5(^=o)!R!'Tg;,t2`-X`2*N-gWe9/.)Oa-s@_jk_jK#BMVmjY51P]!]aMV*l:,0^i$W..I7o<!0/5
%fXkdI9M$1;)0.l>X@Sg)&[W67cqA>:Bc0Z'd+9mcS(jT<?3Vl+W$5SOOY?EX9(u!ciVug$VgCk'gV[^8RCZ7D;,EXgQ,+)#o)0dS
%gb59S@Wp>:S<3B9Ba)&QHQ(%oJZd-'*8IQ6\7S0Ce;$L0'\\`F"98"I7[[kP.5n6SIB63\^kA!="aZQWB:eE58C9&-NpCf9^9LHa
%79i"NmQRghiBipWHQk+0Xgn`b,.NNT=Rk$lgSfG_fti*74fOURT(!#Frc5ctf8nM^ktm4BGfJ[2J]rs+-d"Pb=Qjt5IM,M[X:T].
%#[BqcR/abWBh](%\MoEB/+!?Ggua\AZBcEn_KI:Md2'NZ"a+(0klnU/X:VIc?-->!qa5OUoa"V,k><>VVN3)FFFJEp.#>INJ)2*?
%AVNf_(t9#=@TgZ+aaafB;0^YI.0j'D`c.,0SKN,PGfVE"i>D`BVt"iFdZ8)>FMe5mn"rlhqUqtXo8AbY\(![56)?B^dfbln#TV<X
%H8J3h0hLL58I&&qg(<Tl0I/.C624tg90iN!=YZ)JpbKX`N4DBRl_O5>*a@6$2-/B#bPb>"[1e4+$pgJnc3Yt]CMWci>GmEQ/8;1b
%?M6FoC;;Z-$8?\mYRdRtDcKesme$m>=IUM+H.DF2DAFNl"WL%GFNf/A6DF<+OYm!>7/)i\np(UBnN^hdh*b3'Y89/Ud2Xl>-5H>j
%p5%a42A,L(Xj":r"Z0G[KVPW]bkhW-#YND[J3?Vt':"#3;o]lW6Am(PME9d)KgjOr#j-1V>=^6CK:L4*]>fPMd""P=Xd;:Y#n)^?
%'VTX=,`l<Z9Gg#Gf@@-DP#eL40rV;7c)ZtZ-W8(D2K,W99SoGA18ahe^X.V#nt`PN'2hRrq-en:ckX"WISPZ(mq5E6#LVWkR_c7E
%i;/!M\'h0+VC,ule#N^`c^51pZo-')`MFTC8d4h)!:X`Ye=I@3$01*OR5URjVg$S+\5n6=D\,tf"DRL?'u+,K3_rtY&"GRpnIumA
%TKRPpW@PG`)-f>\9@HRkq^6dikcp2fTAu-TT25(A`2Xp(r%X,KTPSB8G(Kud#fVThc0-HP*f"EPHDWd0;H=RH2(CrmDdW\SVlE36
%ZQ>\(he]+=5ZK7CCDu^\`SaZ>=D+Rs)1j;jU8G;EC[tlUUc^:;8/2Vd3Tkjba.gWE8Ya<RUn!P;_o?s1&CbG1$Ui?JOq,Gr;q%,%
%2@5[^#2ThcU"f70ZQ'&h)Hp@/ZO&tH#q;5G8O4:hc#!)6<>?PX-P<CooVR3MMU!a>J`cDf;@%i>6-lJJB>q7JebWEVBr&m"HOQ<_
%^PKeY6=&C!=BUL+;QWn&fN/T.bU&0C)LF[8S.h-91cr`/M`.'NTeeBD4(esh&>-S(B6J1NCaP,'((F+I;J>)X^:RJ1!"C7`S[^?n
%`3NI[QL"c6D%bqJGY5#7-W5s%lL!nIFIs<q$?SY0!'L]'q.b*Hi:kDWLaZ%;3'IB)"I("5A=:/5RKTi,H<gujYXcb%]``a]Z<TDk
%GH#kZF4$%LDnf`G_j^m*C(En<H.-"C3C2Y?,#Pc3\5Nf"2lY-RJ3`\)i$gC%M=uG)k"/]s3Z"ec-G[X8#!-<B-)f+Wn?[?$2:2Yn
%`9`BB7EmYOgcaIZQg5M6cDOG:^mi!jiR!:X5q_$JK@V_W7P1R5U9)_>O.s<J1JLr`mBb%pZnlq=*PkL>j[;&hF)YMc)bG-MRV#%;
%\p/&Ap?Ri(%Us`_#a/0_3Y^hp`0mK`8fM&.Rd%',[3nqm3Y1'c7X\(PlHg:PK>6QC1!#+'S,5]<VN^6^6`[+[rp^tk/cX74g2ESb
%#2`,O,:OnI($(,[!V<CVdn#e[P:Vk<F&OaPLa-YV8i,AA/X"3]E7lXsW),\laNiT485:(n+LPuFB`])5P1,1J+\H`foL(<IgipOe
%@Q]<g1NA1rho9H=bA;8H0\_isiR(5$<M(J,n=p2pPGH#h&:/LXi]^EJ?(MbZ-RPUOX*6kZ;I=$F$CPMQ:APafrCfaU5^7rojJ8-a
%A.T&&g%Oqk>P2k`=^9XL/uBCkFh:&2R(63R>C5=(2er]8CtU=hP.+1[0u#6Z?>TXeiU/jlQtQCi1?7]g<PEqOHB71"nhYT/T/FUI
%QX$cDEB?+Thej^j`^hPP@jp>C@%<CtA1DRAM1B(K-n^kq5(!]Z6t'#jQmN&)5<eCB-?l;bbiquG$KktU^09/V[L/*)3+mi.[RLuh
%B[<a"V@@"3!?cP2"s7Fq/14!TJ)-?iD,$U0=;3=&GZZBuK3Xj8<P0/!6[+ta0aE^'D@C>")^pG<]N-c6M)ro%%'ZH;2"/='(ap?;
%eD^RmKQ![WjbhJCCW>KNZP+SP\N\daZ\^7\qSh1nVpni^Pc't^)S",1(alo=iL#PcBAUDRK@K>8kV/SfGiIXkE,Z`L1lii;/88p$
%>psPeGVaJ[5i4o5O+Q-2B8d!T,qtZnSQT!a#,;gIcBq8K:^rXVj0MLZU);qE76F=a]9EJ-FEJ&UQE_ZbY\N<*GCK*LrQo'hN@&q?
%V&3+WM)W;fW3WD?E[j7(Hk%qI^OAM)Ye.q>Ao3fGFFhb02CHL,`n!cEIjXu^`Os0e+eFrI'k7WoOQ5+S'.`r>cQHiQPhagsK;No)
%=VVo9_,S3KX3/8VMIjc"6=qe^,]>Z"@+(^GT)@@d_7uj?kEJ.(QADL`1$@2agRWUKQu-[bM@[,>%B'=l)D(B?(`u#.R;4A]*XX,X
%T]QuM9<s)jKg8os6\k>4lUF8Q:jr;$Y9,q&6(iPDP,/hj:7unA:f0rSPT#pWVCe\+KcD,!&hJCl3,TFYWN1RY%(gQQ@9D#Np%3pS
%X6'kiEY9m(+]UH(<+^S97CU4EV)T>4RN<h,gPj]$'GP%(bA>%p&qY1C[\:6`Qp;QW5pXTcZr6a[3G&40.'+Dpq!_T!G6(HV/>je>
%B25_EYtupfH:ArPjU1_mq"iB:+%3)@/7LY;l9qUAjYsq/YR_icYmF<s7#_g-AKG!1c#'*j(]\F@=G7>$m8&D@OgI`,O^)JlThl"<
%3L.pU$BmjeGT^%O\MF\m?FY4p`<ZY(Et&r@QqCp>NK3lOW<BC79-Li5B=H0uA-4:f22B>?+eV_7M1@'L#:c`**0]qSOmCK\Dg#@(
%]Yf7=;3FB*GlMfE7A.dZ7cI4/rZ-lm^YMU^2QA`pU"DG$Y@m#LFeB[_&8XdE$;fjacsf2.S.VrC..h1$5--L0$Gf,^3;=[9GCqAW
%dW^1a*U\BD-7>9P0h88p`+'^T6I[Dmn:E\Ji]^sNi2b6/P.VEA:7]Je\Dko1hRsVl'4Y-#[3@Hc7&TTpT&W]`/1TeUaXA?gkCjHM
%_)l]AoLNq[?^Hg2<B/j$5FqFK\fPN,q>(h@p%RqJTRHEj6"rg4Im0bBS9Xg=B'2un`l$8,Oh/m7!r*1*P&b,RJp`*DL)U:N[7A8(
%c+O6eRSP2t"hQ,mFcOEn#HITM,eD/+24"A3J4j:k]MRBE$8EbQ@QB.4"GVSoH?*N:SrWl`JQ0_8%2qbT5uBF2P+4KH:+e6-pG1R-
%8l:\<<:FU(X)Z=G2#2cXI[&q*.R<-ORBtOWO,Y(<MN^g]AhO<0K,EcdQsoY+lp+a<6&PPLgS6\'<YgMRXR\?VGU:)Z^\pBFoTL7^
%dJBY)pWoJHS1o9+k`6V-@U;G8bq)#h.6EJX&">L6WM18A01^]Km0L?D!.q7+cYGqICa_?dm=Ug8[O=*a6f&j:IZs]_dAk6ld#,qB
%889/TQ,oEKp*W'U6YM<fBHD0NYGS6::?DVUhM:.e/2-`noVZ1IoV<)l0.-mn&G.@dP]&JC7`Xal#T`rmHgbj*AuZH?VMs#1<,1Fa
%WhPBN\)/GjLChl,p?o-h.IO^Ze5`gBW"Z@$F%ZfYh-:<]ZBa0+/r<?90'mo:Fn+'VIJo,FlLO6s7aY$)I./DOR=\54R[n^\dab<O
%<NXOaOMj]mgBW4iKi!La1MbR\/4k!C1Ri`b6#0.Pa.&GnN+:[8m=Tt@kn,.W<Xj52mV'QB:!cLb,soH\2J?[%Z<7;)Ci%mIHCFik
%[KV'O[,6d["I]m=r/ha57bM0c1gI[^o,="=Y+!;o22mt_#8C"236B`[h3d;52h[+19H<470NH\\Pq#O`K>_pN"L;VsgS]4eDVLS1
%q=V?k>?pRo$TmJT[3p*Lc>;0jE"=@91i;P\)JF1,IE3s]lU&-j,'rTfJiHqcG"ER-Tm%a%W*"&/.gVC)V+,bo!_i9A'WG=A--AVm
%@^#)iA,=E_;LLONe.=_g[1\]JjrMi4fE=7Ddh>c]G/%"If7%O<BR&&3T$'ZkS12LUjgXn,2[bAJ$,8'^CT8;V:1jt(V84j'gb[m3
%:7nQ0*-ArSQ`jc=lhu/kLe5qV'V1-WK;Yte@@ho;DY(q'bba--'2/]mp]^Vk,M;[tN,0-5.@c_0G51>!EXpq1Tl0S,[L)h`(_&uI
%^7MK,LgV]+)k:(6>:5<3Sieus*4%,^dQJtDC6].W*khP+`T\_-TtnGh,0hncqS7^(71Em_1hn`OV*#f##qHgO/EG_hNe8ch..;6e
%?NipnYNGMQpN9<U:C#q0nmbl&2uchEJ*:tb0^ptUR#5#'+?.-XB)AUUoKkT#J+*\W3cd!5o6UYp/V!J2Y3#('7c!bq[5iqAf!$[E
%H(#algFui?,\4HceMNMoq>T$QS<F/pZ?GWtk9[@--na391>ENWnBI.^;gQIs8;+lTW!Uq:\JAWTOLMOlV7M!h)Iilg(G<^0)fhhS
%p$VY2o2f2t0Mt@R.;@>dH?_;N%:NEGg?"_)VGpA=Z!Odu>DjkonlW>OR36;7NYrm'RUO:1<2VN[$l^P2Uo:8e"1!Qb4aWhsO_:W:
%b!8kFFM>*&?NHLM3%VR]/_.tQA(=X&)EkGb3<b82T%AGkKWcI\[Y*,fr0gs_%BuG/'^*[4T@7(,nbP!1g2G:V'c?5(Vb6i8mT7jg
%p>G)XS1P+sbhSYm\bI*pXO2UY3P9?!(_SKjf1`--l9j6C6fc^>)k&B7BdZ5/!u%lXbqL)1>mC>W0Ir"`<"J7a,H5!_5c(,$HUgSu
%5)B[M.gIf7<%-P5/@l\)0.W.CQbSb%+WE+1=6Dfl.WZPt)!@,(f$oTse4/G6!4Qn/g5Gk-FWIj5T!?)peF_Xlk4%+5D78+4e;+6J
%,<rBgEWnEND!<.[T[?%p:cGEVCFumk98Pah<Uh-PRGuX#K:FWT"Ve656oDRQF8Qd+RgNfKRg3*E&CV7$%0V]tGuXn6NV5%pBC(X%
%W19]0[[@f"lHGZ$@<>LFqHt;T?)^l8='n2OZ,B=c`ea#]S\N'+S8.^*b\0q?_/TrIJ*+aa)Ruas=dAcu+1;H3fGDW?aQQsPR0$lk
%:I!1Kh/OnMdP#hYEh)]*N`09+R;nW</M8,F'$%u/_p0g)6B4X6\XpjK+r6%&F1?/:+Y+k))H-8=JRU^@LJEJRWJQGXf\DJqI3?[N
%M^rg0VXpYt)56alDF\ZT,Kr<<@un(RNXCffmE!K:^ke))T`OL>(g\YHcX_hCj]BQB+Z,[f&0s'%.`H8OA;HS;ZBVXiCiXTT'._Kf
%%o#Ob@QhDf-AfFZk2g]!Fa0(?U4ZFh7o^:[]Q3sa35G`rlY=Xas);P^C`,#?f!:ofd!rkVQF[8jBBkcNJ,e,]5)Nji7XrEcn([N-
%e#POWr%YY2\*)I$i7F<0&q/,o3A%--d5gQY\-<1-?f"Bb\02&*MA!I([G[Q8cB/SF3:*Vd#)bg*hHfE_XK8R"''HfA!Mns"6u5N%
%QR:ZJ\+P%qDJ/(10_ofa(Ete^\N"SN3Gj^EPbFAeTYj"ck:?H$]mfV##N=qcUXgejSOiFHcAQV$eJ%%9fsu5to-s=a*&VqK</Wnb
%;E?'Nd&gTP2'>N_.*o9dD.]%NNf2pB$)>:3R@K""79Qt-aK"J5CEmaWQ.trFYt6I#E/KMs,W.q)</>YJ]Lc/RBO\G3AT&I/(..CJ
%*2b:9OT(%^muR8?d;pDJWFlW?T/^uQe:T`7^=>(f44]#LE&B"db:2#n<^eaf\FQW)_F*HM_Yli`[oSPRNTaBRMVjH(5Qc0b`Og/M
%.qYU81F%a24-Hk-[RHg'8oF/932I?3*o>.Vk)NLTMW"[7%O?LEGZ/gQ6<V.**GZDd0Y^Jhq"4_1N*;c,j\m[jC#uOoq4>@nAUQAZ
%\*`4lPdIe^Notan6@C9.pS.F(4\aU:4[`4r4NcN47Z?ujWeMIGCO4:Ab/jcAs*R*%?1H"oaYoIu(DTK*bat[c!LASKM8:?P]GPZH
%`T:$mn\6=4:qdjl<9Uj6+<i>O)c8O"NsMo3`C']8(.p3m/H],^[T3JmNOQ&Y[RACQS?7EjFkg%$,k<oFe&%#m(hi7k"D#K1ROu*U
%J%9p-"$i5gI*1sWgR#CqVdXad!=tQRA74S!<ToZf9M,di]dhfRQp`[,TI<7='r`40Z$TVdL#",cr"9/f0ff_cU0L^8!mH%4@;4l"
%`W4:XV9M;g1$l!?d\u<6Y:o]%IC&r^591=)9-Ncn^OUk-7Tb`-P"E*@-tqAa,fW8q;P1kY.$V#M0LX-1>b<<0`.n.OlR$q%\V!]K
%9@9tNnK^L'CJlRR<fP\LInj]#.7j[R)!5Dp7nt=-fIJb-9'`soeL-*u:a5$)20p,c@N\AngFk'\Jc^\Y=SqgQL!>V*$]8X_I;llP
%Dr[13mU,WF^AU]+dh3=Rm2\2gi;,4Wq_+`16`qp!o<08kauK1A#d`Edql:`b'u+:DrOQ)#XbMX\gd3*Zfbs8kY'4=:^d+1k*?Wan
%GF(Db1<(taq7huV'Q`Psq/VU\LG`h#?[%Y8N6Hc\Q5blf,61gk1lKJj"%$@:LVs\TRI+$d5FKh9)muC5C])9a.pU+o/"358B\KYS
%6JtO,C?VW`qQo)2r]`t6Am;I*dOOZh-u3j,g&a^F\ZWN:\n$)H_<`W=4)<5l$f.rYFkH6t>r2*6mW&:)_(.JV9]HA*dN%@Uo`(iF
%G1pdtT&"Raei0ATPGTg*e2gIm6)aH<g04M;+luk5MC5!cGk-[]#;[`,l^eJPO[2k1>5s*GhPJ8U-+hTp'B"@r+\CH.YkMY[#Rs/Z
%8/)HiUcQ+5:oI>PGe47Grd*sMD0%pji^'DBB%/C:]PaL4\b!>A\[gJ'rEO,\\"k8Q,IUuP#("]^<S4tEY"m22[7re3=<[+Rd`%--
%!/l#H"d=lf$<*^M(VO'=Rm#I';*6"T\d@h\4R()h`h%UQT"aei8q=?E_qkct@698sOqeOZ$12r0]-FG6/N/rW7u2b4M5n3b#(Z9.
%#\$,AF&H-A1C@oM_<ulZ9/En4ek@+<Hsd:5O7&1iFi1D:N"tO9TPjh(:mYsNn1JGI.:>jQF9++M:>H>2JIFp;&!Iaae?]Nq.fN+1
%<*77CYkI'lTm"jcX7M;^jQhfOmg*:Qdb$RJI"%7oq"g:qIDK[IO$h[@<l*@"&oH%n+rcSRo_#eO@Bh@7/[-+tE<):^(pAWNDX,JZ
%0M'7BbH:_?.<:nG)!b:8)a*r7mUQ_p(aq+s$>"Cfodj)'N3)bb?VQg([WBppb09rG,Qt%j6N.XQ%orZ<YoCJK$]qEKhG`STJVU-S
%kge[_Hs>J?>aD?dps-LNQJs@*f0WUiJZ>`M=XHqEAaa6ij[A<Z.n/np(h4(OMp&,fE"Ilec):mBGmR\X0.51l"+W"c"h]ZtQ7^QV
%fbZe!mtH3:HZhJA4`ZK-+1+]b.:q>@d?GltN(r2')0$+OJ_R;QJ=ab9^;r!gU$&Lb-SYOMAq9?W.<bK$JPNqamg>fhO9A-+kV=&$
%JXTfZd[k=/&QW)d=6,a9s$I3n^HH*k.I2s;;9iBpjF5$g8'Ln63;O0,._N/3M-^j%Z3fo#WAc'Yf0bKS+136KET[8b8(\uMB:3<Z
%$YBY<n8Di^7iV900p^s%+.cA-+frp_8Z(`H5Q^duS*YU:;[\c*G8s1Y1K8;,?-J/2;cL/3_\X]=0S5c>fHU6%UIXN(O[%RO"Pa/D
%")p#&f>@[IU5,k[9M/82-0B>d6_OklPHp&[_`tmni$mh?L!LU4^-%Xp5V'qeZ-":7NX74Y>t0*\1fV"7fE5hc3!3hLjl")]n3PMG
%P+64gRFqffaIB'&;9jp$'=^0O4WhIi#+(#L/V7Gdh\Wc$d?B_ja(T()&h^1tb_ccXD'FM-ea=6i'-qsNBlO@!h>A]CJn93"<8UgB
%oAs?ZmE6UO^lEg2A<6cjC?h:ghmg^RLZPN+\(])][Y7ifE;O!P8bDk<p=%?bq<X@<'!tR"O0+*,)noG]\,L*28MpnCkIE)$Qr,Rq
%rkjWP<[HPqSsM);iBj;;$tIH(J,8/IHJ6Cm5L"l72Mdus-4I5Zg2GD<rk'jZGjP("cBY\b2<N!ooK,_Rm[`ifbVfu9#mub]oJmUh
%rnI-#B$1oFO<=)\D4>^+1?Uq*fgU\Dc94\qD0,%6Xh25'FBR?#^A#KW=,.e$6:1$Z<1R,&UFZN$;NR+gn$)!:0_$H"iY]22@$j&0
%+U'>-gfVt*-+1Zj3D9`]-j:\BL+%]n_(eAb$T/iKhNM>-e&"VkV;4MV7p>m;)=k'X,nTM'7M9ULC;(l?H$3V#&!`;M4E2+t[A3c^
%$:rsScRFVu`UBdu_S%!8DN8Mg!togp/Yoi"3s,mW<$C5paB;To#>(0WDOVK=R2(j?7F@TZ5FAp97-*_IZ]D,o!>d(4W+<qAPN*a[
%**4VRgaRY'>TnqAp%Bj'+bEZC-^B-<#olN%6*/b%p64a5;B\B$G6;s4qNMQ>Up#j_h;G]VZTe:A"3"]PfB;3&q[O-<5(4=iBn6.s
%Mb+nBFc/hA1plri&?4fZ9U[I'J^PrIjf77F!6#`>MFl0AJWk$@-36C$m)!XDR?3Hb+Xn[F>@G2P#%JFBKV:>,Jqn*,E8H6u-o"6_
%d0^i%9`&4<oc-_>8L8*;-<R/4l$Tj)_ha)\EZ!1oK5tdQd)^*%Q0O2pE@&=8.c"D_gW<Oj>s<Mu5s7"9S0o26D2t-/XG^U.KsMm]
%qpq2uA7GNCEUO#d)db)a:1ZlD8?Qt%&GYYn.XY(N42pXqI/a1jo.;12Z"KC8;5g6s92bPZYSSK\`fDl!de?.ah_67Qa00AKQk,:f
%d_lX244%0-jps0jdWZZZheK'epN5=B3uq&O9Ul"!:-t<Aq:!ZF5OZ@+"$-AqM0mu=*^<Nf#cr.EZ'N#iVpC_jQu0S;C&bYZ%Wom+
%T9rD#L*,*fidi+/i,_r=,:MPL"an[,'I$O2$`gnG]--;1m05,3I;5r;p^G(fA/\;lc]ji1b5+trB/1cF14\)L>&c?D=FoA_NtT).
%_7*OjT):P?paF0,69[[*6GgZi[t=c*'f2BlRXlS$is/NGFd["_4;MbC.A#;dO;UJH]aJfOTD6fU"(79j1A-gHgr*\G>"sEecLa&*
%0bS8o1;\'g'I+0UZCtBt>`,Kdiq5#<d4u#b)EO(MB6KJo-Pq7OCQWV)c)S+4:dR_:/R3'NDeo.?f#"#8H.e,RN86>*WmCLm?S5$t
%/*-F:8EmO+oe4?'9I$4.`LDi51<lH/*Sq6e^`WBi%?3/VS79oa5j&/Qn9*>hrD%\c@GV/e9I0ko?%#/JU[_Zbfdu:5Rf8Ikfd)uq
%hcV30fYYdC].Ih[rK3$`n7'bRTrcTX&\HD3(9._Ib@n&_WLrP/]U\:ZrULh9lEEZ_3!u!iq1sX#*hlRbe-R"D4S#1r>,Z`-iZY`_
%9?cbq-=ZNm202_L@r9kG:bJ[K="`%j-,PQ;1@e)AAOPaRT7gh#8YQE(,h_N78Uq+jM:3gpoJ-sDSE=NHKPC^WE!6GnL=g5<@3J/b
%1`NYkR.9/iYA29YOpW0F8hIn<JRm,7-j9dF"@3DL#(_MR?G]U,Ye&5<Y_$"F&il>bdssRq:XVal9I.d!,"^SUl)c6pW<5@p*VlN;
%rW7Aan$Y%YmL09Xki!U54-4<p`Odf?!JsU5Y2q+UJ1r@p.1=!kSdj4]`HKYU<`)^3gPLNUPTP;)&`q6p@\ssrPH:NLo<aXZE+22Z
%[5lq-ea8;:b[>FM5QhkD@?@*fm)*km41SAE5%Y^)Rj9K'8-hTh(9%1t0f>p6llOT/D[&_Y(,C3/RBe8%IN>JF`TS"+iVD/A[!fc0
%c</\(i3dL,fD;;/poL=N?64Q`9:(tB!(QAE%9'NI,IRS%?rm$@:e%GGHkW7@W[n<^s-g'#Fq=BOqG.Bo\)f3(RS9k0Th*88Te0,N
%NJ<ZI,pr9T.'ePg2@F")l-ep_Em#a!ibB-m($%\pLV]3/H!C[qbC:8,ks#:o8.AKIg6HJH'QL1.djmNV(,</gC/U78H?(89c5ibj
%F_Bs9M'M\`=FdM9%fU1AaVo;6J0C<HB*@Tknbe;N=<;j0=X1&Dk@7l&pdmXE)1f"E4aH;6O0g84^Sq0;m?upuQ*E3[KNn9&F\BeJ
%YqKO?ZlrI/$nES6fo3VI^ln!*c!^FcK`YD<dY3[d9R[bG](>-P6XQiM"'njhktonJWZ\+f.m1<oJOkjR)1e6SM<&lZ.DR7V8:\^`
%U7Md?+B>,(g/Jbn"C#/H$E/;cWF:"4V++uH<b\P9PVs'*D5p1CV0+r/o45O@T6!Wi?,VX#e4T#X?S;k2BrI(<])#`S/u]%&HZ*"=
%%O7F2W$U_'Qn%4he:c4Ze4cV_&obe'1R2HKlo0d4,*7kBQqpDGA1h:@df]!"_CK_,%gN-e%F^FhiS&c=iQ/h\gIDmH0bn0<)ZkDg
%MQ)#-K:#Y0LT/%7_J_!*rPK`Wpoj_XQTq.5hM]M=D^iX"mKb+7&@rh+3B5<IWI-Ke=mA`&im[0e-hh:#g"I,<W3U1&*+Zae:t:Xu
%+,SghIRH1<k>$\1_[Q7gBfApjGY.O^BN:eaD#`02Ho[3SNSu!l`u>N(n)IhSKD;0)Ui"sATC2XCGqWFt9s<^bCn\dM4EP\KrR2ft
%ND#A%U*2S($c=*S5lCIF3M9l6c!V.oL6[,<$-]HL3bQQ62u>bA-G_^T9>7p2@fB(ar!Wq!)<5-RP=-8ka#abB8=7C\0g\5]l`>s#
%5M5f+nm6k/0=>Y[(\"(;i^h=$9rGXDhLpaV8?-H8L7l`@#"^&6I^aA*S#L\9cX$qjZ_42Z'Q'MgLJ1,N`Hds6MauMK<&qF[fiB#k
%Q!+:Ch_U\C]5<`[aK((VFZ.\7LO$X\]^mf?4jWUN[rIQ]//:V>op@caRBjr]F.qNHdgF0IK;9n6Hae@%o.FJVO'pj/n#+TLJUSL`
%74B,n'Q4VtT+:,,nRlM`pg\50%@,Y.(V>INI,=Q\Ytbbd36_??o::=pn+K'IjYfs+n?f1W\/d]\93l`bg2>9m:<4bL9WUt>p/eUZ
%:k(%7js^NDjFjI';P>d++k5LAFd=&P8\V\j;kUler/?7t8'a@5%C+X)[i85"ap,IPX$\D6=11j%eJ"O(8)Iksr/a&ekQ'=L$*(+/
%1oIX$9?=P6JgQ"0NS7/K0$qhG(%]\s+I!pNf)[fcY@qIKFJiP^l4q:[IbZ2PC;ATi3<$!@L&>@-0eh5V)qqnEd%]@Y74WIZ&n@F.
%b9oFPMS?tlppOX)]>kFqMD?t2Qt\C8HD5;,q`.SkD,tWRl"?]Jp$+DoU]/?Wb3aq%oL/*HZqnXlc_$uY_Ik^jposhXHYMSo>0]j#
%nqWp""52IEQcV8rdsUfp^+Q9VABjHX<F';&hHs!*HcSgd%6cf6hd_mG>_28#giC1ZN63O#l#C[T\(>,]$$_hgr@%gi(L>/umJ)dU
%Po7,<2U$!J2PRKZ0eq0>U6O1N*&&6tSUNo>[J=`-(dPFfpY7Sl8>Q"W^$q[A^3fI$dNZGAo3\!e_mk@e"ZB]mJ"[R2rLW.BfDobu
%p5W?qFRUV\1r)0%e*U!3H5)g%C@5V[9*:,s28JN4:MPF+=Q4L<J4fulKEh4,h'%$e+i"EHH6@c+(ISJae4Mq-'rViDa[*oVaJ:Gb
%"d6E`i33MCNLG@(!#9NrnYtui4(J=tCf'@dVK9=L(V[Q;2`qiUp-XM`!Uqs9-!O7nXRnjT!*/5.6b[Fk"M'%aV8A;G?rEY_<r,34
%"n_q=cP%*-?rmga&lpGFg5F_^D#WBtr7+LFIHLC:9+>0AkX3j]mE_g%]l['X+Z9p?]:tu?`;Zt7SS(dcjFR@N6en'b3r;nHLi)b(
%U7bXAK^6:?+=?c\gFpZI31/IdbEqKkX$.]76A8N_h(q<ABg[kRF*LmiXm4#,4n5e;AaI(@r6N_5T=MDs;B_A6q8"QAehdltYO,mk
%c&?0K'si9=Spqn@E\h!U1:mU@<>&4,4G15/DF21KWZeYTh(0QmJIVlNk;O80KgJ2_7mcCSBt`DB'6"u%UpZ9$YN>hT.N_.6-&;BR
%AD=3ZOnP3XI(kdfraC!#G@b4,WMB1gUG>NFIPE?O0;m/B;Jr?W\9*(P/.VNeL+DEM[Et)9%1DU-7e4JC7K)NU0Uj8;RB4-<UH,b[
%*9AmWA;)]>o,<AsMK(4n?L+s+P"MEN:2_bKO?2>l(.MPM",r8;(DG::!XDg!7^*.\M/$jWpSM0q<'6ke:u**G<<mai?LAeH9B1_d
%9$(PoAKD!7q1a>fA`<8/^0?qBKS!@)9)bpNZ!X[jjZ6=h'@pW9eITHJq3aFpS81`F!B1M[^@Ol[rB-b?1V^I!6u^oqZ7_Y3QGIg\
%ru4PPD(Z@r<8,4o+":IA+.],'a0Xt(I9)LZ60[&W_.Rt`:oRd2!-b-^L^E'="7^5eUP+eJYL#?:eW-rB\;%$Dd4sdm)_M/X2&qWU
%Da/!tl/t0fF-@S]G8"l#g.0k0rosO1TBkB76MBT7l]lWgN$L,53;U"8&\CID+Sp6e_E`$)PLF?s-.Nrfk$s;Z1`443.'Pfq:'j]L
%gr'*@e?r>hUoX)W$gp_g#cBU"e-#nN;bsoI@LBT.+,=1YQ4V2d>53-?3V\";66Hh+Pc]Ms=Mo`C!uR$,$KFCKnr48Ag)(N9;EFkY
%(tG8JIVDQKm@Vp=][$6:D#_c*p@=gTo4-)>8VASFplcVfi]>garlZDNCF4R9XBB4'<9X?Y5j%Mqf3b<Xh(.i,f:OO&CY]"uh^LOX
%c)Q!nlu8WFQh:Q.]/o5q(SR=b-,%%go-s?;5-+!l`Ub_\r#=qa+5hK7g14qoEKu;sJ,:+fb7G?Fq,+:r>D8J0[Q;q,pL\R3qPS`g
%!cP_s?EO5eomC*cqInH(01s$AQgr!JUm+eX+eF8d9YV$JL^uEC^!\Ok4B3PAS)I\:K0GcD.+DhF52frPCo(Wt_bsk.L'9Dd-9a7[
%jsH%P!atVQ9Zkk6YG4=H"ufV&-Rqk'^^GeNNVg_aE?R:mJl<;`X;Tm6I"n4-k7(h;+R,\]]fQaaNTFIrGg%@\K*8.+YOZ0=VDaaP
%4grTLr0\gkXjO/lrTl?jig+=E<"5<4W:<Gs>kb[\hn?EYB24_[hPCn^:OT8@o'<IqWnhftHq^9FO9ntbs2ZTlKciug4%L/I4)!KJ
%OFRg4NiZ2m94I$0U"bJURgauRHbU<G\\JH;L\+VAC;cq%AN5p%'j1B55>2MuOE0;Nh0\)n*-J)'aG#Bd6_pHB*XU?4Wf9X)L/nks
%g1]Du&$[Cd;A4U*.VWWrTV=h.TLaC]cR8"X"B1jo`A[t)@@Luh&)!GhE_;4gPb@;+ca%(NbL9Eh;]oi-+sjK)RgBT<9,C)Ql4Lj3
%Y/1;UeY(_"OfPGOrWWkL1GWq)Wt_.]+.qG:-*@E:d48Wh-E%ejl&/:uaj]>_*#YeER_]Qaq3D0u;5A,/;;*CCFeP,MP]3N$])X;/
%C_>kddj0KlhN"<EU;q"`b'nfT>pRei7Rr\;K/jXn+4=C_;:;M55+PCEgPPniRhpP$s1>pt9<Wi(?C0W>l)FqAe;Ps-iE;DCR?kj#
%C,oj.H/l^L[)W<VH33:@]k/T5Gj=uAg)fi`THYAT->W8FfmXGKVDRL,9XSW(3'p,/K;pAm#)gZg>BC<Jd1e'f`=0N6kb*OEU7r`m
%)h):^63;pBUqo<J=DY_S7K#;LFD+qLjp"=-eO5(.A`M<Gm*\.o./@RR"?D_KK171bFomg8n2shH.B8G=g/:b\A@aMs%tSknaY-FN
%egZFa:,&1CKGODe=D0gf`[uL_"$k-sh@.qNFZm1tIE/Lqd=R6@-YsYPBk!WVdK.VYCg,B7.WOqn,55:<%.T4]gPAnuRDCB@:tE`#
%3%'!\p6rT/_Rt^RS/qJ6)U\9s4]e7q#7;j(U_VGJR2ZPJoL&leJs8I(f5@W-U=Q&hhO5H"b[,OO?s;8OhLAsoQiH?O4(Z7kO?]M[
%s5g-G02);mp`EE&"Zg^tP*9ujKUdi87?&T$T=/QqpW6XjmX!LUbTor=<;.fd*L=YjD8/oPB[5"#"rYE-0Vsf;LnFbsRhD.7l7,'9
%5$U'@mCHgD8LfskP&Nf[P3[93[V.Eh?9*/NKP2#pWL,hb-O)B,,J%o`fe^R7nkpsdPF;+VZ^h1,A2=A=IP4"GBLAL^Vlm@]BJem"
%ptVnLbb!>q3Ok"c\tS&m?g>&r2!o7t'4P.8KUPoi,&g`LIW1sHlmiXb=r)bkC*Z&mHX/jo/ni%,,6/!RP-TW;k@tL"O;G%%#Nf,`
%S;*QHlh0r*l[*sDSY"?Lob2*"9+-0D(;cT`:mPN]!.OOiAJ+heA-(!"5Sa1Ch`KC#JdUQIel*gsq8N=#)J)f@MZ/cf2M42?]8O5r
%&,=VA8l';W)Vh/X#f`isSOat<h[$ZS6L-7T^Jg<^Gh#o!k0eEU4Fi\2/69WZW4NsoP@6I+R?7'T$tDuF'"'kid6qEXN.0SJDb<?%
%L_M4]iEtB&Q^UC2Mk4QX"Q>M/>Xc)<er2*NN4L+^>&=m=C94oK[>]DM+tYoKV\k&ORVBADReQ6U+=e<ta6r7RL<O1lQpL&$\let6
%#,IiYU.\kd(p^oELgK$TO';Gb*Z]ui`QWZe?2`]5ln:O\/W2fZ]KVZ:\*NIrTp&Z\?WudD=sp^YK>]?golBc7?%fVgl>t^@<L^`>
%J=]F9]rlNk!DFD5apa*=kl]BhMp&@7f*@EZi?T=;gci.Z\4&qt?7D:5HSHI6+iiY.)fu'P6H(gF8aZgT(n6H^;Rg1l;='E'%IsD>
%G8>ucZh<iE,Y%cl;T5R\e-^il_$?)iiV*G51qOW;3D6+%Ot+6fJ5"SfmT&6>6k%pKi;3=IKFg7I1.>H%7J"L]C$st!4DUP9+aR,8
%&'0o7-3Z%U:CrP&bB51[G%&Xa(]f6>FD\;3`?i5.=N\T9b]&IkAR+9bV_2T"8Js$tU%*7F5X-sO.WSlL9aZ4A;btQd'RW`h'b:GQ
%dd-Af)p8mRPr::\G,_iI.a>k,]u_Z?_6HNFV4pX!Tls!3PV1+di9P5JZ5Qi)E^1Ok^Gnj!!YT*[-ioeALbob@4VZtN9GE?S5*AUC
%nmnt$0^Nc1MRboA#+LpP##sOaXhp/Y7H'D>hIR9AabHRPe[."@e4>EM;i"pj5N0.I(#u^$Y"a%V;g!tgM2OlsJ@:!>q$,6+j(t$i
%SLj+Q2j\YVk+4<;P=sU:Y7`06CTIe2X*H+S1=,@#U)G5nA0.$KTDIO]"`SB*GC_N3"sChQKod!;C#RL.DUfPR#1dqk63>4<qs*.2
%7/]_Yp5gsgNW^L?,`+uuO,-<X#N.;ek$Cl_">Z(sio/bH2YA26=>!F*V,5cd#;hNLA34)k,ERjLY_pZHHpr6s+Og,Fo:.CX,W_WA
%GT?;th0nTWSQMu]EI'C;d@^9#nC`MjCFQJWRP(.Q_'r%Zd2?jh@<tMNgF682Nj2+lPMS,%K`F?lU36MZH2"!;Im&M.(L:.!B"?q:
%>BfI;I!k/'+9m,aAXue4T.t#..C5(8As>*m>]4eI[^'HLMmE3.%W"="=U8aO22PJR_iJb:;@kF^F0cD^-mH%p:G`)ZI?%f/Wcf+C
%jQP4'ORnbiC2<HrOY)-obGIVM=d#ef@E!"Ph\95q?2u33&o#TsLX=iD,5[^,ShXJ*LGu;R@3bh)?OZRH.>6('XXf'#f\!X/Z3JX>
%9PC;&2,Gu^&5G(c'Z]`fi8G63]F=fs]^Cc%BFSq5ffWuYega>@Jt<jC%]u=kDUstoWr0G]L#@&C2$+oeK)Y99'qWnn=+L%n)X"KI
%\!8,kVtF@1mS%DLg%eVZCGhKe020A^TY9o&3YgEO<1HKkeI@Wq[R$,1)bg!&4hqY[;^'/KY?n[a73]JJ(i."4_p'Ac3CWJg6@kL/
%4L[!jZ"b8AOM*a`8KG`N-t/KT2#Y]%'"6Ip`<&a]80V%E8/f0h^KY+L+i/A-Zf3,Jb/K0q!7Dpp_PJ\014s;?r)?lgpZSbXa-QJa
%;_u>2%+I-7"@X;uJ5u<K#1N!/eHo]T<-86W*XYhCrrK7^!)OZ@$Ne3dlZ1@VcVO<PY>3.gj.J_69FZ0uU^hsU^em5dcO)_%-ESO]
%\@2IC8-Z#SlQ3L/"J_6`OteYl\7&;2*R"S+&OH-)H<c\qj9_fs9>u$lKV&>kc7H3"Oq07#2iFo&oAiUmTEt<qlm`(9RmUBD4.Q.@
%Eq/(R*)^NPPa`Y_2hO+%]hc;;ip"V_n*B5?O7$744+>3%cX%"LjnHO)\f%\]l2tFAs87$L1dWLkA9t"L%K+afKplY-AkKYKO\Zll
%X`:ke4,F*%T<fbM$\4YIkUE\n@B;=T&nCF'%>*jp$B*^j`>X.@>GYFSFXcP.r+D*^8lCDE`^#!h-!maE#C\Jq+$-cN@5Ea^?Li\S
%.fL-s7Z.N,B;R_oW/$^nM.Quaj![ot]V-6<;L3CUb0*WC_D9qr2KRWn07je*Gj[6u%r0DL8o;ob^WqfkeOXghcr+C3+u7VMF4UGg
%dQS-`&Qc,V9!C/c&mLHNkA\O:/qGiH&n3IhmbNgaHu3J"^.e(IWp]HL)XCY3J!O*D8$F?$^<-[rf!3V5&_PDg_;/2aoZ!5>:A(M8
%6@%h/P>48H#[TdC+E6%/gaV>RrD8(kHX_8d<K7X(V8;f"LYZEZ:GU+UXrd+JGb42S(tg.%'rkI16;2)>F@u;pK!9!B.OR.PB4O\u
%FE2q'l6*r^P"'6X]'s&$lt*c=CY'n/<`#Y.Bg%[Z6CC^`25u9u''J8YUj*8#@2Z+Gk4/r&'gS:h_!5Ulk4;sVje_<ha\#?8i(NQ+
%&r$!,g&QatlPrmK@/@'D`FAa\/8N?5ED?PMAh@d1T/me^l>as4EoY>hQ(@1s>2g`r]dB^ieUb],?#otVTAKDK:9'j8Q?]C"F)"4*
%WI&Jui4>8'7?[Tr)e"!i:KLoS,fNWn$k%Y8q/KuLhh"=;J]-52osQDKDLptPBIU::3nN?proWLKlQdHC87sEKpQT_C)'f]XA1gG,
%[hO;a.Lm3:WX^PCojEAj8KesS7U!Y3g.DPLZ&gMh`M5b\P2%'"1k.6'-t@0aLt`A+Oq>$td\mX1G]JXDV-[jo<(0,n=5P*>`W`"?
%"LZgXH*N3,ctg.EJiHd->C<<)FH4+o(,[a;kaG08n4&)C=8;F-CH\XfY41GI8BrP.->[^_#MC5)>@e1*Xf.TGjbeg:_&o@O#9V"!
%"928G0?[.QiQrj?7IdJ$/tNtRfa19rK*TcI/YjujMoTXsYcmh'YII>LO8:cXZrO+S>JVh=1RBU[q6gB8_J_p`d%k*J3hg5(EbQG;
%%0B]M7rp[tBi-Z!<Q]'YYt(!-_7cQoiq;#qMtX'L0_3qX-b&-/3h!^1MGtE#3)IIq]O4636'=(49ctTlLBL@GQT1S;KIU;I@Frg<
%p9%'RFG]iG&>]7c@>aq5b0[>4>U,6B7`mlqRF]pHpIb5Y*s`6#heI"t$6W0Y360V:-:&`mVcL:<MH@Z-&&G33=`EXtc%+o\f'1F3
%1D2pHGn2S>20qNP]E0;O6B0Qpg<:Uu*r'!5:'Qt@i.@a>E:HC<q_?q!9Dsi14gLWj<0+#AWChq46/qMJ:RBs/Hi/aaTcE6;#=SgN
%Y/S%)*1_l99HKK#"2=NCH\Y1nMP'H;,U4uFC2&GC0Mp`OlA@-!=Fj(]Wa79qCoZAfYDA)6TRIf"[*o[#UTP4JP\a;2D'j7"oX!+I
%=^d^V-)mIDTnIp`%p2oFA+`<d?kt*N(NN<08%RDR&\@48855^WUrtp1i9k:p'6WjaSWObHfNR)m$_i!BK/sf#+:gkqdZD`<Q2RO/
%p14G8DeZ9N:YQ[?l&JZ(>:.QReBVua6#<Ml&/E]h%CbL`$@"4/+1XCrrct?nr$*ksH+O[A-Z(^M%uG69IJ_+SKkmn@`b.JUQ2Dar
%CK&g:QQu^#['E+Y?OEG*"(<$`Xt?#h%gFdtP'H%@Hd'krmL!2i3./S1Xtp]580FV_HJNRWC*;s`.`Sph8m4INH:<-*Jnq<Pa11BP
%VmdB%8Q5F@ApLPcq;]T>aD0eO#oI%d`2OM`l-ut1q:ka5p@Pj-*(.8m,i(8Fo+PP`p+j;CXcUf(^fFZ.;*;Dm<.c.%8)rtVaBLHJ
%&V.uf7e52Y<@bhP__SBkZp:8($>uoJ#YcbH7C'i<kF_79f`fhdg=p^W!4'Q&;XPsSi,Jn+S#`3e&d5K9=TL2!EE$E%YZ6?ZOEHI$
%8OUc3"N;-bPi@JJSEbYr)jPr<GfcQ?#ZYOj![7/OJ"G_NH+9$g_6SrH-E6,g<Xsp1QVLLG"X'4jR+c&WmMBI:I*8du1oLR8.k!),
%>'5=&!6*lu@Bcldl6_r+e,k30gmAhLCjpQ$MO$BE&Qf"S=M[k\TR-s=qAECEo=2WX$6+"TlSQTH+5U$FhO#[/Ra#!#fh.gFER8[)
%0LsR@.J!$3H[>"Y4/X:oB?Z*Xq;p3]#:Pri'7Lr8++Oa'#jqV-Du_=l!Y/Ua.;-?R]4Nt4E735]#tGShK$DJfd(b6<X'+.fCpD&R
%DAXAaVQd:mV2H1oQo!pQh#WI+[:92UJM0Y`VVoh`Tr_@6j4KFrJ4*<*6eipIfPB.slb2f@[9m`C=K5P<1$#CQWL'knG0:Ri$%Hn)
%:"<K)\?MusR,5I&kP?'pM,>EB+$?qG/#N$0UqJ+E!?8q3^bU+57[9B9WjEbD0u<&D`QQIp>.EtK't"C0MBn2&P<+;:GMN.%k1n^E
%mtB">N!`)*mKdGr6;B^JdejD,Vs1rfM_dhBAd=-ip0WsF%*1f&6mt5[ZtO1#qelkGNFq.Z(^FR9r_YMW^jltTR^W=TIpYuiI<6j_
%M^sd0l,p>H/BY0LCO*FPZhf3I51_?qW3-Ss<-DOk$$+W4dol,hSu73!&Np.X5ibJS^ktAZ5\qp6][%-'Q5R>0'%:F+j[mpRPDCp>
%[6lJ3OMqT\+q=P(G_69Ha[Ba`<fp!3P>JiKl:(M+i34(T<^!SZ:KTPMEW=Z=GM8>F\TZ]KSJHdIV!fN;#Z<cp9NS5$aUl;r-D\/e
%M3pi8JqlXW0'=!t\ooRt%:ZJ<hJ@?EfOIoG.lp9Y!SXs1<&4P(mN<adG$5"N%g;f\'8o9'r^\4YBp-P$a`qc7[HbL@b4/rQ("X-s
%g#"cFGRpL<2ULAS":.DcD0UB`:Bt9A&FZc@7r?sN'_+N<VJ-fsRW_@RLc%iiINeB2dsksK2sP%8RQAGi@?(On'fg?6X*?d*a>\Oj
%2k"NLC*f,LD1F<.kQmJ3Qa*m*Q$t/ecTPi:B(5PH6h_&]?R7-e7ISaPq!+dFc+:t/EG8`WmHX:%]*t>J]h#.E-&H<Llt)[@/->d*
%Hku"!PXJWVp?C(or3[Q[Yl1ucIs*1sh3C==1u1_tQd]G@@fdKZd7oK,p=XDQ>`4b!r<\R^#&-Sk,R,5$Lr3:[C#QC8e(#AQGCE!O
%!&\:KaEB/6SgCoM8BWZHj]lkJSr^P_.]Z)Con_`u15Y.pIHJ#^1^i>bJXRq$SkRhDd$O"^"%;A7o0'eWbU7Vf'b%j#fu[N#+<lO!
%5Y"ZED$I[&XmnH+^_nX&Qju%UEZ#LW\^5b;Gau((l="L>POqd&^k&?$W'bqNf^gSsmu41$r)>/_r,Z;DIM>@+bH>_C8W[][T+p56
%f6-gScI>0l/+m''UDN=N!M9)5aWBLGfKY)Rp:g#,[FY^<aHQ\NRqOgZJO$a@"/THh:MA95^D5n^/7&[U>o7-pjQTp`8<U3&OHB!!
%+tuA0A#58i_uX^+_FQ0o9ANhD`J?4Unp8`C^8qq%UF1P(,L!D$/$3r$mBTl#%ccO@bC4d'$TP&+b%D,9?V9LVQ-L5)i&Ycpa%gR9
%$6Z^UD`*DsX!kR4Zk5o&mbPqG:o*HE*jnR>TiSP&A3j;&E;JkaNG6[rfG>7$KQ0%Yf2*$eLh&6P"ScP"6?UDoD/:$B&O"+h=`GTm
%>::V4+IP&iU,dsA/YSH":'+]8>Ys'N`OJKSBW/,LJgWOQ,X$uP%,.sA2pKjjdnktD!#V\k[CUr75^Pd/mAGE\9A,pkL[#l9PpRY'
%V5>pkBrU>(D))i#[#_MlTKkn66I[:_-T4d%P=sDjKI"bFVT,#H^.YE'8Y5J__r<TC"C2QQ4=S6hb(:igh&EO3[:qZ\`hKKkh>7<>
%M](i=H$],mS^^eDM"B%tkB,:ap@"@B@X=sKp](/UdgOI&6oC:aa!h$1Y&"c:=^qc[/5&=&'hP=[9R`8.!rDRTdocU2BD4\-.BUbi
%l&gDIc*0RaiVIZ8-MhKH>Q3!BH;?kB$m]Q*R=P)U;MAXZ%Nl(;U!"UJ1u^n#;QK_ti`1CN@0HEEa_Z8m[I(&p<h_c1bX6S"?XNcK
%395XYK[<<r@r3hSE3"aP@0cT68Vk?`J8QqGc%t<`!jJuo?t^p$l`j$a+c121J;,gtdAsKSX40%gO%KqAAqZC28s6b=Bp@l',)G1o
%$)lXKX6>V.]Z<cAB@.0&YllU6Es++UZOk[gL'u1sH.PK1V1_90<6-<cpNh6GC&;^oWis.5P=kS,!F8=lSC7(.Xm\_8&Mk*J+t/cj
%bhZXXcKj1a"]/A5gkp4b#`VDqn)Dm@;%4-PJ[.;1aATZoW*fu3DPa=h`,b5f?iB?Ml.i(&21["l2N#)L;P-S\*,ST:;oY<#[),h9
%<eFJ*c\JMCOk%ECeL'c,hWL-$BX5ic>0JNCNG6%iY+dcJH.<@;_q0pgoL*go,-IPEpA=<Mg7M7Y"bi\45!4Y?*QSBT]RnOOM:"Ls
%WP1bP/H'<T]j#C+_M]Y90r\im1SnjU=A>29]5Ok!F6.6R2n5>:)(?2[ma\n.gP^E)lYW6C6_?)*p3RoJ?o\2ZpK&rrV2%9e($g4>
%5qo#OXAc($ZnWjb#Bp^uTL)pr15u>bGQ[(H#8JNo.o^?#lE+SrVD8@p@7&r;A,9/<7j(ROPl2g5.Q(n:;t=C*<JV^&VBrh1VoSBR
%l%;HLlBVZOAt[O\)r)o:dV.<f9"60-jZ^EW9:*SU[&Q-bS:;D\Y4!>&%5L;'o*iM8SN&$.0h^h`nekK8^s1ZF=C2A)@[Wt0Ru0jE
%E4;]?DliOjeQB"WhPD,c`ptO1,E>51L(;M4X4t50Z!qq1)$"EpDK4a?@_(GDMOa[VoYm2KB;u#&@di^#la2:7gB;FF8:>Ia&:`I*
%iIZsZ#[E;4J&VB^HVsH$,nRP7;4$849"8p4]lh)"#Jc[j^DT1;&lB$64chfn#(Gt13'f@$.YOU,OXp]kOU!'<EIRoTLj#%AU?IjV
%-;8"2Nb7QQ+^qrr@G&JbOcsfV,jGom$5$[%;OgZ6!LU&HqLoU%.bf*3^1*e:Y4._GfnGQoHO5nY)?B,lDOkq.R>RqBI&=S/1=HLt
%C\R/;XBqI^SbrV$9653iVTP*sL>5eQ.PPoC7%0=o^s94eHM0dQFlqMXp%68eG#H.^J\OjoSQ'R-&s(/8Au9poPrWL[DG#RWJXh8C
%((2oa2;H:VUfR#KS?b.u1rlUg8m!,5Wrao.EiYJh2^>0'd\/hl*[0[4(K9>m,qPVG-&S6FLnk<9,HLZ&DV*\PTDam-TL-e;"r0k>
%"m$,71klfWcY5EJEX3%A"'/?]b7j[YI>*]U91fS0;$Gnd(UWMLS)KW[\"dS8>W'b7_QtHpg9>Mb*ZGFqC2AY/5Sd='<JYg\qd?/(
%M[J1#icUI';YK3U1OU^"G$tr`!F@X$V'Ih9W:QhASu%jDBnh7N'n*o,2mPN^4m:]'FfD)p-+)EiJ?2<^ZQCe6L^?Lo+g%A6RB!H)
%6B:[&qg*SSUH>I<Y0,0cc^deQ6:ik4Q4G5,X4K(nL#eQL>`g!`4"0\J^P=p]oulnUIk'`:oH.)EJ]W^;2i];uSmI%(g:D/K-XN%!
%5;/_n8A!<W#_l^<;1L9%M@$*bh1-#33@BA)]Hea3&meh<'Ku7p!?56GJlIK&3cgMB832?1((q;^P+#G.[a$I!:ahP#T8f)kGFc$[
%C@UN%;@j/lP,rKj%Vn(<'.e183]_*%W1I-T,hOQQeKY-e,"Z(f15+(A/fYCW`KI%.KESbWnk*"SVHmGo<csC(l"ftKDC*2u:VFd8
%1-mR2lcbNd]DK$=b-^&U0k8NNhgIsA2:n*>\2;gjkgZ6PbDhuK<03LsGDMh.`J"BHK[X:I)t%SVUacMbRo?>0!$tUEZ>m/.c2bDP
%)NA"7aY"=)%3sj-eSC^Ij*H_AKrp+`.qqM=8m._>c'0g6P2moGH-`'jBSpJcV/+@KQY!hVo`j<KlGAfIXFbY$2@04V8VU8A;E/Jd
%e^hWD='^#MYM?oekpsm\;/l3T==D\C!f8Y3k6YoBmd,5_^JeXOl2[N];gT[$mXX$4p7`*VGb25U,q"PQZ&Yr5iqK'-[bk&uhh2D>
%F`LGe==HO;q&:GW6^)A0't.VK9(U^X<5bY@PuV'jPZK.m;-/#e0ta@'B9JAeoSa2cY]s_5;c=parr,Pnp@uhWkG4RDN(JgYlH/2g
%qf77O?]+gb>]JD"a9I1_K@BbKI7,`L'3@QlCd8,PJHTi0k/73M3/^X1E'8&(rRQ^iHAn@V5UUFR'k>2H.H,eAXMPh0]@G*["QiD[
%ZAUWsL/m0HLu/PA>+p*r=<eT''%MnH4AiE*J1JahWWJ4;U(_EF0.`fUDjDt[VgneI2ji?>328Pb\%=/M'9B+Sk^?VtPb_VIMA1:J
%iiG\^b!Y*>W7cU`qrN3OCQ6Xh[e:S;#f$69/sUUZZldT&nD2&8_@Ou9NbXJ4^,u63)TpR!__boc&?$]89$,HL7mhlAr5qdVhPrCT
%e]lVVI>]4l+_,W$$Htuij:s-Tk6C/ie/1W^>8[q8/#$N%!6,ZD\]W,#,qnSq$HK]?^n^'M;[c\d%XW@)iO^IbHK1u#C8i]oE:)/]
%`^bPTBe7]/^)TVTMr>DU&ZgC+ZNbX;RTf`AT:@sIWu]]0bMEQE:k`*/J!@CQdfptg,h-L)LcV)Zn!-RqTdU3_W)q&HV)?`kb-4QQ
%h0tM%`A9esCWFl4m"5c43ns5oVAGJr'f_?*'<G=-%]JJbh@#r]=QdO>o<9!JVmsUCY/RYGCUP]0Qp###WtDsuk!cOT*Q\`?W`L72
%:[(7&YPa`.S,E\K?^q#\AuC)#\I1][^rlIIodGe$\qh_lbcZ.4^?k))nkT1J'\>f!AYk'lYXNP.'"K;TZIG,e]dtP./B0`F"'a5p
%C\epAos>,SD:S!kG*!%UkqJ;l;G5a7F>[#Vrkf.YjluUC_98K--r3A3`DC?d?ETM,PC`3C]_qH/,)JR,2,l%u64)04V7H`m#h9g.
%*,m.<+K(P,J`>\E0M_A"R/U?rSlJrKn>)GJ@d$uEF=.cL.lE&u6`:Gk<sf[0TeD8s1NXi#^.s60gU](8<Jn$Ri2OU<KLAX3=m7+?
%G.lr&:blBY\eI1AKFL\!s#d[(]YN5C?@=M'DgXr#D3QO`I]9HUC+I]jk:laI2I(PY.>D7tgD*H;UFOe(LP;0lfEo]5RuSt&Di2[?
%:g?C_VEdQ_4Zsk)<C(j@7@G=LZ.6+c?O0HLD#2!9!;j&'98^+ua<MnnI5S'Y=a,\G3L16kAp'CL"f,]u.*!X::mjCEIlI*GU-^8'
%I]9>n:nN+/%B=GJiQ"?lA]-I[C8(`qflb_nMJYE<96Lr0M'dV\UjMb.I[s8PmEZXJrUncLJ%:.VQWj:P,,LO<..6oL/NNsIIrKV1
%$f-f:79ZO7pZ=mjgJj+;Fu"l4?TbTYA3f)67'oB6'T9,C)q\(i.B:ES-3[_V5..sT6nL^pes`aNE>!iX881MD3qPj%YbE,nmoMku
%jVQITNq,gnY&f!'Vq4^l:,V^j(r*bmkJq&[nWiBQV.O7aGD?L&S*;bPp]8$pL8Zl,3bi/hD%A6bg4B]T%R7EMfVLoLUD-t1FsbBa
%;M3n>[@-L\8_ui*$VOKr+<2<E)u#6baX%gA8[_5Q#Y^Dn$G@ah^GKH@]r/g:?BVh2OQG"9X(C<BJ+,emliM=]EPGJZqeq%cU_WAi
%OmY*SdKZm%2`9MGgaW>cJBb7Slk!2CNpt;d4R/t"?'ug*T[-i<aWEN\#jK9Q\;ur?#!Y\46nuVl1*0c:_5FbKlUafk`E4cfEq5n'
%ZRU7[!Wmng*^JjfaHN.MD`fq#P)+jG>s/?NOCd+G#TC">Xm.Ja-YgFQ$E<ggXMV1[@$bs?I%5dX:t0.G!/^!s@eZ?b0g+8(l\`PG
%N%EcOe/(qI)8!4So5NGL9J4\^%L#;B_*FP^m^O&:;s<T:Fe_WD+aIgK`9nU21C6u'D'V;%[Ns0I&&PDTS80^WJ>Q6ifqS&fEO1-7
%N]O/c?S*U?R[mV'Im/")@)<VcN/W(hL;X(O2l4g60>9+\GQLtkMBYE^0q`-+$<a&bX>a8U2u*$b><Ss55%Dh2f3b^LoVHjub/aA8
%7'u0G4][JeZOQnVYrEQ=YQ89S<An-,RRQ<@e7tY='q".=(t")BX"aAMeJ&%\WhbKQ6S!n%"rU<:KP_qPRjtXq&[#YW>T50k5tt&Z
%kM_l'0QR4Cdh^t$fN$1]fbA-G2*=_o(gL^Y4KR_h\*&*al_.,>W@Q&:mF62=(#C?W;1`DOi`36[JRb7hK+t%<9R<3Q6=L0hnKq:E
%LcA1?%Qfl=[MaYJ\p+2k&Ti0`VW&T!n13(pOTuZue7;*]E?TLm/\5Vr-9RR?<cqi-9Z9HOblI2I]b5"QiX-r7.otfs+=Jn8X_pO0
%pCDXlO+##]la=bsG)pcIqJ]%R52*2uN"S[,&PZ#?<miWtS;S"j*W:Y39pi\1?0'#:/p(`^UGbaAc7(8PI"^D+,SdO:BJTn\8S`\0
%$_L_WW4G=ZoT<a&LGGB>';.uiTM.h<j$qE%b%u&md9+=O7[CGD2lPBUS1R]Nm/ZX1Z>XtG-c.Pt`1^]GPTM6\fWqQ.+?E:*a@Msf
%3H<^T1`kTe0cC\rIPe<[%tJ1u#9ZSpf<5SNL!MAF1`=+Q3m2L%cT(3!hO>_*,uE<d0!n>kbh$O53dL$>94?qe(dg*dQ0Wk]g\ZGG
%lQ\BeGK(@i^%BTA]e`5pM?f9f6>;nuXXKjN)g,E8Ru^C9*3h$$O<--Nq>6t>I:7]+nC!#9nP$c.m"-Csgj"Qd.X>O*.Re*G_sNSV
%+,hgjnc!,jo71[\3$6>i[iacK(HWk\n"SPL\$?ht]CZ%:nAN:$4?'i'O]b4U6?Uq9?CFMj(k2KV_F>cp[.BL#+_"$c/>aeQ'*,jP
%-\Y*:5'VgDKXl%1&_=K!qZ9@,WC_Ps.3<8/p!T[a($<UKlfId+jj_NU\:8!9Q,FC`]p-IWHj_#A%53pPK(it(;AZd`ChG,4L=R)N
%"05Fe'3)"A^TJ;9j$_=l_CZFEnF+>EV=5]Gp/R4qg60BNia..`-[^)G;B$ZUF-Jusen+IUmi"<Dg#7EL,(Q4;hGPRX`$g@[Z7qDo
%:1)5S\D<nIWoBg3o:mr9D_@RFog).rkA5!MoG6[NSM*s[=5osYQ1*\U-@C7jgBDh[DOO`p>Tb_ud:fNs@8<'2Y7'fQcb>2A.um,W
%C:4/?VMiQ_A.Yl+6,gSk!MSk<^U9bi+-n+QEgO.6CF#n'qfi#2qXpK12kMfYHKgo[c0n-S4,Q;ib33/3#4`G)3C;Ide)<WWd.INH
%m-%^U>-$:@ZJHb=AdZi?WJ4Vl)T93\K5]/GF4-0(620]7F]$YV#Q5taYhk]j;#:"O]3\a5YsIjqkGB6)\9XM_S2I':$H?]64SPM(
%X1*k2HL$D`DR(dmGAXXlRuAieL$(@X7i[c5*8N@2m*+7*pHh8G4laE?S`7+'S[N?>0$H`WK_<`_68R`cCc4Ud&k622Ou`CLV,p0-
%+=K&A(\]8t.meh[:'d3eJ)Z49bjdj@<u60epSJTr9']aK%t^RgJ&Jq[q<jmPjArmEHe2:[\^_<H)-$(A7Rd7PWsa!?%R8NUVuhMS
%6R@m2eNutMbIM-#1*i(QM6chJ8\kF<eV;AX.Wf))SJL]M;*XFj[aEJ:OV*h@!,;X.1lr#u&EO%[[!3%Ylj8*6=O;<n7'6_IhMqW@
%7MDS.VXQZ"TSiraG]dFGD:&N+mQuI@b3JYmA5QHK^jN>OOPisrK^=FPdt^AM)8V8q+D<%A7e>JhP1&@=WhHRrPou"q)V3*Kg/.Sj
%i$s"jn#2'e9*'8ODsqZ%"Sf]Co<+2P(\mXR><SlTjqY#1'Zip8!bdO_>DS;cXW+IZC][\6A0s<FLa_]qJ6K!PdPXNLZlR%5]0OS6
%E@cR>YX-j)k#eY2M<rCWE<;NSl`,:T%]R5U(O;<'%PTq%Za_-'77bIj';m_m`+%)*dj9Q!G)(kf=;^=be%W^YT\l[U`$B39Z5+k#
%UDkB=4V.K@j^j`7+nn$\O4t*n%=Rf8N[PW->#GJV@a+F4bu)\=A+9l0U2aPA45'4/5k,+PepILfPCFAkR"Q.)[U5il>@b@l'#E8c
%6nrth!=cZR^a><8,+@>n5mIj!K8\h@3d+b'iXr*cA@U_""*o4YX#[/XY))&5W6QkBX9MGn$G(A"%mCZsF-h24?m1?[fJaN^DB/FF
%)GNITe0q6/IJBAC4r@QmfXHrmWk[?elk4o6-4'h%"<h\f[QTM&ZdF4N<$'Hm5'SBXLVQccS(]rIAu2<cM2J/L%U^WJDe@jVMKo)I
%:N&DgaaJ>$b-$/9f!D<9Kk-;A*:kAV#0U*3H>7n.`IEG[dMjHIBatM5`GQ3r+("FQ[qMP8JN@o$h>=tQaCVW^F`/8gZo]DPBqa8.
%<F)(]"kl`=DJ;Um`o?F/%e(GU'0qqhD=&U?CZjFY1HIS%LSu0k`cUG)qe&$H`\=UKfX7j,D6*-is!'b_7Ee1t4G].NUHZB)06tZ%
%q;59iZQUK%lLN-PBd9c'=!2LkKG!-$i&_a?T(]#[m^.h(T#8E)b%0G9[[N(H<FK77e$Mf"_uq!8"f`:#aXNfcV>ss/FbCB"<=2o_
%(<eRinaQDFT&+eUP:,6&;nKL%fe*(!jl:bd.bI8G5^`Oq6F5_K!_KIbFkKnu*It[DHM:%7Md1A0<M03+>e@Jq9E<(u`5.YS6>7,i
%6Dn!tf#)&Xg%1BgKk/\P80r7P'GA1"B2q:i<o((3rFti'M--<jP&P6<ou>2(c%M(0f/e\8NSB0#FVgo1I,B]_S4PD8Y>33bA_MK:
%I6E4V*%E]W6'NGCOJbQ_c$PB.6<K&m&Y359T9iC<jToAed72j:)3XiNOOU]/H/sC\;B803!'ID&q4Yi#cAh\s>sH$q!M%SAVQ__U
%F_RtA8[h=CfULU7=G^m&m\:/f_Ji@3.,GLde:1>G3k?e?^5H:BKMHOr5*USS,%,*'0h7Dih!gQ?GEq6o0G)?jM*RYQi[C<3A_+Nh
%V9faTU!t8V<Qitc*.]k2/(""<e,]tD$1<>DoTesLN[p-cKj.J^Lsod-HHm"f@`gF/ne\"IdN)FHG2&H*60D9%Umep%6d<#Ul4i#'
%*LT<iMJfMD^MjBqp$U[)8^$)X8gY(C$.R@(+85&J';48pK^;Z$)d0#ukU,MONqMlOe';rUI'4nTaVA6r1s(#;1;)EIE4DDs<RSj?
%7$ChZ8b%noc^Jh*,(q**(R*LL\c>)GVSsRDfHJp0oO1feO@2__kA%*Y\m00XOs;Sfg/&S.'p0ao6)dKg<g#*:G=(@d*B]760';A?
%JZ11WK9963?mpF*1MCV?[8#<5"@aE@Z9W!iYkt<L+Y!Ta`N]iW!e%(0*0,3qPM1\`AM.2VooeCT%iB#?<pu/sR%o*f?ndlL@MMI*
%W4HMWf7fq/,!\/X;^E,#)3FKq?GpO%ml/B5r^7@I(a\,lY&:*Q'2#PeX8jc[=9%pDpMa"6?,=QS"eAUY^^HfGj:mP-2Cd"Jca>8N
%jX:8:$>#g7fSpAGLs*#IU]l(C1B-RsDmK\P?kmX4.*h!p#^]KUdg=LH7YT:3!CR`]#gXck$7Psmh;XTh]43)X1"00\g`4&$',>X^
%aP[*G7a80pnbsD%"WpCIJreNl3ZHbn4TJk.FO\^?qB3`+Cr`@)b)r>AiQ0I3?6S*t5</''J?@0)XX>:-Y:aW2TG#*FLr9cJ&%bnG
%mJI/N1!r4p4jbor&jhMi4#`T>LklOu/\AfSdiAE6Y>SD36SQj.UB3u4=Mtk!#/@<&4U,P@kSnHm.#K_b$?^SB5`>'`G7][#]AoDF
%AfC<$M._]1(VG!61.2dV"cWR-G#C$rP2[*9rS<d$YW:'XU_!MQZ&j?6;gEVt,'@Q480I&qlS<4siDNQWPmnruo2;L$;3)p2<kp'B
%8e3+^eUt?2oC=9+J@US'G?pRuCP$W6eoT!O,*OdfY?mO8"#Dl"MMTrc^J;app%j?Rml@"FP['b5%6<nO&A7.`cR%tD%X6gW8PA%M
%k$BP+Ua8<8MKVgknLlFC8.'L/Qd/AMX;)le3Y+uD<%#SF?&'dBgK\*7<<JEMZ7`A.W3nc/+qR0A4p_rH)0tVq=2JU'!"04]CaPE3
%f*4O@hf>Y3ZEEV%;-gt=VU85F.eC]7!0=_.2nNqJ#VK:,QWb/?7U"qJV>Y)INM\7Ar&LNZ(dMRt&ekS)&-rt2?&5O?f(`d&20kI%
%2'G:@GpqI2O&Xl&kmQ1NbA8X*b)iRPJ:80Y'0emJ0;A6M-.s911)DXIEmHR`Gu^<J`XFHhHJ@KR[\)FQ"O:_PGQhS1X`ID+Y`h`S
%H6')LY:ba5]VC3o:mDLC@8ZR@Hq]XGQ6lqF03cR<<HUZ+/=?c_W*^AkGChE/3pELs6uOn#@<uIYiE(geeL"-Jc5Q(nc$rcE2UDmJ
%?:;(R:89oqgDqHUO3HF<%IF\_bkLZ7TAFhXPPa\R<F5RhgckVm^>\DS5P_\C$UMK*?sX3>md'=YNrRG?r#KM17.TuJT;amZi/ab-
%mf0eGnFsN`B+^uL3e'blGm)"`jmN`+r'15Kp]'t@s2TWh\$,N:qd9'+_c6((m3(*E;]k_t4<4C*rb\,lGY$A_j\mVq0U)P-hu<M&
%rPLl!fDj%.SGuSbqnd3g:"4[mr;R,Vo&65@gY`!)Hhb4fJ,&4,rGV_u:Oi7#n_nuV+9'[fQ2dTX_f>=Le%46[."pCO!'48];N5'Q
%;CL?C"H3DP2%k%^%3QB>%RO"Dolq$;N-g3j;H5K*@p/b3C*=h2KY+#&U,d>b!t6jQf'&7mF:q0<31,@_(t4VS1f%p'9p@h!ik[Y3
%0!#bf&/*8U(C#YTRW.<Lk)sO5[I1QOq-=8Z2=j_^V^/3UTDM_'S1U<D.rMu'crpqO9A,W.@SK-$W<:,ke@aIO9qU9GkYp2[HqL90
%0C+*(ki?k#rSXI7+9&(q54deaog*Rk&##C3jcr21O_TGFJKZ)!iK^QPIm@/V&?-3lXqf/LEqQpK_,_ZgAXf/?OQirB*/2-@)`RGq
%"InOM>^=G_2]6V@Rr$@O36ZanMPQ6/LsPG%r#6(kbfWUTpoT[$\6)"hU.u7#<Bh^t8iBE?]61kSq<fTb-8D_OmtK:P;!s$"VEODq
%4KM='WRi4uYLq<.bNR)%E),)b<:krh^W*l^(d;e@;q(8GO51;&(/:'3OtZ,,RM8R>I`A@-*6A//S=b]>hUmiHL6t$7io*Y%jNG8*
%UE4on-G9r^ilReaf`1FmG1*8^5@[mUQX@\krT/t9Jc@A$J*HtTXT.)ZVYC_VCq>ZT-6*=-gUBHT(+QkYb.P2W9.UY`5udlS$L@(?
%rTgqkk4V\1ce#0WV\cADTpk`1D6i?V;`JJG?IARae"#/L3fiH?k!=!gnKj7]?iH5YFi)tYf*Ta2IEW]_X<]Qo!AntI7lG(CFVO0/
%d\H$f?-drcT9<FBnrBl4rdgsl40qh$5A?&EJd!'e!NBq&Z%JMWFa)4U\d`<"'Kf2V#g=FZ?73A.L8#p?#?inJIPB$UOXV(j&&$kK
%'0I:I\]LH#R/'<bECI=>%<M)NUiVQ$m0^Rj_1Z?i$Ik(b#P#$5dU1^g@0(6dNQ89=W/fG=#3LA;O7"BVgg=6G%4[q)HDKoY#/%8`
%QgFO-8Y"Q]T/#8KD3DZ,q$6tBm.]Wec!9MYI"YcLeN6Fo%FG;LC?@V<nK<.'c]b!tB8j*#`oFJO5O'f$$*&=!k>dd_#Bf2:iIu;A
%6L*(&FqIjRM7DqLP&Yp*CPDai7_@7Zc-B7#B=Opp2e4_m2BVD[_EmhbXs`nZB8iKgHK!9[+6Z[q1R&+iCqW&hl(D&N5QQ;R:0t6f
%JI^t?2VIRT8o0#E#^?;1J52,V\VXu$>nO,C"PPq?XDM)27r.Qqf^%C`i9</=:%\@0f&sE_`SGS%XM;Q-4%=HG1TN?EYi!04)kch/
%p3_td80.#@?.Ze:4'[-pX1r*rf2mIQSU=SP7QK:7#<HDBM4<ZX'j*d.0qt"AF9ouf<Y<;V6E\%'WZq"D!e\:prb>B%R"kce*u-a\
%kfkeQ_=c92APck:LJU$:8;FSIk*>/^'N>fJW`OmkOu:^d\#+Xq%t2HZ$rm:o20rtthl%<9]M#2CVAAtT:?\-Y/VA*)rQjH#9Wqn5
%Zi3@*dTArQZ]?24HQ;[mL[EY'q]m6VJ(nRE7sI`l%43q/%kTpS\'edE=MUpCK"Y*fS[er:F<_Y<'NjYjJCqJLEcjV*FfdEpELA<8
%eE`mI?mH:$?t<Fbe#+Y67h1(r8VuZ?)<hIOW7(!/&oe/@Y.=pR1/3epEY,+g#4D@P\Ct+(I\4D&Gre]B'/CDhE!Hu>QXZ,i%=XMB
%3G>Kg\BXaC::NI:)LXd@Mj8Vb[U\IWm&d0(;gN(HK`Btt\`HDoOH%2,-,)#2(a@51PZ,W&pKogd`TVP`]PT%s5nZiU$81.AE+<nQ
%:&+'nh7UsV'.-O?5k[s[):Pm<OI0&+Y@SNLc-BD]->SY<I2fhNZQ[?7D%<&rkqLdbVUn]GAL`I.K2'D#rPS+`M,-HJD).aLo:9QA
%TRH>.TjOtSak'e3k;@b`hN!^Fl'W'o3@:\5p!DH2[P.VW4L-Sr:cNtcZ%)NRa_`uoKSSB2&?ZJO&&.GQgB8"uq)6X<DN8>NeT,kN
%&7Y8t=WA]rrHo8"p@CS[4k;grHLM`OFn/PAhe#AK."B1EH.^OWLuO!"4)AW#U4#<*n9)c.S4@MT!=-`TV/N*_Q9NC@T">HGmE=6(
%%U8cfgV]VC&--LTmFTA9\B)/LDj#NEhdlVU5)?Wpg'?N-qULIoI+.,bh:+H2O%fZWMPacfpmb<ZO.5Xlok+Gr?l(lS1)-m$R`uK2
%;$)TJa7X=:E?]3H_BuWa*bof.=s'@]>7aE]/=,5Y38Gm-p<V43[=#U5%YP,?j?E93Z;!V<HkUC]ID-AtB=\Pe4nn8"486m=pl.1U
%#&0uX4`G9fqR\X1'BGckW-8\go!lePXgic\FAV<o8Hb$Sppmm@F+rn"2kqWko<F_VrihHTJ/G+WG+ZZ!Grj5o'CpH)[D.J=l9m%1
%gd]%Mef::4Td8;Lg#kHUHDZ,_mBL$%fZ?)N?%uK.1JT&V`?&%Z4D19X*^YSQSAmIJctf9J`qcAg?-W$"MbZuOm&n>i4ilk1A.co1
%_>LYJoeHTW'.'@,gHbgg^nPRh-$qhuCbG!!grI]lJp=fM?jWEb;dD.JZK&FFj+Y,NOgOReh^!t[]b3LNL&1u>_sbqLC;!BVkO5Y!
%<YFO"QtM8:2a?@KCgMVSRkV[B)dD&la<cM%KBF'-?"#OA((MAsR"#Z`lk41(nQ<-A]d8micc"h_9o)(F36"/[9s>u7j=UJ=IC@I?
%4i3V+S%XRNXJZ$IiO3*BU&3sZ\6T-E+($5f*KJ"4TQf*j/RSpt/[5U:N'\%j;f>"/W(-%>[%YC$@di6-R[l?GSN"[]Ym3k+?23c;
%RNeqM'.3=W@LIH#4rkp'/>R0LE1cUj>7Y^Ohn3U6?i&p52j_7(,:WWT>I:h+)odSWK[+9-odGb+e[rAY_5Li;bD'um_qJY>@hkkp
%G#`G^H@lHUjh9Gu1u%&,32del!=ik;-[<8X$7`W'S(@18F$6F%b'X-HIqH*/D68lS>(8T/EdiNhJM1kqC^rlbI;Ce900s4&ABtK`
%.d#rSZM#A(_DGb0%%JhQ\d#hEiJX1qg`u95f)M04aAqGLWJ;!]&-$U$R%eN@:1"Q4bc$;K><,o4#>?ATe,s*3"HNZ92HD_D'=J%j
%\&[S[T\lP&h\9sp5JK)<o)Vu>$i-bPQ;F;7nIr]0E%^Opk<!)RS)!ZK]P4tR/_T)lk_i(Rmg*-MbC"-r7\A%s_SbK5:dRj*]b`F"
%c`Fma:&Nbta4R<_?52`Fl=3fEo#KYfcTh?Nhu0(<p?o3H+'J@ODhThts02OPmEYX)(V]*?ITY:H2_X9>%fRp0_\-SI]sXI6s5!\N
%1K_U?7/<g<")^8:N'Fc#82hN,XSDcjqb/1N^ci4P.)^2-rjoc+:ENSA"G&rF]_Q6;6B-bKH*gI.fq%X>MBLR!G?3ueir(N;gub,t
%>!Jc8GM/tI&bf@<ViniL']RD5h1Z)t1^/17gNZ55Zr:=kH*gLE(.u;";b)2)d-'4&PrI[H,R#>k(V_+S>RE\DA6Ws[O7qcqS$upX
%^56#XUPjQfhnK@/[D(i&>UJ`='=E:E[Jqg*WlN"Er9[5.D'n31s#:[71JW:hSp-!6l?!8r%Ea"N*rpAe.;_RNgaK4U6d`VVSF06N
%8./f0r9CNmSHYK6QMB+qTJQh,!mhEq&pTG,G2sd)F@U?0)QCs$f&?GWn$bm&C_]o>@AG/`*6-\2I^n&Xg1I]&ZHrBtZ[F(eg6[<f
%[kE7/"5iHlDH6UhEgcmoijp+R$bJg9"VY2&\<GQ:9:>M0](0DUg]p`NarH1Lh'@41HMa*`g-3gYqse9fBUdC5a>W:L%sE+rgO$*C
%2lu;:G*f/aJ$OU1b>6jL51H,GGhp)qS)j&Vh1XOl[L]cqNVa`W+"`J"R8U-@c`28JP[s2Lh'@b;hLsY%p7_3%^O!oKMu9/DoIZ^'
%IeUaX]<BBN)=.a?Ijm=uiH*_,q_u!F[""A<rJhug^*pI_D%!f`[7cO(]Eu'(m6b`3J,+Vm=8+kii#>_k>7\sO_$;<LP[I#$Dgu/t
%R1,Im^Z3--+_F@D+d'-6`itYNY#XBZ$Cb(VFk31`)G4H5j-Cc\(S]Zt\`W4M[WrS0fsd81RuSnE^F+n^i!4P7eV$L/W8p6%78uE=
%k`sJfRFaP)/5Sa79VjV>")lg?<%$2C8a4+,T"I8u0HM';G9IGOV,b?:i*D0082O(PF^(2WPiTm5Sa1\?-G*?Z_eZc"66>8t+'jk2
%C<bK[YtLYue(o`(#`JMr1Z*jG_+:JUE/f>AqjN,V>/G]ncZd8!9`+&NF2)%f1PN[j^"X+t9a0LLR#B;6mAY8OM?;6<PJ4sM8fdE'
%nKh^!T&Be(iZtJa%_(YjIJ#P5KYE,r!0C1u(Z,hmQTr5Bk*Z4KXiP..EkA%S*t0r6DV>@^"_?aiO>0Q`)5o$TJ/a*fmF0C'(WGE8
%rd#.4J)qEVU3D8\[J5'lPFqhe6n>l5r=:6JDIp#ocH;Q_(o+q\WRda?=rT&9m0!7#<M=LJH(6'+1[3.2gj1O&)3>nDj7(oYldRR4
%Q^a)2lPVYugEU9h\%cS>8\I!-PL0n&lL^2sfqO,6%;k:sM"5Dk)/PJ6j'4P%3q>@Le[mN5c4eLXp]np0KgsgMgN9(VK`4ZSiO>_6
%]jg0Mr:qC]fJfAsjp("GP1cE,&>3(=`DYNtCP<S^Z2#*Hg0T#H<Tl(u@)R.=b/i&DoZ`.IRk*<J3m,]pk\@k86;4dBAI4bre3Z;j
%&qC^61\4igbnQ0iDe>RKd>gSZ[+kAO;IT129k0AL*@JK+oq#Or0C:)s9"j>+)uh8<VQifX(N'n8^([[4\rFHfqs/Adq:a`DchaNj
%DHhGN[DstQ9YC]YaZAWD(pU>5p"alTdtHO9Q8S-Yr-`KM/YBMjA'YmgMI-_VkVjB2%X50'0Y8PIZVHidDm6_XmC%Fh]>hF*bpBU,
%)I<TrRb`4uc!ll!^%Ds"Nn4"dJX:hro'ViInQ0I+W.g.1N+ctT3T8J`<RB9c;!10Ag#FES9lq_H6r_W<3_7*fIXLu8ZO=rd6C0gl
%#m!&^bBFnsV#Cf$iAQNenoUDi-If"KD;[Np_G$dRnW\IsK4N5Yd;HfYhrgbRH`YusgS;Mi[?G7IHd;5lS2#\]4Q`?iDr>Wb<c\oi
%'BX7ig5PlgE4c&DXYEW:m`R2no[d7Eo`NEKBQ%X6YnK%SnY8$E-'_Nf&`2o.QXcW@$)WH[ST*tLP<7aLpDd4q/)>,p?$Q.u=6-Ep
%,<Tjp=(@iW!Z)46[0=imJW34-eJ,Z\4D&0AAf9"^GijsZ'A\Pib?!;[nk?<jLiEV_bb;``L>:CUY`UmPI7o+o4)Ngd<Z6f8f]IAQ
%S&3TjMt@a'joj-CHV8Ur4OGPthj,90FM%<BiV&AZDa!p<4o6+fmq^8KeJiHI5LKG3=ri_NNW.R'lSmeok*FS<'B1k2WV"J`Cg!J"
%>r!I:#V3?s$]FtbVp1i>_JHt\$cPNo#I;;M>2#jY8Y1qUhLs4E@k)D>#o.T#\os'_OK</0ZsC0gr-TkscZL1VHhQ(WG01'7iHot!
%mtu2?F/FB>/!$rG>.cG-*9l%5mg-D'TALLUUtY^)Id>PKF".%EY#A`hpmqk@U2DNN/JM*A<Fo[L^\qD2;:fW]cqcm(8TB%JP-+@D
%$cgg-e!p:=l^r&nR1DNc_D.Z[b5%gZhQr1^L907'<&e=+?<-JRjB;U4D5ZT',tH@3<5&"(bW!\d$J\=_HCVAjY92VT<9j2>fsdHT
%7)2hF8d"gC$EtMd'!)V?N5le:*o/)b.(pBO=9^dV(s@B1*H;b*Z#0.#n(SNnC<?1[4s+=_XBrNb_`kGHI&O%"B<Y$he(TM%`q;m3
%C\RMTa+(L+B22d>I(h,9*(Le&;G?40W2h)$iZDkc\`g8'-%oe"PMfb%bCZ(!er5#B4aJ#1`9a[S#u_f*?+ILg'@r#V<n@.SDZl0D
%@XeZ`\_/70lRO-2Q&Jkq&(dhC^=L3k]4@B7UM[kr^<];X,^a7^au2@baT/:;5)W]eSD#UN?hlfh\hDGhqPuJ8q80lkV7aHMF*qhR
%R*_N9'i7=k\Fn_=lu$`;q]l-*S%\T?De@lb0-0)#%:=$XB9sXIe(T!D:<(k$H#9f?gU;I`X.?F,I?kXVK>Z%'FGPZtTk]hTGs0n<
%2P!#(jiUnqbt2!f2d-L(M-"8+P(!i`B=0HmW@1*Pf7391<Zc+8?KtFCHT&Kt-5^eVI>dL0dTk1b#,>5%g(oZgMuj?89][U05?1W^
%1$6C"(r91h@AmJ;h,.h@'(0gf^(X7,qJCFoj6'Og]#`niNEr8q]k2Wgg$RJ%TjFk@2sSV(#Cjbiia;V5QX=oMY7Cu3QTR(T@Ej(l
%]qi*rjo^j-)7JEP5aHDRektaVJ_O7;QTZF%VH:WRORJYM/s[?/>@J=4c<MIgQj69#QY_sRW9Ne-T1;'R[7dqi5.r],PD6nd%/*q1
%lXOG[^"+V8U`?uAe(_#LW1ATn[(qaBX^u8gJ,S6ZhN-fo^&?s'0)%[sf(4&AQWFqh]seRNBPrTtm5*FNg*PJoTAH%+\W-9"^usER
%f>dY>ilDnmF.Z5@8&g_Ea7)Q9IgeQh$sfVKL-Kg%@"k2I$U9M,;KkkH5OX*5"VnM7`.u&F@5XbVj19\XTPerHP5?GFfQ#9SAK&rI
%Gu7e7U?S[(h'*2]!7H;fYY@3>Hh<huH1/napBUj89L75.@+N+\0Cs1\lu(1;XZcTGrG31(I*bR_Z']EW(s2[^12t@B;4tXQR.7Dc
%FS-X8IR'"NL>#Kmn!+q@eLF;#N8:jOIJDXUrf'(tiuG1H*G=m`f%8A6UZH7cPjk;OT7/dHQ\,8-6mZ?e/B8u9Bp9IP<%E&E"dDDV
%6AQ7G'lC`<GCd%;UHK*0L9ZT52aNF#c"m\\nb6/KGSk!gpHD"Peu1)@.6^M4#b\SnH_H7FT.l2&$>A.Ijp?1)O<lkX,Tst$3-kWl
%:2EM@-Jn#TV_t>I&!-Hno1+-RK%.Y9mUgJs;fX5,U(T?NeYCA-8QR'$.l=O./Bm.273mW]HQ&QgGs&&lIp5Xj[?NUu=dQkpT]jgj
%`V!f2]=r*a0<6\4lcV,N_@.p1Qbr*1/;7fu]>@h<ZG_C0bY);he)'E`5H-;#-*u((?bTcAR[;=t(nKoBS5`]kJ2r.o]0+BQ5srGk
%UbL-Us154X@G3\6A1*:,G:^%%Q1*uuRJGGSreD8_?Eja%_FkI,RBe&h,UHo3R+0]k+U6UR<+UiGD[b+"di"Z:"s]#9p>k&,Wq;JF
%6.Z00JUO"^3+rqX29)'IC^.Z7B;TM*MX/n87tWN'%;7s=CAUnGEN-D5UUp_8#%PMl/di@m7V1:ica_Z":&s<$C>DQ_3tkr'T4[bB
%;,?Jl:WYHdASJqQrE\^Wa*0@8o+)R1X0&GjgPiu(Q2<HQ;=t>Z`Eh9u&A6F&75u^ulm])#)e:a"/@Rm^Gbe<hoZT]VQ'cJSqfhhO
%"[%m03r9Qc1l8e6S-rLT50SkkRN9Y^%bHaTqWWhq>>]jHArotP]b"qI$2@or]IBb8K!_5ua'8nZE<XEr&C:esSRlL%ke-AW.-G=<
%g4ZVVd:V<$Riaa[Z!jujH],6.oqVQTPe-^]W9:qpqTH(/Y.A`*#O!WnUS<Y36I/P5do8dO1T.dX.a.D(R44]/p-%9fgDS7<BhKuL
%Ae+0#<E4WbQPZ[EIeHB6`K]gjQ"caHbbMhMW_P"T=0UR]Q2O#:h+^mDM?n(Y2cV_TOhJa0VQ+5`=5JnPRCd/,BG6l2j!J_^I<]]`
%^_\.geHd>p]HWFme)h&EZH<81DWf3NON[NIJ^2qUT+VP1;J;C`q[eIiM?prR!ZT:B;Pm(sTue%?ON8eO`@6nWdAE=1\Ic-;c'4'q
%Z*RN+A5hcidWG?)YL?3c.a]W-"D*]ue]dJuQu_?Se_i&lbLs)*56i/j]<'TA#%%G07QoXk)$$N!^m/MWV7Kr5JlLODJ+V-8<qU*Y
%k1l3QX62PNQlFlcdf0NeghD4V!j%!6Tk&&D<gO)*WXe]i+buYCDPlDqRE]P;PLr*n6^`,=8\!#MQkZp7[notFc#4C[)R,XFR'#N&
%<t%f-Vq@_NBT=l35IsZ7>[%J?W%VF0[OdWj>57$D6RJP30!(aj_1(&jI/HhWpm;Q&f?\\fL#7eNI`i'Gq_E6c1@pUZZ(.bd(W''P
%B4&#!9D-X_*>I'[e*2/<'@RVCnI+rE:8G"I@f0&Y^Zld"d'W8M2ZJ:V[,nT0LNIT>kWqT$bh6@%FpG3\'$4"BN?,sL=P'O"7W5!R
%8^-DI4/mJ2_^BF'J>\b.4.tL4iX`FHknlqbUn]&/=13,&AeoFe][\\06s.NCS>^3G\g=[,X;1!FQ=:cKITYFc$0HCoFBal$oXd#U
%h.&m,<]k&q5dGb7M!Ca$hemot)oh#3>@:GaZ:SktqZm]/Dd+N7:;K-R;-/JbFB@TY.4L$<d=eco"%QInoNXL#;=1.K(gH?2ONg:r
%`9"%)9q-I;\PG#3RXZfpflUOP`0n3ZC,c!B(=?\/I&'n!LcI"SVJ>rs3OhO7N*9bshsE8/NG)\!5Z8:(i;I)OD\/c-\em\Cd>pC2
%U#dC#(KsZtLRmSiXb^gCG^fl']p.,l.DQY$k\j\QhkHjAdD--_'#9HZN8ld/*!#quh;>0l*lO+dn7]/!6gE6Jogn9$MKd_VY"a"T
%U3FG7oj?3uI\Msoa^n,jplVH7bh-ql@jPd!*snpjrSXX/_%CV=)/U4r1Nn4mG,E3CSh]9Bdka"foSgESSt;Y%^sb)ZV.Z7'luk0S
%aNiEe<rq42AF*Lsh'gB$1nB$,*N"lPUm9T+)/,J@A4B7TUc!)T)G7m\IPAsVG)'?B=?[ctOP)sH#nAj_S!_rR5lSCYre5]m'@s$D
%9\X)hb)'@K,dpN9g)#pO*WE2jihMUdg$tqJ9N)Yl$iLK<e'-BO0-glm^fEF'EcGMYe6R6sR"RiSM<9]Qc0fE5Upkr$2:jlKS1Z-X
%<_D9AU]#5S$B^l5_:dm4!b%RN(FV04C38:4O5csIqO@^]qVSKkr:8$rFLlScDaf-lIKTf`g3JDggM1K\rq:C^^fA^^rcZbKFu+X@
%mDh,ml\9=:[BG(k9r6R9=#m?o'RK\>[A^QT<)\DN&a=:[TZQ!=P(Y/l0%fYQqJlql<r<LLB&n)3C)qOp.7s=n^lZ;PK[F&)3?:Te
%+=nX]c3G:$UGY9O(>n="YL?0N!`6MIoQ6W+_OeZkCpXDp95Z\V/XW)T3T#QU8Cf>`\8DWIq*)Rd&8+aiBa=!;4:-JIc@G3hp`Li_
%@,<%Q="Ru]B;U>Uj,'!Lb`pWXe5nE/`7Y:0Z!-J?5o"`(L1Pu"10s2s+V]Wm\BjbDBHD17k1%te&pM\3<c0Ch6Nh(hHpR'TE'3FU
%BBBVee.+k5P3n9-=%g'LmJ3jjT@5Li$7/uim'IT,=O"aa_C8'=R'#t4f+#&1hE'r&ql0,)N`s<s*OQ3740"I=3G]H$=/ise;4'N@
%4"=)YIGC@)jDII>iVed_3T6/`lA@)t46e&<(]1SRK=^p[aH]Y>\SQe$3SX@<^<<Ti$odcfm#N-LD,G)H+,n7:]>'?G`Dkj72A<F(
%D'l<?NqpWm!DRZ#fP?lh$&tLlW,MCILi)"%]3bO<,[nK@JDqK&Q+RE5<WBB%-d0h\>I[sf0D(_j-tCtj9W=M7XBN@FT&+dHPPX`(
%[Ys(J>bE1*mf0?[=kq2&Ht&eQ8;Wk!GS;]*_9';9*7>'`VY[R.db0<%0BsZaSk"35[U"86h!X.X:-Qn^eTAR2DIM!IT.q[5mBODM
%Ns2_[B'2DEA%K\^_g>VbWQc%:S2:IjmZ2r;>FpJ>l8<jir$M'L'7HK(a5_#FK!Nf$1_2o6<8EUL_l;KBD4n)1HO?Q!Pq)oTmAH$8
%=3>lmn=T0Q*;u,',0:_g?d(l?IlM[$2M[RWZ'hC0k+<WeJqs.3%ep2i^Qd;C@YO,2[7)m#n!NIW7W3N"%6k%d1b'S=gm`J&RFZGd
%asP&VaILT'd;Qm&=:6NE,9BQ$7u?0nAO>`M)@GhDSlaU!<"WY&p@n+!aq'p`p1`k+'IYiCIJ0-A[9-DSHP"apl-`ZK%fn&9%%*G`
%[qRO"X^3Wm:RKOE"-U.W\U"_HU"3!"l**d`fBoB&rJX>H?[fQ4&?eI`UE$$@Eu"\"C[/mWLbhK(>c"FNqRFq9`!sL6JU=ad,75D>
%k@J"%1[q4+P1a]c`LB]8/dZb#->Y\,c:lp'R:lU`eUo,3`p>_H>tB]/jHW*H#nu5Dm9q(Y?.=bbF8Ie;M6mp%-6ReS6Ku'q>#DsG
%9.6&B`HIt.Lh;ff2_+V]%?4s9VD)p%IWf.<aYie1DFCg*kaM3XJ%]_IFku3h!F<;)dWHY.lV&$mZ(Tc>YG0c+K+:FPR!r[eb2:IR
%bPE<1\.M&p-YjZ.ET%+&F)kR<:`\XEI!,Z1VtbK"G,V:/'(F0JA'-]ch6dFFD%tO)7N.*t))g5@i#RFk0D(?cKGfSRc8[-7;l8Hf
%PZ'pP$7:Pm2k8^7,7om:2Kp+ar+#>M.3=JX\ZSF`bl6k/k<'QPrfh(;^O5kMbGCRY`UoXFqX9#2S:UE^,c9BqcZ8[hIg)VWM_G&D
%];`rcP(Gp*W,g_^/\cf8VemIcRYFT^LDE&Tgsab`P,W4$>7EV)RL8KI`Z1Z2!ALq?&ss-0-K"`mgCJ,W!%jFmLe^j!7Kl?7W7Tp\
%cX&/0c'H!K8#VK.`W>?T@PIEG+Glu7]?2gF_Si[%)Vg&k*FRI_m=n:'FI_$I4X3o&lKu/K7n$+\Tl6+3$kC-3;$LdC*$4886Cb;t
%92;*6>^BP]f)bFs#KVl9\9a0V`p0_>.6&un0F(NK/F;:E4"c(o(ou&!1`Cb!p3X8C0)\5r,#(M<OM2bYR3`0l`or)<LDP6ZN>;l!
%=h^`-F/Y5"BVo<]S"%PTHdic6Lb,%VC"&HHIs0f!Qt>V&b_/lJi7:J,0crtP51le0o[ZC#Z"3qopl)f*/D2\C._8U,LS/[2J049"
%c)H+2fLiH%bl9P+Z-/^L1/]+m<B_KXIT(L$qO<?'C_ORM)#+;E\^c1>[SEGXX)]K8W6BE=j"Lc>-GgF;jLPULO]ho0\YH)Q<9K:)
%!V/OS$[`aS+,/*[Z\h"/r6#sF/HB`uMa1e<Ud7(sq3[mjptIC/$_Q:emn(du)'b(V*p9Bp50a?Ga\<`18OZhig$/"7]Lgr3AtpRb
%]6XI$WV\T5`:^hcKi.K'Xr`=ZDME=[)l(RjRj9s=To9_-Vi@3g+n.&+"EN1=LZc-aHVuqQ`YdU@7m8!">:IQ3F^0qn."5#_$GqVA
%$[`ZUOZi2_43FK5!*]*a#i1/X7qaWL,V8Q'NmKsG67A%EZ#)fC^cm'J<U,*+@)'[(iR;$*4h"!HA`qZfKO3s&6]]SRB5Grt)/pt\
%WJB<Zc8S;ogKCCj>$`2B@X+AP4$nk"V:#JHLQ,c?I<LHMmtVS+"MHBUYR@p%4MQ$nPM4tOL)-pTneY]ILaaj!7r1<q$*`"/e]j2=
%g8G5*pA%5u'V./'"+;kYi_EF<'"gE5&$l?_6+fq%cI+%2D7SOs+r%"`p*81BPeEmD*c=>2)DSfN(]9;_jGWIK&deGrD@Ytjd..%i
%mroKB[+7M>`*Y[b2mtsKiK&KdfDkBa+5!(O71Aari&6%6.(8<Z3Wh*;&1ae#492sUN<^c):CnJE#mbgd6llBN(e%`>$_KQ3j21i"
%]eaGdj>c/o]0P8I?P\=A(3q!_FsDWJ_1"'>JNsY0@;V*-AnPsjI<rpuZ83uAWuEDKnnaL?Z-5[=AO]Zq`q@LWqcT(VCSh[?`M1N?
%:kWO;&S[`("M7a=>4h^ck>WD-HF'\,A"m]+LX=>A61l.rpkTe^jZ#SIIW;2)AW$i9@ol9)JWai-O:6;C@u85TPnFPr;V6/;g+)`"
%YWQH&=C,2Mei!j3oV$^"6cTgE^X[1N:>nJh1WpGQXGr4Iqp!"bro.CiJa"QJb**'?Kp0%p1#T.bF:9%+/.OR:5(X1ee;s^/>%:Fo
%$5jCp=fW]uFJ0kqVVeXuH?&c/QTS#U1b^N2.t\88oGgRk"qbUkO=[[f%2i&GC^GtRUkIu<p4tGZ9J_DtYCjjR)V9&T+nA5CK6T/r
%(rTQl`ZRUm(h`md@tS5!ag>oF=2l@gBZ@:@GArYfI!U+cBc`k:0o.L3N'W,c0ouW7%U7Nl@iu<IZ+NpNK6U&6(dt;?_ku0SlS.qg
%3CY(L66FGh'"Ku<Nc`2V;I2I$U919gk"DI%jt"PWoC#"3"4EFl"6iZ=L5;VJ;!+(eer7!qV*2'TW.dr#BhFWI4QA,.\@AL#KfDHl
%=A)bV3CDe3Z)lpnM,0_dMDO0YbS].jB+Ud!%!8]A<.R%3Q7Ac-3J2"=3Q"=o1!=d37p=3JB\NC9bS_[2d@<LURPQ4ZSIdVjTI@o^
%V@&kM84976K*X>I^qE;1<mH6hgU`Hk))f(ncRCtiAS-d.NjZ-sG$iO6nRTplXS:h1]"d$J^A[;c\"P@(!ZtX<FpkM@$Js#C?G0u8
%_=Fga(]HPa;Vn<a.2:j)5rrF'&KtIA=g0&9bu-l5!cO>V/-YokKqMS+FJ2j[VVa[DFH*ifN-M37IUt(L([OnC_GWe#=\>nk^eo>,
%9*o%c4A&]_(::Vk]O!s9R\ahH*A\2i)Q0=U+nA6.MKgo$;T)^QQ6JZ?;TOJk**p1^'^RrMX(Eg/Kk;d'IKp,"X;O\B3mGRKZP;q@
%R\bg:ZP;aZ)j=U3&TGC$;!U!W>ABHJ6HrCdh%!VDRHr0RndlW6BU1t;0&lrt,F/rj8W6ZQf?b$$J1Qpq,o`#hFoW^\#pbWS2+sY5
%_e4bH<R'@b"WJZ5*GT$3X1'@SDk:p8Ug-$(p4Z%pa)9T(AAq$r$A;`j6&*L7TN>qtM]Y\bM?l(2TmI=3d0<JMMQg*5'N%2LP`9:-
%AoEtMAl(;nrX4>mM,cB'&YTCX#a&rS+9`o$UN$;`&e8W;,!l`::nYU<D(A.C&L.Im?t5tdrg^i8<[Q/h`#NQ&A*puQ,sUCF'FdrT
%?;`3&p_O/a]k@(nJJ9&h(t-OO=!#b,4f04":kKI;,@HDcq8ub7'Xgb%MKGOXb,4&^>BGj]hMc]V'n0^:`T!++Ha<7.#W5.mQ6MPk
%'hG#$a'^jPQ)$C0.tg@ZMPQ&%PE\eNK@]!"-f!$&nk)K2\2$cV`*6u>,!o"%aG#qEp!-X!`XAUDMPNcZR\Xcr*?6?2BJ<`U1_7o-
%;T+o9Os34e;TOQH;PPEbj?d]IfENZOi[m#Z&YUO#Rr69J6^c'q*$Yu6ToUNL%U7;,G>(mSi]n:oNmJ:05V/.1"WNWIG5`XZ#pYQR
%2+aM3@r\C&H<KjK75ZA(h4k`D`M=q[Ie/N9/>ZUOR(Nu'YoY7s*2=4Drip.$_WRP$4cZ0LD"6u\alZYKe0p$PRYuR_5_gcuQ43*9
%"f?An1eTjZCs_Up_SV7hVT"$nPTmr$7O]P2-j;>'1e")P`(3SA"f4aPUf!!T2+k]u`p(1?:r]Fo.?q-cD1>=>5q=`!'Q^@8NOAYX
%P]A4T+%.Q*Nea=DkJ^;UoSbV"Tp40S;A.8I_%H')/B,%"lAo)*#W570A4hGR/;4_SKsFCk;V!H79A0##ArQ"4VKt&ZR:c5:Z'9o/
%du`[+QEgiT9/1U0I(YoP']Z04Y??`SPe<DoQ6J)<9t&jf>)-m`E'MCalXVHF/(6%<]VT3h,1J/t>\Gi]ZP5bIKrA+rg4`ubgO9A4
%afHCS(HTgYF0h+]QRS6+$8kI"(J4_@AgmrM3fRSti[m#\&Y[&ggMR7u_p%i;(jUoFI5FSONhXL7_GUf]JM(]'U)iS$=X_Ba2C+RT
%!(<7g80U2HQ@eX:O1,!Jpfk^8<f-,38B?[j9o8G1B,kM4ohromAQVR)33M:dK.j&"V-;,A.(4\p<%Q#ZWU;,b7>.,+OB&&@9X>EQ
%f:&FC.ADN*.3$Ndls;BPYV;iHC%5PrV6%Lj@O\?SZP8:ZI.<Z%:lJqbdk!rI+jEnQW*'Jqohi%0[-ru`.9kX%k7euE1:'5#a4f0J
%]-g5Xk#,AIb#0_bmSqZYUQe-d>`3tFP]H4oGpru]DB@O$,C%g)pj%Ac"ph0S>7(!bKE'MP7Z)r+Y9ADYaI6+ugInX@.DO$^hjLZG
%53e".]-C%=(=8sg_TMhlbB"eb)41pK]u%rh9HQ6O/X0sg'H:Mtp5A^>qjg""BO.=aQA*k>o6fe3$@ir`2Z[6`HFObBB;E&OR*;fa
%I>A`(EX;MI[>o]D@9Pc`SiMuYcL$K8O+bU)k.%5FrU'p%bZ68U^h%u2@2-=?T99R.T7\?oaclZ/?//n;Yp+N"RAY3?:",XIMskD6
%:ST2P0;NsOe`9!URO%^GeUa0'BGI+Jk#&8<e`)m2"0O-'Y7E05JQL90gIfXT\M]eN\^_[@:@*F$868oSNK:?O*dsGcQO&Y?\Iq4Y
%o0jB#%h8[ekKJ7F>Fs&8EUXdbjY_h2Bg<Dg"B&>u8V=l--s(e-Q=!ch#QQR#P_@o6\3#(<@K!3T4SSf639=[D]gAVjJc?bjO2#96
%0Z0'O0)ABYScC9[.S8d^B=*DP*Jt4g(S6(`4oTC(iF%UKf^I!]SSb,]f?hD6/n@%@,ELjL@,t0'4VEoHU#;Ea9VuKnlj`b+8j-Rg
%a97\5-$s+CC9pJWRotX1ke4hdjU;er@6Bj-_THNJiJSsl3iK"haCN3N@/"XXU4'Aj#8<^FngA;[M;t$mWJF_/9:0lhe]>-DLaq6j
%V*^uk.GVKjAB5`?,W0/ABI,b50)"I7d$R8&p,XeZqtIkMHH%dRcVqYT0d>JR2!?DX/2Zp+Pp3XPU>[Z?"KkX--4.OJMN<u)7opY4
%lE3I+k_,\;[4.!Y1BjVe[Dso9N=eGeKpM!ZSml,N;dH,E>_QH<BhFWI4QBfMRV[n3GQGDP]ML#92cUXNAsH=k[Ll_sFBQTFN$S^X
%Np(!#'":\b=.=3s6:8a4U$:8D]r)!WYkHZp\.KGsGQDq)7HC^Sh,Ka)*`lcO9Ub7XT0D3.l\uF)^#/hT:n"EpVh\\4"1bgij*1$f
%/HCJVX0<LQ0aPZGj<nkFPpE3F3I4(U[g6J4?Bo\hVN;73?lf[!V8k36hnJLq:pcG00O9jJ.VVL#\jm?i@a^Jh^NmimY"aBHe_6=*
%<Q^YS8k6eIX[;pq<KEnH.#7>Yh1(b:)C[,Fri:2RdLbGD8t(X5(Y3l54a%-LUesUJ#B^n^_i-";2<D25odE.(9UZUU2p^,_^pj';
%7eAqh?X]UH-\#a,0LLQW5p$U0QH6U3E#/%39"#G5F09"HB[nP9H-1s3o0dDaF,:lm;A*e<9W8&i6q4W3L&?fsrBc/@;l;2WW[\]F
%";A;R"N5$_17,k1^5t@X./VZ6'1d(L7e4F)d3hO3MR,t8F'-$WBamkp`e:ZNI!78-acTj\%ZNKWp*k#bLE*Bc!=B;j@(VB#kl/d>
%%H]4n=G=<G,0Vl2dgSCE)61Y/R7j:Y9?IlC`2L4!V%o6^iZf5)U6qEH&@%o]Su`G0VBh-/AlmH@MoSL20&9R2aAO](D=J2!-!1Yo
%:`X_e<HAi9Zm6^S)3p/_-9mHJHN8Y5*;=O(cVa]N7FtdR[%LRD($c7R[&D:Ags]L;LEs#uZZ@"*e%j/2`oEleC+)Dfm^VoS0[n1Q
%E[.NHGFT?h$Ss[LE1"b5KBJ,h#O4T5m1UjI!EIIYG-O9`mne,abb_>WQY[u1@!UVF&nlqPRE.Cdb\K:to?8a`TQE9!Z]Tb];b?c*
%,`EZ`/N%&iALaf9jBSa\"Nn?)D1s?)TeP*f,CVo"c6<h?NV#kJ)$YcBb6XBmBStcb/]bg2j+\7P8tRMYf[U\&;A%!6gWnll)p%]>
%1s/Rand3o5/uDe)JppW#\JT>MNH0Obg_[%Ua8@?W(^\ue0mHuAN"nj[K"BO["?mO^^XO=Dp,EVg_RP]^Y<]gfTnQhn@YjDufoM-T
%91?!:Gr3;9m;AZLBull_If3b^5No#=oUW+K&&J#*]<B_?#iE&$/U;B0b_/PAL!-Y0SMG43'1ENJ,S9X4B%Efu=8cS8%OUO/VR>&X
%#Lc[$FiZRD/mJTS9W=-gWi0I"C,Ta#Y-EjEkAF(2o)G1TMW!SfjslP!nik3$`VrZ'(6Bp].c5M&(\`\fK$HRM>Xe9$cHfL,*uu'#
%,U6%[>X]bOs8;I`HSMF*q!Rl%pt[%Pcej6MlarYdhL9eJQ3;.*I.Q=j0;!.]rla],YJ9pQGOt:Xh9F!$^OEomI/?_9B_UK7m2c0)
%hX9h2p?R2N_+esfRlB7)kmq-Nofmc0<2]~>
%AI9_PrivateDataEnd
